[{"content":"背景 在进行Cox模型的预后能力评估比较时，C-index作为一个重要的评价指标被广泛的使用。目前有多个R包 可以实现C-index的计算，如：Hmisc，survcomp等。但是，当进行计算时，发现一个问题，使用不同的 R包计算出的C-index值可能不同，虽然这一结果可能是由于对于[tied risk][1]事件的处理手段不同所造成的； 但是为了尽量获得可靠的C-index，决定采用Harrell本人开发的Hmisc包进行计算\n计算过程 \u0026gt; library(survival) \u0026gt; library(Hmisc) \u0026gt; data(colon) \u0026gt; d \u0026lt;- colon \u0026gt; surv \u0026lt;- y \u0026lt;- Surv(d $time, 1-(d$ status)) \u0026gt; m1 \u0026lt;- coxph(surv ~ rx+sex, data=d) \u0026gt; m2 \u0026lt;- coxph(surv ~ rx+sex+age, data=d) \u0026gt; m1.cindex \u0026lt;- rcorr.cens(-predict(m1), surv) #m1的C-index和置信区间 \u0026gt; m1.cindex C Index Dxy S.D. n missing uncensored 5.266315e-01 5.326294e-02 2.170980e-02 1.858000e+03 0.000000e+00 9.380000e+02 Relevant Pairs Concordant Uncertain 9.379880e+05 4.939740e+05 2.510688e+06 \u0026gt; CIndex \u0026lt;- round(m1.cindex[\u0026#39;C Index\u0026#39;], digits = 4) [1] 0.5266 \u0026gt; Lower \u0026lt;- round(CIndex - 1.96*m1.cindex[\u0026#39;S.D.\u0026#39;]/2, digits = 4) [1] 0.5053 \u0026gt; Upper \u0026lt;- round(CIndex + 1.96*m1.cindex[\u0026#39;S.D.\u0026#39;]/2, digits = 4) [1] 0.5479 # C-index比较的p值 \u0026gt; (r \u0026lt;- rcorrp.cens(predict(m1), predict(m2), surv)) Dxy S.D. x1 more concordant x2 more concordant n 6.069800e-02 2.345218e-02 5.282221e-01 4.675241e-01 1.858000e+03 missing uncensored Relevant Pairs Uncertain C X1 0.000000e+00 9.380000e+02 9.379880e+05 2.510688e+06 4.733685e-01 C X2 Dxy X1 Dxy X2 4.614846e-01 -5.326294e-02 -7.703084e-02 \u0026gt; (p.value \u0026lt;- round(2*(1 - pnorm(r[[\u0026#39;Dxy\u0026#39;]] / r[[\u0026#39;S.D.\u0026#39;]])), digits=4)) [1] 0.0096 参考 https://stats.stackovernet.com/cn/q/30724\nhttp://zeegroom.com/\n","permalink":"http://localhost:1313/en/posts/tech/c_index/","summary":"背景 在进行Cox模型的预后能力评估比较时，C-index作为一个重要的评价指标被广泛的使用。目前有多个R包 可以实现C-index的计算，如：Hmisc，survcomp等。但是，当进行计算时，发现一个问题，使用不同的 R包计算出的C-index值可能不同，虽然这一结果可能是由于对于","title":"C-index计算的相关问题"},{"content":"apply函数 apply函数是最常用的代替for循环的函数。apply函数可以对矩阵、数据框、数组(二维、多维)，按行或列进行循环计算，对子元素进行迭代，并把子元素以参数传递的形式给自定义的FUN函数中，并以返回计算结果。\n函数定义 apply(X, MARGIN, FUN, ...) 参数列表 X：矩阵、数据框、数组\nMARGIN：按行计算或按按列计算，1表示按行，2表示按列\nFUN: 自定义函数\n…: 自定义参数\n应用 对于矩阵行求和\nx\u0026lt;-matrix(1:12,ncol=3) apply(x,1,sum) ## [1] 15 18 21 24 自定义函数的使用\n# 生成data.frame x \u0026lt;- cbind(x1 = 3, x2 = c(4:1, 2:5)); x ## x1 x2 ## [1,] 3 4 ## [2,] 3 3 ## [3,] 3 2 ## [4,] 3 1 ## [5,] 3 2 ## [6,] 3 3 ## [7,] 3 4 ## [8,] 3 5 # 自定义函数myFUN，第一个参数x为数据 # 第二、三个参数为自定义参数，可以通过apply的\u0026#39;...\u0026#39;进行传入。 myFUN\u0026lt;- function(x, c1, c2) { c(sum(x[c1],1), mean(x[c2])) } # 把数据框按行做循环，每行分别传递给myFUN函数，设置c1,c2对应myFUN的第二、三个参数 apply(x,1,myFUN,c1=\u0026#39;x1\u0026#39;,c2=c(\u0026#39;x1\u0026#39;,\u0026#39;x2\u0026#39;)) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] ## [1,] 4.0 4 4.0 4 4.0 4 4.0 4 ## [2,] 3.5 3 2.5 2 2.5 3 3.5 4 lapply函数 lapply函数是一个最基础循环操作函数之一。主要操作对象是list、data.frame，并返回和X长度同样的list结构作为结果集。\n函数定义 lapply(X, FUN, ...) 参数列表 X：矩阵、数据框、数组 FUN: 自定义函数 …: 自定义参数\n应用 对list进行操作\nx \u0026lt;- list(a = c(1:3), b = c(4:6), d = c(10:20)) lapply(x, sum) ## $a ## [1] 6 ## ## $b ## [1] 15 ## ## $d ## [1] 165 对data.frame进行操作\nx \u0026lt;- data.frame(x1=3, x2=c(2:1,4:5)) lapply(x, sum) ## $x1 ## [1] 12 ## ## $x2 ## [1] 12 sapply函数 sapply函数是一个简化版的lapply，sapply增加了2个参数simplify和USE.NAMES，主要就是让输出看起来更友好，返回值为向量，而不是list对象。\n函数定义 sapply(X, FUN, ..., simplify=TRUE, USE.NAMES = TRUE) 参数列表 X：矩阵、数据框、数组 FUN: 自定义函数 …: 自定义参数 simplify：是否数组化，当值是array时，输出结果按数组进行分组 USE.NAMES：如果X为字符串，TRUE设置字符串为数据名，FALSE不设置\n应用 对上面的数据框x进行操作：\nsapply(x, sum) ## x1 x2 ## 12 12 class(lapply(x, sum)) # lapply返回list，sapply返回vector ## [1] \u0026#34;list\u0026#34; class(sapply(x, sum)) ## [1] \u0026#34;numeric\u0026#34; vapply函数 vapply类似于sapply，提供了FUN.VALUE参数，用来控制返回值的行名。\n函数定义 vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE) 参数列表 X：矩阵、数据框、数组 FUN: 自定义函数 FUN.VALUE：定义返回值的行名 …: 自定义参数 USE.NAMES：如果X为字符串，TRUE设置字符串为数据名，FALSE不设置\n应用 x \u0026lt;- data.frame(cbind(x1=3, x2=c(2:1,4:5))) vapply(x,cumsum,FUN.VALUE = c(\u0026#39;a\u0026#39;=0,\u0026#39;b\u0026#39;=0,\u0026#39;c\u0026#39;=0,\u0026#39;d\u0026#39;=0)) #注意FUN.VALUE的用法 ## x1 x2 ## a 3 2 ## b 6 3 ## c 9 7 ## d 12 12 mapply函数 相当于多参数版本的 sapply。第一次计算传入各组向量的第一个元素到FUN，进行结算得到结果；第二次传入各组向量的第二个元素，得到结果；第三次传入各组向量的第三个元素…以此类推。\n函数定义 mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE,USE.NAMES = TRUE) 参数列表 主要使用的参数有三个 FUN: 自定义函数 FUN.VALUE：定义返回值的行名 …: 自定义参数\n应用 mapply(rep, 1:4, 4:1) #每一组参数都是对应的 ## [[1]] ## [1] 1 1 1 1 ## ## [[2]] ## [1] 2 2 2 ## ## [[3]] ## [1] 3 3 ## ## [[4]] ## [1] 4 tapply函数 tapply用于分组的循环计算，通过INDEX参数可以把数据集X进行分组，相当于group by的操作。\n函数定义 tapply(X, INDEX, FUN = NULL, ..., simplify = TRUE) 参数列表 X：向量 INDEX: 分组索引 FUN: 自定义函数 …: 接收多个数据 simplify：是否数组化，当值array时，输出结果按数组进行分组\n应用 # 对样本分组计数 tapply(warpbreaks$breaks, warpbreaks[,-1], sum) ## tension ## wool L M H ## A 401 216 221 ## B 254 259 169 ","permalink":"http://localhost:1313/en/posts/tech/apply/","summary":"apply函数 apply函数是最常用的代替for循环的函数。apply函数可以对矩阵、数据框、数组(二维、多维)，按行或列进行循环计算，对子元素进行迭代，并把子元素以参数传递的形式给自定义的FUN函数中，并以返回计算结果。 函数定义 apply(X, MARGIN, FUN, ...) 参数列表 X：矩阵、数据框、数组 MARGIN","title":"浅识apply家族"},{"content":"Single cell 单细胞测序-最佳的分析Pipeline Single-cell best practices Orchestrating Single-Cell Analysis with Bioconductor Best Practices for Spatial Transcriptomics Analysis with Bioconductor Analysis of single cell RNA-seq data RNA-seq analysis 该教程比较详细，适合初学者。\nGuide to RNA-seq analysis Bioinformatics Practical Computing and Bioinformatics for Conservation and Evolutionary Genomics Bioinformatics Tutorial Data Visualization Fundamentals of Data Visualization Data visualisation using R, for researchers who don’t use R ggplot2: Elegant Graphics for Data Analysis (3e) Data Science R for Data Science (2e) 数据科学中的 R 语言 Machine learning Tidy Modeling with R The caret Package Caret Package – A Practical Guide to Machine Learning in R AI-EDU R Packages R Packages (2e) ","permalink":"http://localhost:1313/en/posts/read/bioinfo_resource/","summary":"Single cell 单细胞测序-最佳的分析Pipeline Single-cell best practices Orchestrating Single-Cell Analysis with Bioconductor Best Practices for Spatial Transcriptomics Analysis with Bioconductor Analysis of single cell RNA-seq data RNA-seq analysis 该教程比较详细，适合初学者。 Guide to RNA-seq analysis Bioinformatics Practical Computing and Bioinformatics for Conservation and Evolutionary Genomics Bioinformatics Tutorial Data Visualization Fundamentals of Data Visualization Data visualisation using R, for researchers who don’t use R ggplot2: Elegant Graphics for Data Analysis (3e) Data Science R for Data Science (2e) 数据科学中的 R 语言 Machine learning Tidy Modeling with R The caret Package Caret Package – A Practical Guide to Machine Learning in R AI-EDU R","title":"生物信息学学习资源"},{"content":"基因组大小 人类基因组主要由细胞核的23对染色体组成(核基因组)，还包括线粒体中的小DNA分子(线粒体基因组)。 单倍体基因组大概有30亿个碱基对组成，具体到每个染色体的碱基对长度与基因数量可见下图: 在这30亿个碱基中，仅有1.5%的区域是2~3w个可编码蛋白质的基因。 平均基因长度有10Kbp左右，但是不同基因的长度区别很大 其余98.5%的区域为非编码区，包括各种调控基因表达的DNA原件，同时也可以转录为non-coding RNA，发挥潜在作用。 参考基因组和基因组注释 参考基因组与基因组注释的关系 自从 1990 启动的家喻户晓的人类基因组计划开始，全世界的科学家竭尽全力破译了第一个完整的人类基因组，从那时开始人类拿到了一本只有 ATCG 四个碱基书写的天书。后续人们逐步完善了基因组序列信息，并写在 Fasta 格式的文本文件“天书”中，这本天书就叫做参考基因组。\n科学家利用实验手段解析大量的基因和非编码序列，这些序列被标记在参考基因组的位置上，同时加入了大量的注释信息，最终写成了 BED，GTF等不同格式的注释文件。因此，基因组注释文件就把基因序列和基因功能联系起来。\n随着时间的推移，在更先进技术的加持下，在已经构建好的基因组和注释信息上不断增加，删减，修改，就有了不同的版本。每个版本的参考基因组都对应相应的基因组注释文件。\n基因组版本命名 为了更加准确的构建标准参考基因组，NCBI，EBI，桑格研究所等机构共同组建了参考基因组联盟(Genome Reference Consortium)。GRC 利用最佳的技术装配，纠正，增加基因组序列，以此作为在生信分析领域作为参考的基因组。目前，该机构构建了人，小鼠，大鼠，斑马鱼，鸡的参考基因组。\n人的参考基因组官名叫 GRCh38 （Genome Reference Consortium Human Build 38），GRCh38 在UCSC基因组浏览器中还有个小名 hg38，这个小名对于大多数人来说是更亲切熟悉的。GRCh38 在 GenBank 中叫 GCA_000001405.15，在 RefSeq 中叫 GCF_000001405.26，虽然 GRC 组织建议在所有出版物和工具中使用该编号，但事实是前两种 GRCh38 和 hg38 对生信分析更常见。在不更改染色体坐标的情况下，向参考基因组添加或替换新序列，这种打补丁的方式，会在基因组版本后加 .p （patch）来命名。如果有大的基因组位置变动，则是大版本的更新，我们一般体到的hg19和hg38就是这种情况。\n常用的人和小鼠参考基因组对应列表如下：\n发布时间 2013 2009 2006 GRC 官名 GRCh38 GRCh37 GRCh36 UCSC hg38 hg19 hg18 Ensemble GRCh38 GRCh37 GRCh36 GENCODE 38 19 3c NCBI GRCh38 GRCh37 GRCh36 GenBank GCA_000001405 RefSeq GCF_000001405 发布时间 2020 2011 2007 GRC 官名 GRCm39 GRCm38 UCSC m39 mm10 mm9 Ensemble GRCm39 GRCm38 GENCODE M27 M25 M1 NCBI GRCm39 GRCm38 NCBIM37 参考基因组文件 人类基因组序列信息通常以染色体为单位保存为fasta文件中。\n参考基因组一般保存为纯文本格式，即直接记录“A”、“T”、“C”、“G”这样的 ASCII 码字符。而1个 ASCII 字符，大小是 1B，所以，如果按纯文本保存 30亿个字母(单链)，就是30亿字母 = 3,000,000,000 B = 3 GB。 理论上应该只有25条序列信息(Chr1:22,X,Y,ChrM)。但是在实际下载的文件中，序列数量远远不止这些。 这是由于参考序列一般是通过二代测序产生的，测得的短Read片段拼接、组装成基因组的染色体序列，需要经历contigs与scaffolds两个过程。在拼接过程中会产生额外的scaffolds信息。\n这些scaffolds序列主要可以分为三类：\nUnlocalized scaffolds(xxxx_random):知道这些scaffolds在哪条染色体上，但不知道其在染色体的具体位置及方向，其命名规则为chr{chromosome number orname}_{sequence_accession}v{sequence_version}_random, 如：chr11_KI270721v1_random Unplaced scaffolds(chrUn_xxxxxx):不知道这条scaffolds的所属染色体信息，命名规则为chrUn_{sequence_accession}v{sequence_version}, 如：chrUn_KI270302v1 Alternate loci scaffolds(xxx_alt):这一部分主要是人群特异的一些序列，正常参考序列要求在99.9%的人群中一致，但存在部分序列是某个人群特异的(如50%是A序列，50%是B序列)，这部分序列的确存在但又不是参考序列，标记为Alternate loci scaffolds，其命名规则为chr{chromosome number or name}_{sequence_accession}v{sequence_version}_alt, 如：chr1_KI270762v1_alt Alternate loci scaffolds为hg38版本基因组新添类型Sequence，此前hg19版本还没有。\n基因组结构 基因 DNA可分为编码区和非编码区：编码区可转录为 mRNA 并最终翻译成蛋白质；非编码区上具有基因表达的调控元件。\n编码区：在转录的过程，从DNA编码区的5’端开始转录生成preRNA，然后进一步加工修饰剪切得到成熟mRNA，进行后续的翻译。 外显子：在preRNA 经过剪切或修饰后、被保留的DNA部分。 起始密码子(Start Codon)：是mRNA上开始合成蛋白质的密码子，也是第一个被核糖体翻译的mRNA密码子。通常为AUG。 终止密码子(Stop Codon)：代表核糖体翻译的终止。通常为UAG、UAA、UGA。 UTR(untranslated region)：属于外显子部分。即外显子也包含非编码区域。 位于5’端的UTR称为5’UTR, 从mRNA起点的甲基化鸟嘌呤核苷酸帽延伸至AUG起始密码子。 与5’UTR上游的第一个碱基相对应DNA链上的碱基称为TSS(Transcription start sites) 位于3’端的UTR称为3’UTR，为mRNA的结束部分，从编码区末端的终止密码子延伸至多聚A尾巴（Poly-A）。 与3’UTR下游的最后一个碱基相对应DNA链上的碱基称为TTS(Transcription termination sites) CDS(Coding sequence)：包括mRNA中从5’UTR后的起始密码子开始到3’UTR前的终止密码子的实际编码蛋白序列 ORF(Open reading frame)：从一个起始密码子开始到一个终止密码子结束的一段序列 CDS一定是ORF，ORF不一定是CDS\nTranscript转录本：一条基因通过可变剪切机制可转录形成的一种或多种可供编码蛋白质的成熟的mRNA。 在最终成熟mRNA的上下游两端修饰有特殊的结构，分别是5’ cap帽子与 3’ Poly-A尾巴。 Poly-A尾是mRNA’区别于其它non-coding RNA的主要标志\n非编码区：位于DNA序列上下游的non-coding区域含有调控基因表达原件 启动子Promoter：DNA分子上能与RNA聚合酶结合并形成转录起始复合体的区域，位于TSS位点上游的100~1000碱基序列。 终止子Terminator：给RNA聚合酶提供转录终止信号的DNA序列 增强子Enhancer：可以蛋白质结合的小段DNA，从而加强所调控基因的转录作用。可以位于靶基因的上游/下游，距离也可以很远。 参考基因组下载 参考基因组可以从NCBI、ENSEMBL、UCSC等网站下载，此外gencode网站提供了最新最全的人类和小鼠的基因组序列和注释信息。iGenomes网站提供了较为全面的各版本参考序列构建好的注释文件和各类比对软件的索引文件，可直接下载使用。\n","permalink":"http://localhost:1313/en/posts/tech/genome/","summary":"基因组大小 人类基因组主要由细胞核的23对染色体组成(核基因组)，还包括线粒体中的小DNA分子(线粒体基因组)。 单倍体基因组大概有30亿个碱基对组成，具体到每个染色体的碱基对长度与基因数量可见下图: 在这30亿个碱基中，仅有1.5%的区域是2~3w个可编码蛋白质的基因。 平均基因长度有","title":"人类基因组知识汇总"},{"content":"nohup和\u0026amp;使用方法 nohup(不挂断) nohup是no hung up的缩写，意思是不挂断 。\nnohup 语法格式：\nnohup command [arg...] 说明：\n除了无法进行输入操作（比如输入命令、换行、打空格等） 外 ，标准输出 保存到 nohup.out文件中。 关闭客户端后，命令仍然会运行，不会挂断。 例如： 执行 nohup sh test.sh脚本命令后，终端不能接收任何输入，标准输出 会输出到当前目录的nohup.out文件。即使关闭xshell退出后，当前session依然继续运行。\n\u0026amp;（可交互） \u0026amp;语法格式：\ncommand [arg...] \u0026amp; 说明：\n能进行输入操作（比如输入命令、换行、打空格等），即可进行交互 输入和输出的操作。 标准输出 保存到 nohup.out文件中。 但是 关闭客户端后，程序会就马上停止。 例如：\n执行sh test.sh \u0026amp;脚本命令后 ，关闭 xshell，脚本程序也立刻停止。\nnohup和\u0026amp;一块使用（不挂断，可交互） 语法格式：\nnohup command [arg...] \u0026amp; 说明：\n能进行输入操作（比如输入命令、换行、打空格等），即 可进行交互 输入和输出的操作。 标准输出保存到 nohup.out 中， 关闭客户端后命令仍然会运行。 例子： 执行nohup sh test.sh \u0026amp;命令后，能进行输入操作，标准输出的日志写入到nohup.out文件，即使关闭xshell，退出当前session后，脚本命令依然继续运行。\n日志的重定向\u0026gt; 上面提到的日志文件默认名称是nohup.out，如果修改日志文件的名称，则用到重定向 ，符号是 \u0026gt; ，语法格式是\n\u0026gt; logFile 说明：\n\u0026gt; 是重定向的符号。 logFile 是日志文件名称，最好是英文、数字。 此时， nohup、 \u0026amp; 、 \u0026gt; 三者一块使用的 语法格式 ：\nnohup command \u0026gt;logFile \u0026amp; 示例：\nnohup start.sh \u0026gt; aa.log \u0026amp; 说明：执行上面的命令后，可以进行输入，也能在后台运行，运行的日志输出到 aa.log 日志中。\n错误信息的处理 nohup command \u0026gt;logFile \u0026amp; 虽然解决输入输出，后台也能运行问题，但是还有一项是错误信息无法输出到 日志文件中，要解决这个问题，需要增加命令2 \u0026gt; file。\n标准输出 和 错误信息 同时使用，语法格式如下：\n\u0026gt;logFile1 2 \u0026gt;logFile2 Linux 标准输入、输出、错误信息的符号 Linux 标准输入、输出、错误信息的符号：\n0表示 stdin (standard input) 标准信息输入 ； 1表示 stdout (standard output) 标准信息输出 ； 2表示 stderr (standard error) 错误信息 ； /dev/null 表示空设备文件。 如果不想输出任何的日志时，使用此参数 。\n再来回顾上面的示例：\nlogFile1 2 \u0026gt;logFile2 \u0026gt; logFile1 ：即 1 \u0026gt;logFile1，1是标准信息输出，是默认的，可以省略，logFile1是 日志文件名字。 2 \u0026gt;logFile2 ：2 是错误信息，即将 错误信息 输出 到 logFile2 文件中 。 错误信息 和 标准输出 输出在同一个文件中 如果想把 错误信息 和 标准输出 在同一个文件中 ，使用 2\u0026gt;\u0026amp;1 。 语法如下：\n\u0026gt;logFile 2\u0026gt;\u0026amp;1 说明：\n\u0026gt;logFile 表示 标准信息 输出到 logFile 文件中； 2\u0026gt;\u0026amp;1 表示 把 2（错误信息） 重定向， 输出到 1（标准输出） 中 。 两者的共同使用，表示 把 2（错误信息） 、1（标准输出） 都输出到同一个文件（logFile）中。 综合使用（推荐） 综上所述， 功能最全、推荐语法如下：\nnohup command \u0026gt;logFile 2\u0026gt;\u0026amp;1 \u0026amp; 示例：\nnohup start.sh \u0026gt; mySysLog.log 2\u0026gt;\u0026amp;1 \u0026amp; 说明： 执行命令后，并且将 标准输出(1)、错误信息(2) 写入到 mySysLog.log 文件中。\n","permalink":"http://localhost:1313/en/posts/tech/nohup/","summary":"nohup和\u0026amp;使用方法 nohup(不挂断) nohup是no hung up的缩写，意思是不挂断 。 nohup 语法格式： nohup command [arg...] 说明： 除了无法进行输入操作（比如输入命令、换行、打空格等） 外 ，标准输出 保存到 nohup.out文件中。 关闭客户端后，命令仍然会运行，不会挂断。 例如： 执行 nohup sh test.s","title":"nohup用法"},{"content":"背景 通常在对物种做GO富集分析时，我们会遇到2种情况模式物种 \u0026amp; 非模式物种；针对模式物种专门的Orgdb包，但是目前针对模式物种的包只有20种,针对非模式职位另一种解决方案是通过AnnotationForge包来创建Orgdb包，本节来介绍如何构建非模式物种的Orgdb来做GO富集分析\n1.准备注释文件 首先需要获取物种对应的注释文件（无论蛋白组还是基因组）\n注释文件可以通过eggnog网站上传参考序列文件注释得到(eggnog-mapper也可注释)\n注释之后会生成以下文件：\n[project_name].emapper.hmm_hits: 记录每个用于搜索序列对应的所有的显著性的eggNOG Orthologous Groups(OG). 所有标记为\u0026quot;-\u0026ldquo;则表明该序列未找到可能的OG [project_name].emapper.seed_orthologs: 记录每个用于搜索序列对的的最佳的OG，也就是[project_name].emapper.hmm_hits里选择得分最高的结果。之后会从eggNOG中提取更精细的直系同源关系(orthology relationships) [project_name].emapper.annotations: 该文件提供了最终的注释结果。大部分需要的内容都可以通过写脚本从从提取。 [project_name].emapper.annotations中主要列对应的记录如下：\nquery_name: 检索的基因名或者其他ID sedd_ortholog: eggNOG中最佳的蛋白匹配 evalue: 最佳匹配的e-value score: 最佳匹配的bit-score Preferred_name: 预测的基因名，特别指的是类似AP2有一定含义的基因名，而不是AT2G17950这类编号 GOs: 推测的GO的词条， 未必最新 KEGG_KO: 推测的KEGG KO词条， 未必最新 BiGG_Reactions: BiGG代谢反应的预测结果 2.安装AnnotationForge包 if (!requireNamespace(\u0026#34;BiocManager\u0026#34;, quietly = TRUE)) install.packages(\u0026#34;BiocManager\u0026#34;) BiocManager::install(\u0026#34;AnnotationForge\u0026#34;) 3.导入数据 从准备的注释文件导入注释信息，并提取必要的列用于构建库\nemapper \u0026lt;- read.delim(\u0026#34;emapper.annotations.xls\u0026#34;) %\u0026gt;% dplyr::select(GID=query_name,Gene_Symbol=Preferred_name, GO=GOs,KO=KEGG_ko,Pathway =KEGG_Pathway, OG =X.3,Gene_Name =X.4) gene_info \u0026lt;- dplyr::select(emapper,GID,Gene_Name) %\u0026gt;% dplyr::filter(!is.na(Gene_Name)) gene2go \u0026lt;- dplyr::select(emapper,GID,GO) %\u0026gt;% separate_rows(GO, sep = \u0026#39;,\u0026#39;, convert = F) %\u0026gt;% dplyr::filter(GO!=\u0026#34;\u0026#34;,!is.na(GO)) %\u0026gt;% mutate(EVIDENCE = \u0026#39;A\u0026#39;) 4.构建0rgdb包 AnnotationForge::makeOrgPackage(gene_info=gene_info, go=gene2go, maintainer=\u0026#39;test\u0026lt;youremail@gmail.com\u0026gt;\u0026#39;, author=\u0026#39;name\u0026#39;, version=\u0026#34;0.1\u0026#34; , outputDir=\u0026#34;.\u0026#34;, tax_id=\u0026#34;59729\u0026#34;, genus=\u0026#34;M\u0026#34;, species=\u0026#34;A\u0026#34;, goTable = \u0026#34;go\u0026#34;) 5.安装R包 可以直接从文件夹进行安装，也可以构造之后安装\ninstall.packages(\u0026#39;path/to/dir\u0026#39;, repos = NULL, type = \u0026#39;source) ","permalink":"http://localhost:1313/en/posts/tech/annotationforge/","summary":"背景 通常在对物种做GO富集分析时，我们会遇到2种情况模式物种 \u0026amp; 非模式物种；针对模式物种专门的Orgdb包，但是目前针对模式物种的包只有20种,针对非模式职位另一种解决方案是通过AnnotationForge包来创建Orgdb包，本节来介绍如何构建非模式物种的Orgdb来做GO富集","title":"AnnotationForge包构建非模式物种Orgdb包"},{"content":"镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。\nDockerfile 是一个文本文件，其内包含了一条条的 指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。\n使用Dockerfile定制镜像 在一个空白目录中，建立一个文本文件，并命名为 Dockerfile:\nmkdir mynginx cd mynginx touch Dockerfile 其内容为：\nFROM nginx RUN echo \u0026#39;\u0026lt;h1\u0026gt;Hello, Docker!\u0026lt;/h1\u0026gt;\u0026#39; \u0026gt; /usr/share/nginx/html/index.html FROM 指定基础镜像 所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。而 FROM 就是指定基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。\n除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。 如果你以scratch为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。\nRUN 执行命令 RUN 指令是用来执行命令行命令的。由于命令行的强大能力，RUN 指令在定制镜像时是最常用的指令之一。其格式有两种：\nshell 格式：RUN \u0026lt;命令\u0026gt;，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 RUN 指令就是这种格式。 RUN echo \u0026#39;\u0026lt;h1\u0026gt;Hello, Docker!\u0026lt;/h1\u0026gt;\u0026#39; \u0026gt; /usr/share/nginx/html/index.html exec 格式：RUN [\u0026ldquo;可执行文件\u0026rdquo;, \u0026ldquo;参数1\u0026rdquo;, \u0026ldquo;参数2\u0026rdquo;]，这更像是函数调用中的格式。 Dockerfile 中每一个指令都会建立一层，RUN 也不例外。每一个 RUN 的行为：新建立一层，在其上执行这些命令，执行结束后，commit 这一层的修改，构成新的镜像。 因此，在构建镜像时，不能每一个指令都单独在一个RUN中，这样是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 Dockerfile 正确的写法应该是这样：\nFROM debian:stretch RUN set -x; buildDeps=\u0026#39;gcc libc6-dev make wget\u0026#39; \\ \u0026amp;\u0026amp; apt-get update \\ \u0026amp;\u0026amp; apt-get install -y $buildDeps \\ \u0026amp;\u0026amp; wget -O redis.tar.gz \u0026#34;http://download.redis.io/releases/redis-5.0.3.tar.gz\u0026#34; \\ \u0026amp;\u0026amp; mkdir -p /usr/src/redis \\ \u0026amp;\u0026amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\ \u0026amp;\u0026amp; make -C /usr/src/redis \\ \u0026amp;\u0026amp; make -C /usr/src/redis install \\ \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/* \\ \u0026amp;\u0026amp; rm redis.tar.gz \\ \u0026amp;\u0026amp; rm -r /usr/src/redis \\ \u0026amp;\u0026amp; apt-get purge -y --auto-remove $buildDeps 首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 RUN 一一对应不同的命令，而是仅仅使用一个 RUN 指令，并使用 \u0026amp;\u0026amp; 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。\n并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 \\ 的命令换行方式，以及行首 # 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。\n此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 apt 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。\n构建镜像 在 Dockerfile 文件所在目录执行：\ndocker build -t nginx:v3 . Sending build context to Docker daemon 2.048 kB Step 1 : FROM nginx ---\u0026gt; e43d811ce2f4 Step 2 : RUN echo \u0026#39;\u0026lt;h1\u0026gt;Hello, Docker!\u0026lt;/h1\u0026gt;\u0026#39; \u0026gt; /usr/share/nginx/html/index.html ---\u0026gt; Running in 9cdc27646c7b ---\u0026gt; 44aa4490ce2c Removing intermediate container 9cdc27646c7b Successfully built 44aa4490ce2c 从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 Step 2 中，如同我们之前所说的那样，RUN 指令启动了一个容器 9cdc27646c7b，执行了所要求的命令，并最后提交了这一层 44aa4490ce2c，随后删除了所用到的这个容器 9cdc27646c7b。 这里我们使用了 docker build 命令进行镜像构建。其格式为：\ndocker build [选项] \u0026lt;上下文路径/URL/-\u0026gt; Dockerfile指令 COPY复制文件 COPY [--chown=\u0026lt;user\u0026gt;:\u0026lt;group\u0026gt;] \u0026lt;源路径\u0026gt;... \u0026lt;目标路径\u0026gt; COPY 指令将从构建上下文目录中 \u0026lt;源路径\u0026gt; 的文件/目录复制到新的一层的镜像内的 \u0026lt;目标路径\u0026gt; 位置。比如：\nCOPY package.json /usr/src/app/ COPY hom* /mydir/ COPY hom?.txt /mydir/ 在使用该指令的时候还可以加上 --chown=\u0026lt;user\u0026gt;:\u0026lt;group\u0026gt; 选项来改变文件的所属用户及所属组。\nCOPY --chown=55:mygroup files* /mydir/ COPY --chown=bin files* /mydir/ COPY --chown=1 files* /mydir/ COPY --chown=10:11 files* /mydir/ ⚠️注意：如果源路径为文件夹，复制的时候不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径。\nADD 高级复制文件 ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。\n比如 \u0026lt;源路径\u0026gt; 可以是一个 URL，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 \u0026lt;目标路径\u0026gt; 去。下载后的文件权限自动设置为 600，如果这并不是想要的权限，那么还需要增加额外的一层 RUN 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 RUN 指令进行解压缩。\nADD明亮更加复杂，有时不如COPY命令好用，推荐使用COPY命令\nCMD 容器启动命令 CMD 指令的格式和 RUN 相似，也是两种格式：\nshell 格式：CMD \u0026lt;命令\u0026gt; exec 格式：CMD [\u0026quot;可执行文件\u0026quot;, \u0026quot;参数1\u0026quot;, \u0026quot;参数2\u0026quot;...] 参数列表格式：CMD [\u0026quot;参数1\u0026quot;, \u0026quot;参数2\u0026quot;...]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。 Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。\n## 两者等同 CMD echo $HOME CMD [ \u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;echo $HOME\u0026#34; ] ","permalink":"http://localhost:1313/en/posts/tech/docker_4/","summary":"镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。 Dockerfile 是一个文本文件，其内包含了一","title":"Docker | 构建镜像"},{"content":"启动 启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（exited）的容器重新启动。\n新建并启动 所需要的命令主要为 docker run\n## 启动并执行echo命令 $ docker run ubuntu:18.04 /bin/echo \u0026#39;Hello world\u0026#39; Hello world ## 启动交互式终端 $ docker run -t -i ubuntu:18.04 /bin/bash root@af8bae53bdd3:/# 当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：\n检查本地是否存在指定的镜像，不存在就从 registry 下载 利用镜像创建并启动一个容器 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去 从地址池配置一个 ip 地址给容器 执行用户指定的应用程序 执行完毕后容器被终止 启动已终止容器 可以利用 docker container start 命令，直接将一个已经终止（exited）的容器启动运行。\n守护态运行 更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 -d 参数来实现。\ndocker run ubuntu:18.04 /bin/sh -c \u0026#34;while true; do echo hello world; sleep 1; done\u0026#34; hello world hello world hello world hello world ## 如果使用-d参数程序会后台运行 docker run -d ubuntu:18.04 /bin/sh -c \u0026#34;while true; do echo hello world; sleep 1; done\u0026#34; 77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a 使用 -d 参数启动后会返回一个唯一的 id，也可以通过 docker container ls 命令来查看容器信息。\ndocker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 77b2dc01fe0f ubuntu:18.04 /bin/sh -c \u0026#39;while tr 2 minutes ago Up 1 minute agitated_wright 要获取容器的输出信息，可以通过 docker container logs 命令。\ndocker container logs [container ID or NAMES] hello world hello world hello world . . . 终止 可以使用 docker container stop 来终止一个运行中的容器。 终止状态的容器可以用 docker container ls -a 命令看到。例如\ndocker container ls -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ba267838cc1b ubuntu:18.04 \u0026#34;/bin/bash\u0026#34; 30 minutes ago Exited (0) About a minute ago trusting_newton 处于终止状态的容器，可以通过 docker container start 命令来重新启动。 docker container restart 命令会将一个运行态的容器终止，然后再重新启动它.\n进入容器 attach命令 docker run -dit ubuntu 243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550 docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 243c32535da7 ubuntu:latest \u0026#34;/bin/bash\u0026#34; 18 seconds ago Up 17 seconds nostalgic_hypatia docker attach 243c root@243c32535da7:/# 注意： 如果从这个 stdin 中 exit，会导致容器的停止。\nexec 命令 docker run -dit ubuntu 69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6 docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 69d137adef7a ubuntu:latest \u0026#34;/bin/bash\u0026#34; 18 seconds ago Up 17 seconds zealous_swirles ## 只使用-i参数没有终端，只会返回运行结果 docker exec -i 69d1 bash ls bin boot dev ... ## 使用-it参数可进入终端 docker exec -it 69d1 bash root@69d137adef7a:/# 如果从这个 stdin 中 exit，不会导致容器的停止。\n⚠️使用exec进入容器，相当于重新打开一个终端，并不影响原来运行的程序，使用attach相当于连接到正在执行的终端，不会启动新的进程。\n导出和导入 导出容器 docker container ls -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 7691a814370e ubuntu:18.04 \u0026#34;/bin/bash\u0026#34; 36 hours ago Exited (0) 21 hours ago test docker export 7691a814370e \u0026gt; ubuntu.tar 这样将导出容器快照到本地文件。\n导入容器 cat ubuntu.tar | docker import - test/ubuntu:v1.0 docker image ls REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE test/ubuntu v1.0 9d37a6082e97 About a minute ago 171.3 MB ## 也可以通过指定 URL 或者某个目录来导入 docker import http://example.com/exampleimage.tgz example/imagerepo 删除 删除容器 docker container rm trusting_newton trusting_newton 如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。\n清理所有处于终止状态的容器 用 docker container ls -a 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用docker container prune命令可以清理掉所有处于终止状态的容器。\n","permalink":"http://localhost:1313/en/posts/tech/docker_3/","summary":"启动 启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（exited）的容器重新启动。 新建并启动 所需要的命令主要为 docker run ## 启动并执行echo命令 $ docker run ubuntu:18.04 /bin/echo \u0026#39;Hello world\u0026#39; Hello world ## 启动交互式终端 $ docker run -t -i ubuntu:18.04 /bin/bash root@af8bae53bdd3:/# 当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：","title":"Docker | 常规操作"},{"content":" Docker 运行容器前需要本地存在对应的镜像，如果本地不存在该镜像，Docker 会从镜像仓库下载该镜像。\n获取镜像 Docker Hub 上有大量的高质量的镜像可以用，这里我们就说一下怎么获取这些镜像。\ndocker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签] Docker 镜像仓库地址：地址的格式一般是 \u0026lt;域名/IP\u0026gt;[:端口号]。默认地址是 Docker Hub(docker.io)。 仓库名：如之前所说，这里的仓库名是两段式名称，即 \u0026lt;用户名\u0026gt;/\u0026lt;软件名\u0026gt;。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。 $ docker pull ubuntu:18.04 18.04: Pulling from library/ubuntu 92dc2a97ff99: Pull complete be13a9d27eb8: Pull complete c8299583700a: Pull complete Digest: sha256:4bc3ae6596938cb0d9e5ac51a1152ec9dcac2a1c50829c74abd9c4361e321b26 Status: Downloaded newer image for ubuntu:18.04 docker.io/library/ubuntu:18.04 上面的命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub （docker.io）获取镜像。而镜像名称是 ubuntu:18.04，因此将会获取官方镜像 library/ubuntu 仓库中标签为 18.04 的镜像。docker pull 命令的输出结果最后一行给出了镜像的完整名称，即： docker.io/library/ubuntu:18.04。\n运行 有了镜像后，我们就能够以这个镜像为基础启动并运行一个容器。以上面的 ubuntu:18.04 为例，如果我们打算启动里面的 bash 并且进行交互式操作的话，可以执行下面的命令。\ndocker run -it --rm ubuntu:18.04 bash root@e7009c6ce357:/# cat /etc/os-release NAME=\u0026#34;Ubuntu\u0026#34; VERSION=\u0026#34;18.04.1 LTS (Bionic Beaver)\u0026#34; ID=ubuntu ID_LIKE=debian PRETTY_NAME=\u0026#34;Ubuntu 18.04.1 LTS\u0026#34; VERSION_ID=\u0026#34;18.04\u0026#34; HOME_URL=\u0026#34;https://www.ubuntu.com/\u0026#34; SUPPORT_URL=\u0026#34;https://help.ubuntu.com/\u0026#34; BUG_REPORT_URL=\u0026#34;https://bugs.launchpad.net/ubuntu/\u0026#34; PRIVACY_POLICY_URL=\u0026#34;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\u0026#34; VERSION_CODENAME=bionic UBUNTU_CODENAME=bionic docker run 就是运行容器的命令\n-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。 --rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。 ubuntu:18.04：这是指用 ubuntu:18.04 镜像为基础来启动容器。 bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。 镜像查看 列出镜像 docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE redis latest 5f515359c7f8 5 days ago 183 MB nginx latest 05a60462f8ba 5 days ago 181 MB mongo 3.2 fe9198c04d62 5 days ago 342 MB \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; 00285df0df87 5 days ago 342 MB ubuntu 18.04 329ed837d508 3 days ago 63.3MB ubuntu bionic 329ed837d508 3 days ago 63.3MB 列表包含了 仓库名、标签、镜像 ID、创建时间 以及 所占用的空间。 镜像 ID 则是镜像的唯一标识，一个镜像可以对应多个标签。因此，在上面的例子中，我们可以看到 ubuntu:18.04 和 ubuntu:bionic 拥有相同的 ID，因为它们对应的是同一个镜像。\n镜像体积 docker image ls 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。\n可以通过 docker system df 命令来便捷的查看镜像、容器、数据卷所占用的空间。\ndocker system df TYPE TOTAL ACTIVE SIZE RECLAIMABLE Images 24 0 1.992GB 1.992GB (100%) Containers 1 0 62.82MB 62.82MB (100%) Local Volumes 9 0 652.2MB 652.2MB (100%) Build Cache 0B 0B 删除镜像 删除镜像使用以下命令行：\ndocker image rm [选项] \u0026lt;镜像1\u0026gt; [\u0026lt;镜像2\u0026gt; ...] 用 ID、镜像名、摘要删除镜像 ## 列出镜像 docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE centos latest 0584b3d2cf6d 3 weeks ago 196.5 MB redis alpine 501ad78535f0 3 weeks ago 21.03 MB docker latest cf693ec9b5c7 3 weeks ago 105.1 MB nginx latest e43d811ce2f4 5 weeks ago 181.5 MB ## 使用ID删除 docker image rm 501 Untagged: redis:alpine Untagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d Deleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7 Deleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b Deleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23 Deleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa Deleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3 Deleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7 ## 使用镜像名删除 docker image rm centos Untagged: centos:latest Untagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c Deleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a Deleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38 ## 使用镜像摘要删除 docker image ls --digests REPOSITORY TAG DIGEST IMAGE ID CREATED SIZE node slim sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228 6e0c4c8e3913 3 weeks ago 214 MB docker image rm node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228 Untagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228 用 docker image ls 命令来配合 像其它可以承接多个实体的命令一样，可以使用 docker image ls -q 来配合使用 docker image rm，这样可以成批的删除希望删除的镜像。 比如，我们需要删除所有仓库名为 redis 的镜像：\ndocker image rm $(docker image ls -q redis) 或者删除所有在 mongo:3.2 之前的镜像：\ndocker image rm $(docker image ls -q -f before=mongo:3.2) ","permalink":"http://localhost:1313/en/posts/tech/docker_2/","summary":"Docker 运行容器前需要本地存在对应的镜像，如果本地不存在该镜像，Docker 会从镜像仓库下载该镜像。 获取镜像 Docker Hub 上有大量的高质量的镜像可以用，这里我们就说一下怎么获取这些镜像。 docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签] Docker 镜像仓库地址：地址的格式一般是 \u0026lt;域名/IP\u0026gt;","title":"Docker | 镜像使用"},{"content":"PCA的基本思想 我们先从最简单的案例入手，先看下面的一堆绿色的圆圈，如下所示：\n我们可以把这些绿色圆圈当成一群正常的细胞,虽然这一群细胞看上去是一样的（至少表面上一样），但是，它们本质上也有可能不一样，例如像下面的这个样子：\n这群细胞分成了三群，不过从直观上来看，你太不容易能看出这一群细胞划分成了三群。\n为了能够严格地划分这些细胞，我们可以对这些细胞进行测序，确认这些细胞中有哪些基因处于活跃状态，我们就能知道这些细胞的功能，这样就知道了这些细胞的种类，当然了，如果这是一群人，我们可以测量他们的身高，血压等，如下所示：\n现在我们测了这些细胞的基因，如下所示：\n假设，我们此时没有那么多细胞，只有2个细胞，那么我们就可以把这两个细胞的所有基因画在一个坐标上，如下所示：\n就像上图显示的这样，基因1在细胞1中的高表达，而在细胞2中低表达，而基因9正好相反，在细胞1中低表达，而在细胞2中高表达，如下所示：\n从我们所列出的数据来看，细胞1和细胞2的基因表达水平很多呈相反的水平，那么我们很容易就知道，这两个细胞必定不是同一种类的细胞，如下所示：\n那么现在假设我们有3个细胞，现在利用二维坐标系分别绘制出这三个细胞两两之间的基因表达水平，如下所示：\n我们可以直接把它们放到一个三维坐标系中进行比较，如下所示：\n在这个三维坐标系中，它的三个坐标轴分别表示细胞1，细胞2，细胞3，我们通过旋转坐标轴就可以发现每两个细胞之间的关系。\n现在把问题再进一步，如果我们有4个细胞，比较直观的手段就是分别画出这4个细胞两两的平面坐标系，如下所示：\n或者是画出一个四维的坐标系，像下面的这个样子：\n但是随着细胞数目越来越多，上述的方法已经不太能够适用于计算和展示，此时我们就需要使用主成分分析（PCA）对细胞进行分类\nPCA可以将不同细胞之间的关系转换到一个平面坐标系中，如下所示：\n此时我们可以发现，通过PCA这种方法，可以把一群细胞中高度相关的细胞聚集起来，像下面的这个样子：\n为了能够更直观地说明这种分析方法，我们可以把不同的细胞换成不同的颜色，如下所示：\n此时，我们再回到最初的问题上来，通过PCA方法可以把一群细胞中高度相关的细胞给区分开来，如下所示：\nPCA的展示形式 一般我们使用散点图的形式来展示PCA的结果，在PCA图中，它的坐标轴是按重要性进行排序的。其中PC1是第一主成分轴，它的重要性要强于PC2，如下所示：\n假如一个PCA长得是下面的这个样子，如下所示：\n此时，如果左上角的绿点与左下角的红点的距离是d1，右下角的黄点与左下角红点的距离是d2，如果d1=d2的话，那么我们就可以认为，黄色点与红色点的差异要大于绿色点与红色点的差异（因为PC1的坐标是第一主成分），如下所示：\n在我们了解了PCA之后，我们应该知道，PCA仅仅是一种划分不同数据类型的方法之一，此外，还有其他基于降维的统计学方法（dimension reduction），例如热图，t-SNE图，多维缩放（multi-dimensional scaling，MDS）等，如下所示：\nPCA的计算原理 简单示例 在进行主成分分析(PCA)时，我们一般采用奇异值分解（singular value decomposition，SVD）的方法进行计算。我们先看一个简单的案例，在这个案例中，我们检测了6只不同小鼠的2个基因，如下所示：\n如果我们只检测1个基因的话（Gene 1），那么我们根据基因1表达的情况，把小鼠的绘制到数轴上，如下所示：\n其中小鼠1，小鼠2，小鼠3的Gene 1表达水平比较高，如下所示：\n而小鼠4，小鼠5，小鼠6的Gene 1水平则较低，如下所示：\n虽然这个图形比较简单，但是，我们从中还是能得到一些信息的，例如小鼠1，小鼠2和小鼠3比较接近，小鼠4，小鼠5和小鼠6比较接近，如下所示：\n如果我们检测了2个基因，那么我们可以绘制一个二维坐标系，横轴是Gene 1，纵轴是Gene 2，那么小鼠1，小鼠2和小鼠3会聚在一起，小鼠4，小鼠5和小鼠6会聚在一起，如下所示：\n如果我们检测了3个基因，那么我们可以绘制三维的坐标系，如下所示：\n再进一步，如果我们检测了4个基因，此时我们很难绘制出四维的坐标系，那么我们就需要进行PCA分析了，PCA可以把超过4个的基因降维成二维的坐标系，如下所示：\n在这个PCA的二维坐标系中，我们可以发现，小鼠4、小鼠5和小鼠6是一类，小鼠1，小鼠2和小鼠3是一类，它们的各自的基因表达模式也类似，如下所示：\nPCA在对数据进行聚类（clustering）时有很大的价值，例如，经过PCA分析，在它的二维坐标轴上我们可以发现，Gene 3在x轴上对样本的区分有贡献最大，如图所示：\nPCA计算 为了理解PCA是如何进行计算的，我们还回最初2个基因的案例上来，如下所示：\n首先，我们根据所有的样本的这两个基因的表达情况绘制出它们的平面坐标系。然后，计算Gene 1表达水平的均值，如下图x轴上红叉的所在位置如下所示：\n同样的，计算Gene 2表达水平的均值，如下图中y轴上红叉的所在位置，如下所示：\n·\n有了Gene 1和Gene 2的这两个数值，我们就得到了整体数值的中心。我们有了这个点（蓝叉所在位置）后，我们此时就不需要再看原始数据了如下所示：\n我们把所有的数据点各左下角移动，将数据的中心与原点(0,0)重合，就像下面的这个样子，从左图移成右图的样子：\n此时，虽然所有的数据点都移动了，但是每个点之间的相对距离是不变的，整体数据的中心就变成了原点(0,0)，如下所示：\n我们可以找一条通过原点的直线，然后旋转这条直线（红色虚线），使这条直线尽量匹配这些数据，最匹配数据的直线就是下面的这个样子：\nPC1 计算思路 那么我们如何得到这条最优的曲线呢？我们可以先回到直线原始的位置 为了准确地找出最佳匹配所有数据的直线，PCA会将所有数据点都役射到这条直线上来，如下所示：\n此时，可以计算这些数据点到投射到这条直线上的距离，并且使这些距离最小，如下所示：\n除了要保持数据点到直线的距离最小外，还要计算所有数据点投射到这条直线上的点（图中绿叉位置所在点）到原点的距离，使这个距离最大，如下所示：\n当直线进行旋转，这些数据点到这条直线的距离是在缩小的，同时这些数据点投射到直线上的点到原点的距离是加大的：\n为了更好地以数学思维来理解这个过程，此时我们先看一个点的情况，如下所示：\n这个点是固定的，它到原点的距离也是固定的：\n当直线（红色虚线）在旋转的过程中，这个点到原点的距离是不变的：\n当直线旋转到某一位置时，我们将这个点投射到直线上，如下所示：\n此时，我们会得到一个直角，如下所示：\n此时，我们把这个直角三角形的三条边命名为 a，b，c，那么根据勾股定理，我们就会得到这个公式，即$a^2 = b^2 + c^2$\n三角形的斜边 a 是不会变的，如下所示：\n如果直角边 b 变大的话, 那么直角边 c就会变小:\n反之，也成立。而PCA计算的则是降低直角边 b，也就是降低数据点投射到直线上的距离，如下所示：\n同时，PCA还要保证投到到直线上的点到原点的距离最大，也就是说要求c边最大，如下所示：\n通过上面利用直角三角形的解释，就比较容易理解PCA计算最佳匹配直线的思路了。此时，再回到起点，将所有的数据点投射到直线上，如下所示：\n然后计算某个点到原点为的距离，我们把它命名为 d1，如下所示：\n同理，计算第2点投射到直线上的点到原点的距离，命名为 d2，如下所示：\n依此类推，计算剩余的投射点到原点的距离\n然后把这些值的平方加起来，如下所示：\n我们旋转直线，直到最终这个 SS 的距离最大（这个距离最大，也就是说数据点到直线的距离最小）为止\n最终，得到了我们想要的直线，如下所示：\n此时，我们称这条直线为第一主成分（Principal Component 1，简称PC1）\n有了这个直线，它的斜率就很容易计算出来了，经计算，PC1的斜率为0.25\n它表示每当我们在Gene 1（x轴坐标）前进4个单位时，在这个直线上的数据点在Gene 2上就增加1个单位\n如果按照生物学意义来理解就是，这几个样本在Gene 1坐标轴上更加分散，而在Gene 2上的分散程度则较小\n我们可以根据鸡尾酒配方（cocktail recipe）来思考这个PC1，为了生成PC1，我们可以加入4份的Gene 1，再加入1份的Gene 2，另外，我们可以发现，Gene 1与Gene 2的比值是4，它就说明在描述数据的分散程度方面，Gene 1这个基因更加重要\n但在数学上，把这种鸡尾酒配方（cocktail recipe）称为是Gene 1和Gene 2的线性组合（linear combination），在统计学上，描述PC1也可以这样，即“PC1是几个变量的一个线性组合”，如下所示：\nPC1 计算 接下来我们需要计算PC1的特征值。对于PC1来说，它的斜率是0.25，那么我们在Gene 1增加4个单位，在Gene 2上就会增加1个单位\n根据勾股定理，我们就可以计算出红色箭头的长度，长度为4.12\n我们使用奇异值分解（Singular-value decomposition，SVD）进行PCA计算时，需要把这个红色箭头定义为1个单位\n为了将这个红色箭头定义为1个单位，那么我们就要把这个三角形的各个边长都除以4.12\n除以4.12后，各个三角形的连长就成了这个样子\n也就是说三角形的三个边长分别变成了1，0.242，0.97，不过构成PC1的线性组合，即Gene 1和Gene 2的比值还是不变的，仍旧为4，那么此时我们就可以说取0.97份的Gene 1和0.242份的Gene 2，就构成了PC1，如下所示：\n回想一下我们计算PC1的整个过程：\n原始数据； 最佳匹配直线； 单位向量计算 图中的红色箭头是1个长度单位，它由0.97个Gene 1和0.242个Gene 2构成，称为PC1的奇异向量（Singular vector），或者是特征向量（Eigenvector），而每个基因的比例则被称为载荷得分（Loading Scores）\n此外，在PCA中，将SS（也就是各个点投射到最佳匹配的直线上的点到原点的距离的平方和）称为PC1的特征值（Eigenvalue）\nPC1特征向量的值（Eigenvalue for PC1）的平方根被称为PC1的奇异值（Singular Value for PC1）\nPC2 计算 接下来我们计算第二主成分（PC2），由于我们使用的二维坐标，PC2仅仅是一条通过了原点，并且与PC1垂直的直线，PC2并没有像PC1那样复杂的优化\n由于PC2与PC1垂直，那么很容易地就能计算出PC2的斜率为-4，这也就是说，PC2是由-1个Gene 1和4个Gene 2构成的\n当我们在PC2所在直线上定义一个单位长度的向量时，那么PC2就是由-0.242个Gene 1和0.97个Gene 2构成了，此时这个单位向量（蓝色箭头）就被称为PC2的奇异向量（Singular Vector）或特征向量（Eigenvector）\n而-0.242和0.97就是PC2的载荷分数，它表示的就是，基因2相当于4位的基因1\nPC2的特征值则是数据点投到到PC2上的点到原点的距离平方和\n此时，PC1和PC2的计算结束，绘制最终的PCA图\n然后旋转这个坐标，让PC1水平，PC2垂直\n在这个新的坐标系中，图中黑色的叉就表示原始的样本6（Sample 6）\n而Sample 6位于这个点上\n同理，我们可以计算其他的点\n各主成分的变异 此时，再讲一些术语，先回忆一下前面的PC1的特征值和PC2的特征值\n我们把原始的数据点投射到主成分上\n计算投射到PC1上的点到原点的距离\n所有的这些数值的平方和就是PC1的特征值\n我们也可以将特征值转为PC1到原点的变异，方法就是SS除以样本数减1\n以这个案例为例说明，假如PC1的变异（Variation）为15，PC2的变异为3，这就表明主成分的总变异为18，那么也就是说PC1在总变异中所占的比值为83%（15/18=0.83）\n而PC2占的总变异为17%（3/18=0.17）\n此时，我们把这两个主成分所占的比例画出来，这种图与条形图很像，不过在PCA中，这叫碎石图（scree plot），每个矩形表示每个PC所占总变异的比值\n复杂案例 我们看一个比较复杂的案例，在这个案例中，6只小鼠，检测了3个基因\n按照前面的思路，找到数据的中心，并将其移到原点\n找到最佳的匹配数据的直线，也就是PC1\n不过这个PC1有3个成分，分别是0.62个Gene 1，0.15个Gene 2和0.77个Gene 3\n其中，Gene3 是最主要的组成部分\n然后寻找PC2，PC2通过原点，并与PC1垂直，\n最终，PC2的成分为0.77个Gene 1，0.62个Gene 2和0.15个Gene 3\n在PC2中，Gene 1是最主要的组成部分\n最后，我们寻找PC3，PC3通过原点，同时与PC1和PC2垂直\n如果我们有更多的基因，那么我们就会不断地寻找更多的主成分，也就是说不断地往这个坐标中加入与前一个主成分垂直的直线，从理论上讲，一个基因就有一个主成分（例如这个案例中，3个基因，最终找到了3个主成分），因此，主成分的数目要么跟变量相等，要么跟样本的数目相等\n一旦计算出来了所有的主成分，那么我们就可以使用特征值来计算每个主成分的变异占总变异的比例\n在这个案例中，PC1的变异占总变异的79%，PC2占15%，PC3占6%，把这些主成分绘制成碎石图，就是下图左图的样子\n从碎石图中我们可以看到，PC1和PC2占了变异的绝大比例\n这就表明了，在二维图中，我们基本上只使用PC1和PC2就能解释三维图中的数据，因为二维图中的PC1和PC2占据了整体的变异的94%\n我们将三维图转换为二维图，画出PC1和PC2，以及原始数据点\n将数据投射到这个新坐标的PC1上\n再投射到PC2上\n然后，我们把这个坐标旋转一下，方便查看\n下面的这个点就是Sample 4对应的点\n我们再来回顾一下这个案例，首先我们把所有的数据点绘制到三维坐标中\n再计算主成分\n再计算主成分的特征值与变异比例\n最后，我们使用PC1和PC2这个二维坐标来描述原始数据\n如果我们检测了6个样本的4个基因，那么我们并不需要绘制出4维坐标图\n我们可以计算出它们的主成分，画出碎石图，其中我们可以发现，PC1和PC2占据了变异的90%，那么我们仅使用PC1和PC2构成的二维PCA图就可以表示原始数据\n将原始数据分别投射到PC1和PC2上\n下面的这两个点就对应了Sample 2\n那么绘制出所有的点，如下：\n如果我们遇到下面的这种碎石图，在这种碎石图中，PC3和PC4也占据了相当比例的总变异，那么我们仅使用2个主成分（也就是PC1和PC2）就无法精确地代表原始数据\n不过，即使是有瑕玼的PCA二维图，也可以用于数据的分类\n在这个图中，黑色的点仍然可以被视为比较接近的类似\nR语言计算PCA 计算PCA的工具很多，这里我们介绍一下用R来计算PCA，在R中，计算PCA的函数是 prcomp()，绘图包是 ggplot2，使用R，我们可以知道每个主成分的变异占总变异的比值，以及计算载荷得分（loading scores），发现哪个变量对图形的影响最大\n数据集 data.matrix \u0026lt;- matrix(nrow=100, ncol=10) colnames(data.matrix) \u0026lt;- c( paste(\u0026#34;wt\u0026#34;,1:5,sep=\u0026#34;\u0026#34;), paste(\u0026#34;ko\u0026#34;,1:5,sep=\u0026#34;\u0026#34;)) rownames(data.matrix) \u0026lt;- paste(\u0026#34;gene\u0026#34;, 1:100, sep=\u0026#34;\u0026#34;) for (i in 1:100){ wt.values \u0026lt;- rpois(5, lambda = sample(x=10:1000, size=1)) ko.values \u0026lt;- rpois(5, lambda = sample(x=10:1000, size=1)) data.matrix[i,] \u0026lt;- c(wt.values, ko.values) } head(data.matrix) 查看生成的实例数据\n\u0026gt; head(data.matrix) wt1 wt2 wt3 wt4 wt5 ko1 ko2 ko3 ko4 ko5 gene1 423 423 419 423 372 582 589 563 534 566 gene2 905 971 967 1031 910 95 96 96 89 96 gene3 139 177 147 176 152 408 422 419 426 456 gene4 702 712 717 691 678 534 546 594 562 515 gene5 582 572 616 569 631 315 321 314 345 330 gene6 765 853 781 792 768 316 339 317 317 294 计算PCA 使用 prcomp函数来对数据集进行PCA运算，如下所示：\npca \u0026lt;- prcomp(t(data.matrix),scale=TRUE) 代码解释：由于 prcomp函数在默认情况下，会把行识别为样本，列识别为基因，而我们生成的数据集 data.matrix正好相反，因此用到了 t函数，它表示把原来的数据集转置一下，将其行与列交换。\nprcomp计算的结果含有主成分分析的各种信息，通过 str()函数我们可以看一下有哪些东西，如下所示：\n\u0026gt; str(pca) List of 5 $ sdev : num [1:10] 9.34 1.85 1.6 1.45 1.24 ... $ rotation: num [1:100, 1:10] 0.104 -0.107 0.106 -0.103 -0.106 ... ..- attr(*, \u0026#34;dimnames\u0026#34;)=List of 2 .. ..$ : chr [1:100] \u0026#34;gene1\u0026#34; \u0026#34;gene2\u0026#34; \u0026#34;gene3\u0026#34; \u0026#34;gene4\u0026#34; ... .. ..$ : chr [1:10] \u0026#34;PC1\u0026#34; \u0026#34;PC2\u0026#34; \u0026#34;PC3\u0026#34; \u0026#34;PC4\u0026#34; ... $ center : Named num [1:100] 489 526 292 625 460 ... ..- attr(*, \u0026#34;names\u0026#34;)= chr [1:100] \u0026#34;gene1\u0026#34; \u0026#34;gene2\u0026#34; \u0026#34;gene3\u0026#34; \u0026#34;gene4\u0026#34; ... $ scale : Named num [1:100] 84.2 455.8 142.2 82.1 143.2 ... ..- attr(*, \u0026#34;names\u0026#34;)= chr [1:100] \u0026#34;gene1\u0026#34; \u0026#34;gene2\u0026#34; \u0026#34;gene3\u0026#34; \u0026#34;gene4\u0026#34; ... $ x : num [1:10, 1:10] -8.92 -9.15 -8.71 -8.75 -8.77 ... ..- attr(*, \u0026#34;dimnames\u0026#34;)=List of 2 .. ..$ : chr [1:10] \u0026#34;wt1\u0026#34; \u0026#34;wt2\u0026#34; \u0026#34;wt3\u0026#34; \u0026#34;wt4\u0026#34; ... .. ..$ : chr [1:10] \u0026#34;PC1\u0026#34; \u0026#34;PC2\u0026#34; \u0026#34;PC3\u0026#34; \u0026#34;PC4\u0026#34; ... - attr(*, \u0026#34;class\u0026#34;)= chr \u0026#34;prcomp\u0026#34; 从这个结果中我们可以发现，有 sdev，rotation，center，scale，x。其中 x含有主成分的信息\n我们可以发现，x中有10个主成分（这是因为有10个样本），第1主成分占据了原始数据总变异的大部分，第2主成分占据了总变异的次大部分等。为了绘制二维图，我们通常使用PC1和PC2（个别情况下也会使用PC2和PC3），如下所示：\n我们此时，使用 x的前2列（即PC1和PC2）绘制一个二维图，如下所示：\nplot(pca) 其中，pca$x[,1]是PC1，pca$x[,2]是PC2\n10个样本，分别位于图形的左右两侧，此时我们再看一下PC1占的总变异的比例，如下所示：\npca.var \u0026lt;- pca$sdev^2 pca.var.per \u0026lt;- round(pca.var/sum(pca.var)*100,1) 结果如下:\n\u0026gt; pca.var [1] 8.727308e+01 3.432450e+00 2.546956e+00 2.094293e+00 1.534746e+00 1.230408e+00 [7] 8.259253e-01 6.435822e-01 4.185583e-01 1.134741e-29 \u0026gt; pca.var.per [1] 87.3 3.4 2.5 2.1 1.5 1.2 0.8 0.6 0.4 0.0 绘制出各个主成分对应的碎石图\nbarplot(pca.var.per, main=\u0026#34;Scree Plot\u0026#34;, xlab=\u0026#34;Principal Component\u0026#34;, ylab=\u0026#34;Percent Variation\u0026#34;) 上图中最长的那个就是PC1所占的总变异的比例，也就是说PC1就能在很大程度上解释两组数据的区分，我们在PC1和PC2的二维图上也能看出来，这两组数据之间主要是由PC1分开的\nggplot2绘图 ggplot2也能绘制类似的图形\npca.data \u0026lt;- data.frame(Sample=rownames(pca$x), X=pca$x[,1], Y=pca$x[,2]) # one column with the sample ids # Tow columns for the X and Y coordinates for each sample pca.data ggplot(data=pca.data, aes(x=X, y=Y, label=Sample))+ geom_text() + xlab(paste(\u0026#34;PC1 - \u0026#34;, pca.var.per[1], \u0026#34;%\u0026#34;, sep=\u0026#34;\u0026#34;))+ ylab(paste(\u0026#34;PC2 - \u0026#34;, pca.var.per[2], \u0026#34;%\u0026#34;, sep=\u0026#34;\u0026#34;))+ theme_bw()+ ggtitle(\u0026#34;My PCA Graph\u0026#34;) 从这个图形中，我们可以发现，X轴上标记了PC1所占总变异的比例为87.3%。Y轴上标记了PC2所占总变异的比例为3.4%。\nloading scores计算 prcomp()函数计算的结果中含有loading score，即 rotation这一部分的内容\n由于PC1占所了总变异的大部分，因此我们只需要看PC1中的loading score\n由于loading_score有负数，因此我们需要用 abs()函数取它们的绝对值\n取完绝对值，对所有的loading score进行排序，从高到低；这样我们就能筛选出排名前十的基因了\nloading_score \u0026lt;- pca$rotation[,1] gene_scores \u0026lt;- abs(loading_score) gene_score_ranked \u0026lt;- sort(gene_scores, decreasing = TRUE) top_10_genes \u0026lt;- names(gene_score_ranked[1:10]) top_10_genes [1] \u0026#34;gene10\u0026#34; \u0026#34;gene98\u0026#34; \u0026#34;gene34\u0026#34; \u0026#34;gene94\u0026#34; \u0026#34;gene95\u0026#34; \u0026#34;gene99\u0026#34; \u0026#34;gene76\u0026#34; \u0026#34;gene47\u0026#34; \u0026#34;gene49\u0026#34; [10] \u0026#34;gene72\u0026#34; \u0026gt; pca$rotation[top_10_genes,1] gene10 gene98 gene34 gene94 gene95 gene99 gene76 gene47 0.1069736 0.1069637 0.1069535 0.1069478 -0.1069281 0.1069267 0.1069243 -0.1069209 gene49 gene72 0.1069161 0.1069037 python计算PCA 利用Python也可以进行PCA分析，在这一部分中，我们会介绍如何这些内容：\n利用Python生成一些我们要分析的数据； 利用 sklearn模块中的 PCA()来进行分析，其中 sklearn是 scikit-learn的简称，它是一个机器学习的模块，支持包括分类、回归、降维和聚类四大机器学习算法。还包含了特征提取、数据处理和模型评估三大模块； 计算每个主成分占总变异的比例； 利用 matplotlib来绘制PCA图； 计算变量的loading scores。 如下所示： 导入python模块 import pandas as pd # import pandas package, # pandas is short for \u0026#34;panel data\u0026#34; import numpy as np # numpy package will generate random numbers import random as rd # random package will generate an example dataset from sklearn.decomposition import PCA from sklearn import preprocessing # usr a function PCA() from sklearn.decomposition # PCA() use to perform PCA # preprocessing uses to scaling the data before perform PCA import matplotlib.pyplot as plt # draw PCA graphd 生成模拟数据 genes = [\u0026#39;gene\u0026#39; + str(i) for i in range(1, 101)] wt = [\u0026#39;wt\u0026#39; + str(i) for i in range(1,6)] ko = [\u0026#39;ko\u0026#39; + str(i) for i in range(1,6)] data = pd.DataFrame(columns=[*wt, *ko], index=genes) for gene in data.index: data.loc[gene, \u0026#39;wt1\u0026#39;:\u0026#39;wt5\u0026#39;] = np.random.poisson(lam=rd.randrange(10,1000),size=5) data.loc[gene, \u0026#39;ko1\u0026#39;:\u0026#39;ko5\u0026#39;] = np.random.poisson(lam=rd.randrange(10,1000),size=5) print(data.head()) print(data.shape) # generate simulation dataset PCA分析 在进行PCA分析之前，先对数据进行中心化（我的理解是Z转换，转换后的数据均值是0，标准差是1）\nscaled_data = preprocessing.scale(data.T) 需要注意的是，上述代码中使用了 data.T，这是对表达的数据集进行转换，将其行与列交换，跟R中类似。此处我们使用的 sklearn包中的 preprocessing函数，我们还可以使用另外的函数进行转换，就是 StandardScaler().fit_transform(data.T)。第二个函数在机器学习使用更加广泛\n需要注意的是，sklearn中利用 preprocessing.scale计算变异与R中利用 scale()和 prcomp()计算变异的公式略有不同，区别就在于前者的分子是测量值的数目，后者是这个数目减1\n后者的分子是测量值的数目减1，这会导致最终的结果变大，这是一种无偏估计\n不过这两种方法都不影响PCA的分析\n它的局限就在于，它们会对最终的绘图造成一定的影响，因为最终绘图中的坐标来源于scaled后的数值乘以loading scores\n继续Python计算PCA，此时我们要创建一个 PCA对象, 这里要提一下，PCA不仅是一个函数，能够返回计算结果，在 sklearn中，它还用于创建一个对象，使用一个数据集进行训练，进行对另外一个数据集进行计算。不过在这里，我们只用 PCA计算这个数据集（我们不涉及机器学习的环境设置），其他的步骤非常繁琐，但也由此，我们也能了解一下机器学习的内容\n计算PCA的所有结果，例如loading scores和每个主成分的变量占总变异的比例\n\u0026gt;\u0026gt;\u0026gt; pca = PCA() \u0026gt;\u0026gt;\u0026gt; pca.fit(scaled_data) PCA(copy=True, iterated_power=\u0026#39;auto\u0026#39;, n_components=None, random_state=None, svd_solver=\u0026#39;auto\u0026#39;, tol=0.0, whiten=False) 接着，基于loading scores和scaled data来生成PCA图形中的坐标系\n绘制图像 绘制碎石图\nper_var = np.round(pca.explained_variance_ratio_*100,decimals=1) # 计算每个主成分所占总变量的比例 labels = [\u0026#39;PC\u0026#39; + str(x) for x in range(1, len(per_var)+1)] # 使用matplotlib来绘制相应的图形 plt.bar(x=range(1,len(per_var)+1), height=per_var, tick_label=labels) plt.ylabel(\u0026#39;Percentage of Explained Variance\u0026#39;) plt.xlabel(\u0026#39;Principal Component\u0026#39;) plt.title(\u0026#39;Scree Plot\u0026#39;) plt.show() 绘制PCA图\npca_df = pd.DataFrame(pca_data, index=[*wt, *ko], columns=labels) plt.scatter(pca_df.PC1,pca_df.PC2) plt.title(\u0026#39;My PCA Graph\u0026#39;) plt.xlabel(\u0026#39;PC1 - {0}%\u0026#39;.format(per_var[0])) plt.ylabel(\u0026#39;PC2 - {0}%\u0026#39;.format(per_var[1])) for sample in pca_df.index: plt.annotate(sample, (pca_df.PC1.loc[sample],pca_df.PC2.loc[sample])) plt.show() 从这张图中我们可以看到，wt组的数据集中在右侧，ko组都集中在了左侧\n计算loading score 我们还可以计算一下PC1的loading scores，从而找出哪些基因在不同的分类方面发挥了主要作用\n我们要创建一个 pandas的 series对象，这个对象用于计算loading scores\nloading_scores = pd.Series(pca.components_[0], index=genes) # in python, first number in index is 0, not 1 sorted_loading_scores = loading_scores.abs().sort_values(ascending=False) # achieve absolute value using abs() function and sort them top_10_genes = sorted_loading_scores[0:10].index.values print(loading_scores[top_10_genes]) gene31 -0.107133 gene32 0.107131 gene34 0.107070 gene10 -0.107065 gene45 0.107065 gene28 -0.107064 gene30 -0.107062 gene39 0.107053 gene93 -0.107041 gene79 0.107036 dtype: float64s ","permalink":"http://localhost:1313/en/posts/tech/pca/","summary":"PCA的基本思想 我们先从最简单的案例入手，先看下面的一堆绿色的圆圈，如下所示： 我们可以把这些绿色圆圈当成一群正常的细胞,虽然这一群细胞看上去是一样的（至少表面上一样），但是，它们本质上也有可能不一样，例如像下面的这个样子： 这群细胞分成了三群，不过从直观上来看，你太不容易能看出这一","title":"PCA分析原理"},{"content":"Mathjax简介 Mathjax是一款运行在浏览器中的开源数学符号渲染引擎，使用MathJax可以方便的在浏览器中显示数学公式，不需要使用图片。\n基本语法 在正文中同一行内插入LaTex公式用 $...$来定义\n例如公式 $\\sum_{i=0}^N\\int_{a}^{b}g(t,i)\\text{d}t$可以显示为$\\sum_{i=0}^N\\int_{a}^{b}g(t,i)\\text{d}t$ 另起一行显示LaTex公式则需要使用 $$...$$来表示\n例如公式 $$W_G^{mn}=max\\{0,W_G.\\xi_G(f_G^m,f_G^n)\\}$$可以显示为 $$ W_G^{mn}=max{0,W_G.\\xi_G(f_G^m,f_G^n)} $$ 常用字符表示 希腊字母 显示 命令 显示 命令 $\\alpha$ \\alpha $\\beta$ \\beta $\\gamma$ \\gamma $\\delta$ \\delta $\\epsilon$ \\epsilon $\\zeta$ \\zeta $\\eta$ \\eta $\\theta$ \\theta $\\iota$ \\iota $\\kappa$ \\kappa $\\lambda$ \\lambda $\\mu$ \\mu $\\nu$ \\nu $\\xi$ \\xi $\\pi$ \\pi $\\rho$ \\rho $\\sigma$ \\sigma $\\tau$ \\tau $\\upsilon$ \\upsilon $\\phi$ \\phi $\\chi$ \\chi $\\psi$ \\psi $\\omega$ \\omega 如果需要大写希腊字母，只需将命令首字母大写即可。如 $\\Gamma$表示$\\Gamma$ 如果需要斜体则添加上 var即可。如 $\\varGamma$表示$\\varGamma$ 关系运算符 显示 命令 显示 命令 $\\mid$ \\mid $\\nmid$ \\nmid $\\cdot$ \\cdot $\\leq$ \\leq $\\geq$ \\geq $\\neq$ \\neq $\\approx$ \\approx $\\equiv$ \\equiv $\\prec$ \\prec ⪯⪯ \\preceq 算术运算符 显示 命令 显示 命令 $\\pm$ \\pm $\\mp$ \\mp $\\times$ \\times $\\ast$ \\ast $\\star$ \\star $\\circ$ \\circ $\\bullet$ \\bullet $\\cdot$ \\cdot $\\div$ \\div $\\sum$ \\sum $\\prod$ \\prod $\\coprod$ \\coprod 上下标 上标用 ^ 下标用 _ 矢量 \\vec{a}显示为$\\vec{a}$ \\overrightarrow{xy}显示为$\\overrightarrow{xy}$ 字体 打印机字体Typewriter：\\mathtt{A}显示为$\\mathtt{A}$ 黑板粗体字Blackboard Bold：\\mathbb{A}呈现为$\\mathbb{A}$ 无衬线字体Sans Serif：\\mathsf{A}呈现为$\\mathsf{A}$ 手写体:\\mathscr{A}呈现为$\\mathscr{A}$ 罗马字体:\\mathrm{A}呈现为$\\mathrm{A}$ 括号 小括号：() 中括号：[] 尖括号：\\langle \\rangle分别显示为$\\langle$和$\\rangle$ 自适应括号：\\left(...\\right)可以自动适配周围公式环境 可以比较以下公式:\n(\\frac{x}{y}):$(\\frac{x}{y})$ \\left(\\frac{x}{y}\\right):$\\left(\\frac{x}{y}\\right)$ 求和\\极限\\积分 求和:\\sum 如:\\sum_{i=1}^n{a_i}显示为$\\sum_{i=1}^n{a_i}$ 极限:\\lim 如:\\lim_{x \\to 0}显示为$\\lim_{x \\to 0}$ 积分:\\lint 如: \\int_0^xf(x)dx显示为$\\int_0^xf(x)dx$ 分式和根式 分式: \\frac 根式: \\sqrt 特殊函数 \\sin $\\sin$ \\cos $\\cos$ \\ln $\\ln$ \\max $\\max$ 空格 LaTex语法空格需要转义\na\\ b表示$a\\ b$ a\\quad b表示$a\\quad b$ 矩阵 矩阵起始用 \\begin{matrix}, 结束用 \\end{matrix} 每一行末尾用 \\\\\\\\标记, 每个元素用 $分割 例子:\n$$ \\begin{matrix} 1\u0026amp;0\u0026amp;0\\\\ 0\u0026amp;1\u0026amp;0\\\\ 0\u0026amp;0\u0026amp;1\\\\ \\end{matrix} $$ $$ \\begin{matrix} 1\u0026amp;0\u0026amp;0\\\\ 0\u0026amp;1\u0026amp;0\\\\ 0\u0026amp;0\u0026amp;1\\\\ \\end{matrix} $$\n矩阵边框 与普通矩阵的写法类似,不过在起始和末尾处使用不同的标记进行替换\npmatrix:小括号包括的矩阵\nbmatrix:中括号包括的矩阵\nBmatrix:大括号包括的矩阵\nvmatrix:单竖线包括的矩阵\nVmatrix:双竖线包括的矩阵\n省略符号:\n\\cdots:横省略号 \\vdots:竖省略号 \\ddots:斜省略号 例子:\n$$ \\begin{bmatrix} {a_{11}}\u0026amp;{a_{12}}\u0026amp;{\\cdots}\u0026amp;{a_{1n}}\\\\ {a_{21}}\u0026amp;{a_{22}}\u0026amp;{\\cdots}\u0026amp;{a_{2n}}\\\\ {\\vdots}\u0026amp;{\\vdots}\u0026amp;{\\ddots}\u0026amp;{\\vdots}\\\\ {a_{m1}}\u0026amp;{a_{m2}}\u0026amp;{\\cdots}\u0026amp;{a_{mn}}\\\\ \\end{bmatrix} $$ $$ \\begin{bmatrix} {a_{11}}\u0026amp;{a_{12}}\u0026amp;{\\cdots}\u0026amp;{a_{1n}}\\ {a_{21}}\u0026amp;{a_{22}}\u0026amp;{\\cdots}\u0026amp;{a_{2n}}\\ {\\vdots}\u0026amp;{\\vdots}\u0026amp;{\\ddots}\u0026amp;{\\vdots}\\ {a_{m1}}\u0026amp;{a_{m2}}\u0026amp;{\\cdots}\u0026amp;{a_{mn}}\\ \\end{bmatrix} $$\n方程组 以 cases进行声明 例子:\n$$ \\begin{cases} a_1x+b_1y+c_1z=d_1\\\\ a_2x+b_2y+c_2z=d_2\\\\ a_3x+b_3y+c_3z=d_3\\\\ \\end{cases} $$ $$ \\begin{cases} a_1x+b_1y+c_1z=d_1\\ a_2x+b_2y+c_2z=d_2\\ a_3x+b_3y+c_3z=d_3\\ \\end{cases} $$\n公式编号 用 \\tag标记 例子:\nf(x)=x\\tag{1} $$ f(x)=x\\tag{1} $$\n","permalink":"http://localhost:1313/en/posts/read/latex/","summary":"Mathjax简介 Mathjax是一款运行在浏览器中的开源数学符号渲染引擎，使用MathJax可以方便的在浏览器中显示数学公式，不需要使用图片。 基本语法 在正文中同一行内插入LaTex公式用 $...$来定义 例如公式 $\\sum_{i=0}^N\\int_{a}^{b}g(t,i)\\te","title":"Latex 公式语法参考"},{"content":"归一化 归一化（normalization）特指将数据进行缩放到一个固定的区间内。通常来讲，这个区间是[0，1]，但是在实际的情况中，这个区间可以是[-1,1]。总之符合使用的需求。\n通过归⼀化，我们可以消除不同量纲下的数据对最终结果的影响。例如，我们通过身高（单位：⽶）和体重（单位：公 ⽄）来衡量两个⼈之间的差异，两个⼈的的体重相差 20 公⽄，⾝⾼相差 0.1 ⽶，因此在这样的量纲下衡量这两个⼈的差 异时，体重的差异会把⾝⾼的差异遮盖掉，但这往往不是我们想要的结果。但通例如我们假设体重的最小值和最⼤值分 别为 0 和 200 公⽄，⾝⾼的最小值和最⼤值分别为 0 和 2 ⽶，因此归⼀化后体重和⾝⾼的差距变为 0.1 和 0.05，因此通过归⼀下则可以避免这样的问题的出现。\n归一化目的 把数据缩放到特定区间内\n主要是为了数据处理方便提出来的，把数据映射到0～1范围之内处理，更加便捷快速，应该归到数字信号处理范畴之内。\n数据无量纲化\n归一化是一种简化计算的方式，即将有量纲的表达式，经过变换，化为无量纲的表达式，成为纯量，降低了数据的复杂度。\n归一化计算 针对一般的情况，归一化的结果可以表示为： $$ x\u0026rsquo;=\\frac{x-x_{min}}{x_{max}-x_{min}} $$ 其中$x_{min}$表示$x$的最小值，$x_{max}$表示$x$中的最大值\n这种归一化方法一般叫做min-max归一化，归一化之后数据的区间为[0,1]\n另外，使用均值进行归一化操作的方式叫做均值归一化，归一化之后数据的区间为[-1,1]\n公式表示为： $$ x\u0026rsquo;=\\frac{x-x_{mean}}{x_{max}-x_{min}} $$\n归一化的应用 归一化应用于在对数据范围有严格要求的情况下。在不涉及距离度量和数据整体协方差分布的情况下可以使用归一化。如果数据有异常值，一定不要用归一化。\n标准化 标准化(Standardization)特指将数据进行变化，使其符合均值为0，标准差为1的分布。注意：这里的分布并非一定是正态分布\n标准化会改变数据的均值、标准差，也就是说改变了原来的分布，但是分布的类型依然是不变的，原来是什么类型，标准化之后依然是什么类型。标准化后的分布并不一定就是标准正态，完全取决于原始数据的分布类型\n标准化目的 消除量纲影响，利于不同级别数据的比较，得到合理的结果\n加速建模的建立与求解，提高运算速度\n标准化的计算 最常见的标准化方法是标准差标准化： $$ x\u0026rsquo;=\\frac{x-{\\mu}}{\\sigma} $$ 标准化过后的数据符合取值范围无固定区间\n标准化的应用 数据的标准化广泛的运用于数据建模和机器学习当中。在分类、聚类算法中，需要使用距离来度量相似性的时候、或者使用PCA技术进行降维的时候，标准化表现更好\n归一化和标准化的差异与关联 差异 结果差异 Normalization会严格的限定变换后数据的范围，如[0,1],[-1,1]。Standardization变换后无严格的区间限制，只要求其均值为0，标准差为1。 Normalization对数据的缩放比例仅仅和极值有关，Standardization受到极值影响比较大。 关联 Normalization和Standardization在本质上都是对数据的线性变换，两者都不会改变原始的数据排布顺序\n标准化和归一化的原因及用途 统计建模中，如回归模型，自变量X XX的量纲不一致导致了回归系数无法直接解读或者错误解读；需要将X XX都处理到统一量纲下，这样才有可比性； 机器学习和统计学中有很多地方要用到“距离”的计算，比如PCA，KNN，kmeans等等，不同维度量纲不同可能会导致距离的计算依赖于量纲较大的那些特征而得到不合理的结果； 参数估计时使用梯度下降，在使用梯度下降的方法求解最优化问题时， 归一化/标准化后可以加快梯度下降的求解速度，即提升模型的收敛速度。 标准化和归一化的使用场景 如果你对处理后的数据范围有严格要求，需要使用归一化； 如果数据不稳定，存在过大或过小的值（也可以说是异常值），不能使用归一化操作； 标准化是机器学习中最常用的方式，如果无法判断可以直接使用标准化； 对于分类、聚类算法，需要使用距离来度量相似性的时候、或者使用PCA技术进行降维的时候，标准化表现更好； 在不涉及距离度量、协方差计算的时候，可以使用归一化方法。 不需要使用标准化和归一化的场景 数据不同特征之间存在较大的差异，数据量纲不一致时需要预处理，反之则不需要； 当要使用的模型不涉及到距离和标准差异的衡量时，可以不使用标准化和归一化操作； 使用概率模型时可以不进行操作，因为它不关注数据本身，关注的是出现概率。 Reference 标准化和归一化，请勿混为一谈，透彻理解数据变换 标准化和归一化什么区别？\u0026ndash;知乎 R 语言数据科学导论 机器学习中常见的几种归一化方法以及原因 Normalization vs Standardization — Quantitative analysis Feature Scaling for Machine Learning: Understanding the Difference Between Normalization vs. Standardization ","permalink":"http://localhost:1313/en/posts/tech/data_preprocess/","summary":"归一化 归一化（normalization）特指将数据进行缩放到一个固定的区间内。通常来讲，这个区间是[0，1]，但是在实际的情况中，这个区间可以是[-1,1]。总之符合使用的需求。 通过归⼀化，我们可以消除不同量纲下的数据对最终结果的影响。例如，我们通过身高（单位：⽶）和体重（单位","title":"归一化与标准化"},{"content":"使用Sys.time 可以根据程序运行起始和终止的时间差计算运行时间\nsleep_for_a_minute \u0026lt;- function() { Sys.sleep(10) } start_time \u0026lt;- Sys.time() sleep_for_a_minute() end_time \u0026lt;- Sys.time() end_time - start_time ## Time difference of 10.15231 secs 使用tictoc tictoc包中的tic和toc函数和Sys.time函数的使用方法是类似的。但是tictoc提供了更加方便的使用形式，便于操作。\n可以对单个代码块的运行时间进行测试 library(tictoc) tic(\u0026#34;sleeping\u0026#34;) print(\u0026#34;falling asleep...\u0026#34;) sleep_for_a_minute() print(\u0026#34;...waking up\u0026#34;) toc() ## [1] \u0026#34;falling asleep...\u0026#34; ## [1] \u0026#34;...waking up\u0026#34; ## sleeping: 10.19 sec elapsed 也可以同时对多段代码进行测试 tic(\u0026#34;total\u0026#34;) tic(\u0026#34;data generation\u0026#34;) X \u0026lt;- matrix(rnorm(50000*1000), 50000, 1000) b \u0026lt;- sample(1:1000, 1000) y \u0026lt;- runif(1) + X %*% b + rnorm(50000) toc() tic(\u0026#34;model fitting\u0026#34;) model \u0026lt;- lm(y ~ X) toc() toc() ## data generation: 3.83 sec elapsed ## model fitting: 46.69 sec elapsed ## total: 50.52 sec elapsed 使用system.time 使用system.time函数直接包裹运行代码测试运行时间，简单快捷\nsystem.time({ sleep_for_a_minute() }) ## user system elapsed ## 0.00 0.00 10.14 其中的elapsed表示运行代码真正花费的时间\n使用rbenchmark rbenchmark是基于system.time的封装，提供了高效的用法进行专业的代码测试与比较\nlibrary(rbenchmark) benchmark(\u0026#34;lm\u0026#34; = { X \u0026lt;- matrix(rnorm(1000), 100, 10) y \u0026lt;- X %*% sample(1:10, 10) + rnorm(100) b \u0026lt;- lm(y ~ X + 0)$coef }, \u0026#34;pseudoinverse\u0026#34; = { X \u0026lt;- matrix(rnorm(1000), 100, 10) y \u0026lt;- X %*% sample(1:10, 10) + rnorm(100) b \u0026lt;- solve(t(X) %*% X) %*% t(X) %*% y }, \u0026#34;linear system\u0026#34; = { X \u0026lt;- matrix(rnorm(1000), 100, 10) y \u0026lt;- X %*% sample(1:10, 10) + rnorm(100) b \u0026lt;- solve(t(X) %*% X, t(X) %*% y) }, replications = 1000, columns = c(\u0026#34;test\u0026#34;, \u0026#34;replications\u0026#34;, \u0026#34;elapsed\u0026#34;, \u0026#34;relative\u0026#34;, \u0026#34;user.self\u0026#34;, \u0026#34;sys.self\u0026#34;)) ## test replications elapsed relative user.self sys.self ## 3 linear system 1000 0.14 1.000 0.14 0 ## 1 lm 1000 1.17 8.357 1.18 0 ## 2 pseudoinverse 1000 0.19 1.357 0.19 0 结果中的elapsed、user.self、sys.self与system.time函数结果中表示的意义相同，relative表示函数运行的时间利用率\n使用microbenchmark microbenchmark和rbenchmark一样，可以用来比较多个代码之间的运行速率，而microbenchmark提供了更加人性化的绘图功能可以直观的比较运行时间的差异。\nlibrary(microbenchmark) set.seed(2017) n \u0026lt;- 10000 p \u0026lt;- 100 X \u0026lt;- matrix(rnorm(n*p), n, p) y \u0026lt;- X %*% rnorm(p) + rnorm(100) check_for_equal_coefs \u0026lt;- function(values) { tol \u0026lt;- 1e-12 max_error \u0026lt;- max(c(abs(values[[1]] - values[[2]]), abs(values[[2]] - values[[3]]), abs(values[[1]] - values[[3]]))) max_error \u0026lt; tol } mbm \u0026lt;- microbenchmark(\u0026#34;lm\u0026#34; = { b \u0026lt;- lm(y ~ X + 0)$coef }, \u0026#34;pseudoinverse\u0026#34; = { b \u0026lt;- solve(t(X) %*% X) %*% t(X) %*% y }, \u0026#34;linear system\u0026#34; = { b \u0026lt;- solve(t(X) %*% X, t(X) %*% y) }, check = check_for_equal_coefs) mbm ## Unit: milliseconds ## expr min lq mean median uq max neval cld ## lm 101.7592 114.4618 127.4006 122.7064 129.7980 430.7439 100 b ## pseudoinverse 173.2464 189.6997 201.1508 195.0444 207.6843 269.1587 100 c ## linear system 97.0324 106.8963 113.9581 112.2040 117.1509 193.9128 100 a library(ggplot2) autoplot(mbm) ","permalink":"http://localhost:1313/en/posts/tech/time_r/","summary":"使用Sys.time 可以根据程序运行起始和终止的时间差计算运行时间 sleep_for_a_minute \u0026lt;- function() { Sys.sleep(10) } start_time \u0026lt;- Sys.time() sleep_for_a_minute() end_time \u0026lt;- Sys.time() end_time - start_time ## Time difference of 10.15231 secs 使用tictoc tictoc包中的tic和toc函数和Sys.time函数的使用方法是类似的。但是tictoc提供了更加方便的使用形式，便于操作。 可以对单个代码块的运行时","title":"计算R代码运行的时间"},{"content":"背景 使用SCENT包进行分析时出现如下错误：\nOpenBLAS blas_thread_init: pthread_create: Resource temporarily unavailable OpenBLAS blas_thread_init: RLIMIT_NPROC 1024 current, 2583728 max OpenBLAS blas_thread_init: pthread_create: Resource temporarily unavailable OpenBLAS blas_thread_init: RLIMIT_NPROC 1024 current, 2583728 max 解决过程 BLAS\nBLAS（Basic Linear Algebra Subprograms，基础线性代数程序集）是一个应用程序接口，里面拥有大量已经编写好的关于线性代数运算的程序。OpenBLAS是一个开源的BLAS，可以用于相关的运算。\n相关问题\n搜索到别人在运用其他程序时出现类似的问题：\nhttps://github.com/davidemms/OrthoFinder/issues/68 https://www.jianshu.com/p/981f67e5fb82 解决方法 在运行程序或者进入R环境之前设置环境变量：\nexport OPENBLAS_NUM_THREADS=1 原理：在其他程序调用BLAS进行线性运算时，可能创建了过多的BLAS线程，造成环境过负荷，超过系统限制，在此设置调用线程为1即可。\n","permalink":"http://localhost:1313/en/posts/tech/scent/","summary":"背景 使用SCENT包进行分析时出现如下错误： OpenBLAS blas_thread_init: pthread_create: Resource temporarily unavailable OpenBLAS blas_thread_init: RLIMIT_NPROC 1024 current, 2583728 max OpenBLAS blas_thread_init: pthread_create: Resource temporarily unavailable OpenBLAS blas_thread_init: RLIMIT_NPROC 1024 current, 2583728 max 解决过程 BLAS BLAS（Basic Linear Algebra Subprograms，基础线性代数程序集）是一个应用程序接口，里面拥有大量已经编写好的关于线性代数运算的程序。OpenBLAS是一个开源的BLAS，","title":"SCENT包Debug"},{"content":"背景 平时在命令行下ssh连接了远程服务器，经常才几分钟没操作就被自动断线了，不能进行任何操作，其实这是因为ssh没有设置心跳检测，可以通过以下两种方法解决。\n本地机最常用的方法\n依赖ssh客户端定时发送心跳检测，配置/etc/ssh/ssh_config文件，在末尾添加上：\nServerAliveInterval 20 ServerAliveCountMax 999 每隔20秒向服务器发出一次心跳检测，若超过999次请求都没有成功，就主动断开与服务器端的连接。\n适用于服务器端\n依赖ssh服务器端定时发送心跳检测，配置/etc/ssh/sshd_config文件(注意：这里是sshd_config，不是ssh_config)，在末尾添加上:\nClientAliveInterval 30 ClientAliveCountMax 6 每隔30秒向客户端发出一次心跳检测，若超过6次请求都没有成功，就会主动断开与客户端的连接。\n设置了ssh的心跳检测后，重启ssh服务才能生效，执行命令\nservice ssh restart ","permalink":"http://localhost:1313/en/posts/tech/ssh/","summary":"背景 平时在命令行下ssh连接了远程服务器，经常才几分钟没操作就被自动断线了，不能进行任何操作，其实这是因为ssh没有设置心跳检测，可以通过以下两种方法解决。 本地机最常用的方法 依赖ssh客户端定时发送心跳检测，配置/etc/ssh/ssh_config文件，在末尾添加上： ServerAliveInterval 20 ServerAliveCountMax 999 每","title":"SSH连接自动断开问题"},{"content":"基本概念 在对biomarker进行分析时，我们通常会对预测模型的预测性能通过ROC曲线来进行评估，但是对于一些生存资料相关数据的预测模型需要考虑到生存信息与时间因素进去，于是就有了时间依赖的ROC曲线。\n传统的ROC曲线分析方法认为个体的事件（疾病）状态和markers是随着时间的推移而固定的，但在临床流行病学研究中，疾病状态和markers都是随着时间的推移而变化的（即time-to-event outcomes）。早期无病的个体由于研究随访时间较长，可能较晚发病，而且其markers可能在随访期间较基线发生变化。如果使用传统的ROC会忽略疾病状态或markers的时间依赖性，此时用随时间变化的time-dependent ROC（时间相依ROC）比较合适。\n原理 时间依赖性ROC曲线有(1) cumulative/dynamic(C/D)、(2) incident/dynamic(I/D)和(3) incident/static(I/S)三种定义，其中cumulative/dynamic(C/D)是比较适合用于生存分析的定义，也是当前大多数研究使用的方法。cumulative/dynamic(C/D)中cumulative是指Cumulative sensitivity，dynamic是指dynamic specificity。\n对于任意时间t，每一个个体会按照其在时间t的状态被划分到病例组或对照组。在cumulative/dynamic中，如果一个个体在时间0和时间t之间发病，那么其会被划分到病例组（图中A、B和E）;如果一个个体在时间0和时间t之间没有发病，那么其会被划分到病例组（图中C、D和F）。\n在阈值为c的情况下，相应的敏感性和特异性计算公式如下：\n$$ \\begin{align*} \\text{sensitivity}^{\\mathbb{C}}(c,t) \u0026amp;= P(M_{i} \u0026gt; c | T_{i} \\le t)\\ \\text{specificity}^{\\mathbb{D}}(c,t) \u0026amp;= P(M_{i} \\le c | T_{i} \u0026gt; t)\\ \\end{align*} $$\n通过上述公式计算不同阈值下的敏感性和特异性我们即可得到时间t下的ROC曲线。结合上图可以轻易的看出，个体被划分到病例组还是对照组会随着时间t取值的变化而发生变化。假设图中的t增大，那么划分到病例组的个体就会变成A、B、C和E，对照组则会变成D和F。在此情形下，相应的ROC曲线也会发生变化。\n意义解析 数据准备 我们使用survival包中提供的ovarian数据集作为例子，可以简单看一下这些样本的生存曲线\nlibrary(tidyverse) ## Used for the dataset. library(survival) ## Used for visualizaiton. library(survminer) ## Load the Ovarian Cancer Survival Data data(ovarian) ## Plot ggsurvplot(survfit(Surv(futime, fustat) ~ 1, data = ovarian), risk.table = TRUE, break.time.by = 180) 可以看到再该数据集中，大约在720天之后，就没有患者发生死亡\n我们使用所有的协变量(age, resid.ds, rx, ecog.ps)拟合Cox回归模型，并基于线性预测变量构建风险评分。\n## Fit a Cox model coxph1 \u0026lt;- coxph(formula = Surv(futime, fustat) ~ pspline(age, df = 4) + factor(resid.ds) + factor(rx) + factor(ecog.ps), data = ovarian) ## Obtain the linear predictor ovarian$lp \u0026lt;- predict(coxph1, type = \u0026#34;lp\u0026#34;) ovarian ## futime fustat age resid.ds rx ecog.ps lp ## 1 59 1 72.3315 2 1 1 3.48363231 ## 2 115 1 74.4932 2 1 1 3.34783240 ## 3 156 1 66.4658 2 1 2 2.88061142 ## 4 421 0 53.3644 2 2 1 -0.29905598 ## 5 431 1 50.3397 2 1 1 0.30051742 ## 6 448 0 56.4301 1 1 2 -0.30406562 ## 7 464 1 56.9370 2 2 2 0.08752617 ## 8 475 1 59.8548 2 2 2 0.12126622 ## 9 477 0 64.1753 2 1 1 1.17098395 ## 10 563 1 55.1781 1 2 2 -0.66639213 ## 11 638 1 56.7562 1 1 2 -0.32969630 ## 12 744 0 50.1096 1 2 1 -1.09642040 ## 13 769 0 59.6301 2 2 2 0.09654704 ## 14 770 0 57.0521 2 2 1 -0.64257241 ## 15 803 0 39.2712 1 1 1 -3.22587014 ## 16 855 0 43.1233 1 1 2 -1.09198364 ## 17 1040 0 38.8932 2 1 2 -1.74841767 ## 18 1106 0 44.6000 1 1 1 -1.40907007 ## 19 1129 0 53.9068 1 2 1 -1.25981421 ## 20 1206 0 44.2055 2 2 1 -1.07935701 ## 21 1227 0 59.5890 1 2 2 -0.81842855 ## 22 268 1 74.5041 2 1 2 4.06915563 ## 23 329 1 43.1370 2 1 1 -0.89939270 ## 24 353 1 63.2192 1 2 2 0.11416973 ## 25 365 1 64.4247 2 2 1 0.79623290 ## 26 377 0 58.3096 1 2 1 -1.59793837 计算时间依赖的ROC 使用survivalROC包进行计算 library(survivalROC) ## Define a helper functio nto evaluate at various t survivalROC_helper \u0026lt;- function(t) { survivalROC(Stime = ovarian$futime, status = ovarian$fustat, marker = ovarian$lp, predict.time = t, method = \u0026#34;NNE\u0026#34;, span = 0.25 * nrow(ovarian)^(-0.20)) } ## Evaluate every 180 days survivalROC_data \u0026lt;- data_frame(t = 180 * c(1,2,3,4,5,6)) %\u0026gt;% mutate(survivalROC = map(t, survivalROC_helper), ## Extract scalar AUC auc = map_dbl(survivalROC, magrittr::extract2, \u0026#34;AUC\u0026#34;), ## Put cut off dependent values in a data_frame df_survivalROC = map(survivalROC, function(obj) { as_tibble(obj[c(\u0026#34;cut.values\u0026#34;,\u0026#34;TP\u0026#34;,\u0026#34;FP\u0026#34;)]) })) %\u0026gt;% dplyr::select(-survivalROC) %\u0026gt;% unnest(cols = c(df_survivalROC)) %\u0026gt;% arrange(t, FP, TP) ## Plot survivalROC_data %\u0026gt;% ggplot(mapping = aes(x = FP, y = TP)) + geom_point() + geom_line() + geom_label(data = survivalROC_data %\u0026gt;% dplyr::select(t,auc) %\u0026gt;% unique, mapping = aes(label = sprintf(\u0026#34;%.3f\u0026#34;, auc)), x = 0.5, y = 0.5) + facet_wrap( ~ t) + theme_bw() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5), legend.key = element_blank(), plot.title = element_text(hjust = 0.5), strip.background = element_blank()) 从图中大概可以看出，在180天时ROC曲线的效果最好，但是出现这种情况的主要原因是在180天的时候死亡的患者很少，所以几乎不影响。然后，在时间超过720天后AUC稳定在0.856，说明在此之后一直未死亡的患者贡献了风险得分的预测能力。\n案例实现 对于R中time-dependent ROC的实现方式，一般会用timeROC和survivalROC包， 也有一些其他的包如：tdROC, timereg, risksetROC和survAUC可以实现。timeROC相比于survivalROC会多计算个AUC的置信区间\ntimeROC的具体实现如下：\nlibrary(timeROC) data(mayo) time_roc_res \u0026lt;- timeROC( T = mayo$time, delta = mayo$censor, marker = mayo$mayoscore5, cause = 1, weighting=\u0026#34;marginal\u0026#34;, times = c(3 * 365, 5 * 365, 10 * 365), ROC = TRUE, iid = TRUE ) 查看计算的AUC值及其置信区间：\ntime_roc_res$AUC ## t=1095 t=1825 t=3650 ## 0.8982790 0.9153621 0.8576153 confint(time_roc_res, level = 0.95)$CI_AUC ## 2.5% 97.5% ## t=1095 85.01 94.64 ## t=1825 87.42 95.65 ## t=3650 79.38 92.14 绘制time-dependent ROC曲线：\nplot(time_roc_res, time=3 * 365, col = \u0026#34;red\u0026#34;, title = FALSE) plot(time_roc_res, time=5 * 365, add=TRUE, col=\u0026#34;blue\u0026#34;) plot(time_roc_res, time=10 * 365, add=TRUE, col=\u0026#34;green\u0026#34;) legend(\u0026#34;bottomright\u0026#34;,c(\u0026#34;3 Years\u0026#34; ,\u0026#34;5 Years\u0026#34;, \u0026#34;10 Years\u0026#34;), col=c(\u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;), lty=1, lwd=2) 使用ggplot2绘制美化版本的ROC曲线：\nROC_data \u0026lt;- data.frame( TP_3year = time_roc_res$TP[, 1], FP_3year = time_roc_res$FP[, 1], TP_5year = time_roc_res$TP[, 2], FP_5year = time_roc_res$FP[, 2], TP_10year = time_roc_res$TP[, 3], FP_10year = time_roc_res$FP[, 3] ) library(ggplot2) ggplot(data = ROC_data) + geom_line(aes(x = FP_3year, y = TP_3year), size = 1, color = \u0026#34;#BC3C29FF\u0026#34;) + geom_line(aes(x = FP_5year, y = TP_5year), size = 1, color = \u0026#34;#0072B5FF\u0026#34;) + geom_line(aes(x = FP_10year, y = TP_10year), size = 1, color = \u0026#34;#E18727FF\u0026#34;) + geom_abline(slope = 1, intercept = 0, color = \u0026#34;grey\u0026#34;, size = 1, linetype = 2) + theme_bw() + annotate(\u0026#34;text\u0026#34;, x = 0.75, y = 0.25, size = 4.5, label = paste0(\u0026#34;AUC at 3 years = \u0026#34;, sprintf(\u0026#34;%.3f\u0026#34;, time_roc_res$AUC[[1]])), color = \u0026#34;#BC3C29FF\u0026#34;) + annotate(\u0026#34;text\u0026#34;, x = 0.75, y = 0.15, size = 4.5, label = paste0(\u0026#34;AUC at 5 years = \u0026#34;, sprintf(\u0026#34;%.3f\u0026#34;, time_roc_res$AUC[[2]])), color = \u0026#34;#0072B5FF\u0026#34;) + annotate(\u0026#34;text\u0026#34;, x = 0.75, y = 0.05, size = 4.5, label = paste0(\u0026#34;AUC at 10 years = \u0026#34;, sprintf(\u0026#34;%.3f\u0026#34;, time_roc_res$AUC[[3]])), color = \u0026#34;#E18727FF\u0026#34;) + labs(x = \u0026#34;False positive rate\u0026#34;, y = \u0026#34;True positive rate\u0026#34;) + theme( axis.text = element_text(face = \u0026#34;bold\u0026#34;, size = 11, color = \u0026#34;black\u0026#34;), axis.title.x = element_text(face = \u0026#34;bold\u0026#34;, size = 14, color = \u0026#34;black\u0026#34;, margin = margin(c(15, 0, 0, 0))), axis.title.y = element_text(face = \u0026#34;bold\u0026#34;, size = 14, color = \u0026#34;black\u0026#34;, margin = margin(c(0, 15, 0, 0))) ) Reference Time-dependent ROC for Survival Prediction Models in R\n","permalink":"http://localhost:1313/en/posts/tech/timeroc/","summary":"基本概念 在对biomarker进行分析时，我们通常会对预测模型的预测性能通过ROC曲线来进行评估，但是对于一些生存资料相关数据的预测模型需要考虑到生存信息与时间因素进去，于是就有了时间依赖的ROC曲线。 传统的ROC曲线分析方法认为个体的事件（疾病）状态和markers是随着时间的","title":"Time-dependent ROC 曲线"},{"content":"关于 Conda Conda is an open source package management system and environment management system that runs on Windows, macOS and Linux. Conda quickly installs, runs and updates packages and their dependencies. Conda easily creates, saves, loads and switches between environments on your local computer. It was created for Python programs, but it can package and distribute software for any language.\n简单来说，Conda 就是专门用于管理 Python 包环境以及部署的工具。\nAnaconda、Conda 、Miniconda Anaconda是一个包含180+的科学包及其依赖项的发行版本。其包含的科学包包括：conda, numpy, scipy, ipython notebook等。 conda是包及其依赖项和环境的管理工具。适用多种语言（Python, R, Ruby, Lua等） Miniconda是一个最小安装版本的conda，只包含了少量的依赖和软件包 一般来说，三者并没有那么明显，只是在于依赖等信息的囊括问题\n安装 Conda 都可以下载安装包进行安装\nConda使用 查看版本 conda -V conda在安装时默认创建Base虚拟环境，并且自带了一系列包可以使用，可以使用conda list 查看当前环境中安装的包\nBase 虚拟环境:实际开发中，每个 Python 项目依赖的包都不同，Python 解释器版本也可能不同；每个Python 项目可能是你一人开发，也可能是多人开发；为了保证每个 Python 项目的环境（Python 解释器和项目依赖包）独立，互不干预，以及同一个Python 项目的所有人开发环境一致，Anaconda 可以为每一个项目单独配置Python 的开发和运行环境，也就是 Anaconda 中的虚拟环境（可以类比为仓库）\n创建 conda 虚拟环境 conda create -n test python=3.6 切换环境 conda activate test 退出和删除环境 退出当前环境回到默认的 Base\nconda deactivate test 删除环境\nconda remove -n env_name –-all 查看系统中的所有环境 conda info -e 环境安装包管理 安装指定环境的包 conda install -n \u0026lt;env_name\u0026gt; \u0026lt;package_name\u0026gt; 当前环境安装包 conda install \u0026lt;package_name\u0026gt; 删除指定环境的包 conda remove -n \u0026lt;env_name\u0026gt; \u0026lt;package_name\u0026gt; 删除指定环境的包 conda remove \u0026lt;package_name\u0026gt; 更新当前环境的包 conda update \u0026lt;package_name\u0026gt; 更新当前环境所有包 conda update --all 更新conda conda update conda 环境复制和导出 环境复制 conda create --name new_env_name --clone copied_env_name 导出环境 conda env export \u0026gt; environment.yaml 该命令会生成一个environment.yaml文件，包含了当前环境中的配置\n导入环境 conda env create -f environment.yaml 修改conda镜像源 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --set show_channel_urls yes 或者手动修改.condarc，可以使用conda config --set show_channel_urls yes 生成该文件之后再修改。\nchannels: - defaults show_channel_urls: true channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda default_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2 custom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud 修改pip镜像 临时使用pip pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package 设为默认 pip install pip -U pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple conda自动激活环境 安装conda后在进入终端时可能会自动激活base环境，有以下解决方法：\n每次在命令行通过conda deactivate退出base环境回到系统自带的环境\n通过将auto_activate_base参数设置为false实现：\nconda config --set auto_activate_base false 也可以设置为ture取消更改\nconda安装一些软件 R\nconda install -c conda-forge r-base tidyverse包\nconda install r-tidyverse 注意，使用conda安装R包会存在版本的问题，因为conda的包版本不一定是最新的，所以最好还是进入R环境进行安装。\n","permalink":"http://localhost:1313/en/posts/tech/conda/","summary":"关于 Conda Conda is an open source package management system and environment management system that runs on Windows, macOS and Linux. Conda quickly installs, runs and updates packages and their dependencies. Conda easily creates, saves, loads and switches between environments on your local computer. It was created for Python programs, but it can package and distribute software for any language. 简单来说，Conda 就是专门用于管理 Python 包环境以及部署的工具。 Anaconda、Conda 、Miniconda Anaconda是一个包含180+的科学包及其依赖","title":"Conda使用指南（安装部署篇）"},{"content":"安装 根据电脑版本下载对应aspera connect server，下载地址：https://www.ibm.com/products/aspera/downloads\ncd ./download wget http://download.asperasoft.com/download/sw/connect/3.7.4/aspera-connect-3.7.4.147727-linux-64.tar.gz 下载获得的是shell脚本，解压安装\ntar zxf aspera-connect-3.7.4.147727-linux-64.tar.gz bash aspera-connect-3.7.4.147727-linux-64.sh 安装后找到home目录下的会有一个.aspera目录，里边包含密钥等信息，可以将其添加入环境变量中\n在.aspera的目录，有两个文件比较重要: 一个是ascp的可执行文件 ~/.aspera/connect/bin/ascp，另一个ascp的密钥文件 ~/.aspera/connect/etc/asperaweb_id_dsa.putty,可以把密钥备份到home目录当中\ncd ~ echo \u0026#39;PATH=$PATH:/home/jeason/.aspera/connect/bin/\u0026#39; \u0026gt;\u0026gt; ~/.bashrc cp ~/.aspera/connect/etc/asperaweb_id_dsa.putty ~/ source .bashrc 重新source配置文件生效\n使用 ascp --help参看命令参数\n常见参数：\n-v verbose mode 唠叨模式，能让你实时知道程序在干啥，方便查错。 -T 取消加密，否则有时候数据下载不了 。 -i 提供私钥文件的地址，我也不知道干嘛的，反正不能少，地址一般是~/.aspera/connect/etc中的asperaweb_id_dsa.openssh文件 -l 设置最大传输速度，一般200m到500m，如果不设置，反而速度会比较低，可能有个较低的默认值 -k 断点续传，一般设置为值1 下载sra数据 ascp -T -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh -k 1 -l 200m anonftp@ftp-private.ncbi.nlm.nih.gov:/sra/sra-instant/reads/ByRun/sra/SRR/SRR620/SRR6208854/SRR6208854.sra ./ SRA数据库下载：首先记住，数据的存放地址是 ftp-private.ncbi.nlm.nih.gov，SRA在Aspera的用户名是 anonftp\nAspera批量下载SRA文件 很多时候需要同时下载多个SRA文件，ascp命令提供参数 --file-list，用于批量下载SRA文件。\n可以将下载列表写入sra.txt文件中，然后进行批量下载\n/sra/sra-instant/reads/ByRun/sra/SRR/SRR623/SRR6232298/SRR6232298.sra /sra/sra-instant/reads/ByRun/sra/SRR/SRR623/SRR6232299/SRR6232299.sra ascp -T -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh -k 1 -l 200m --mode recv --host ftp-private.ncbi.nlm.nih.gov --user anonftp --file-list ~/sra.txt ./ asprea同样可以下载ENA的数据，ENA在Aspera的用户名是 era-fasp，数据的存放地址是 fasp.sra.ebi.ac.uk\n报错 有时会遇到以下报错：\nascp: Failed to open TCP connection for SSH, exiting. Session Stop (Error: Failed to open TCP connection for SSH) 官方回答：\nOn many Linux systems the default firewall can be configured with iptables. You will have to allow all incoming and outgoing traffic on UDP port 33001 (or whatever your Aspera UDP port is), which you can do with the following commands:\n使用如下命令进行操作：\niptables -I INPUT -p tcp --dport 33001 -j ACCEPT iptables -I OUTPUT -p tcp --dport 33001 -j ACCEPT ","permalink":"http://localhost:1313/en/posts/tech/aspera/","summary":"安装 根据电脑版本下载对应aspera connect server，下载地址：https://www.ibm.com/products/aspera/downloads cd ./download wget http://download.asperasoft.com/download/sw/connect/3.7.4/aspera-connect-3.7.4.147727-linux-64.tar.gz 下载获得的是shell脚本，解压安装 tar zxf aspera-connect-3.7.4.147727-linux-64.tar.gz bash aspera-connect-3.7.4.147727-linux-64.sh 安装后找到home目录下的会有一个.aspera目录，里边包含密钥等信息，","title":"Aspera的安装与使用"},{"content":"trim_galore可以用来对原始的测序数据进行质控\n安装 trim_galore需要提前安装两个依赖软件：Fastqc和 cutadapt\nFastqc的安装已经提及，这里不再详述\ncutadapt的安装过程如下：\nsudo apt install python3-pip # install pip3 python3 -m pip install --user --upgrade cutadapt # install cutadapt echo \u0026#34;export PATH=$PATH:$HOME/.local/bin\u0026#34; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc trim_galore 安装\n# Check that cutadapt is installed cutadapt --version # Check that FastQC is installed fastqc -v # Install Trim Galore cd ~/software curl -fsSL https://github.com/FelixKrueger/TrimGalore/archive/0.6.6.tar.gz -o trim_galore.tar.gz tar xvzf trim_galore.tar.gz # soft link sudo ln -s /home/ubuntu/software/trim_galore/trim_galore /usr/bin/trim_galore 使用示例：\ncd ~/SingleCell mkdir fastqc_trimmed_results trim_galore --nextera -o fastqc_trimmed_results Share/ERR522959_1.fastq Share/ERR522959_2.fastq 参数说明：\n\u0026ndash;quality：设定Phred quality score阈值，默认为20。 \u0026ndash;phred33：：选择-phred33或者-phred64，表示测序平台使用的Phred quality score。 \u0026ndash;adapter：输入adapter序列。也可以不输入，Trim Galore会自动寻找可能性最高的平台对应的adapter。自动搜选的平台三个，也直接显式输入这三种平台，即\u0026ndash;illumina、\u0026ndash;nextera和\u0026ndash;small_rna。一般使用fastqc软件能够判断出来，sanger/illumina 1.9为phred33，illumina 1.3/1.5为phred64。 \u0026ndash;stringency：设定可以忍受的前后adapter重叠的碱基数，默认为1（非常苛刻）。可以适度放宽，因为后一个adapter几乎不可能被测序仪读到。 \u0026ndash;length：设定输出reads长度阈值，小于设定值会被抛弃。 \u0026ndash;paired：对于双端测序结果，一对reads中，如果有一个被剔除，那么另一个会被同样抛弃，而不管是否达到标准。 \u0026ndash;retain_unpaired：对于双端测序结果，一对reads中，如果一个read达到标准，但是对应的另一个要被抛弃，达到标准的read会被单独保存为一个文件。 \u0026ndash;gzip和\u0026ndash;dont_gzip：清洗后的数据zip打包或者不打包。 \u0026ndash;output_dir：输入目录。需要提前建立目录，否则运行会报错。 \u0026ndash; trim-n : 移除read一端的reads\n","permalink":"http://localhost:1313/en/posts/tech/trim_galore/","summary":"trim_galore可以用来对原始的测序数据进行质控 安装 trim_galore需要提前安装两个依赖软件：Fastqc和 cutadapt Fastqc的安装已经提及，这里不再详述 cutadapt的安装过程如下： sudo apt install python3-pip # install pip3 python3 -m pip install --user --upgrade cutadapt # install cutadapt echo \u0026#34;export PATH=$PATH:$HOME/.local/bin\u0026#34; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc trim_galore 安装 # Check that cutadapt is installed cutadapt --version # Check that FastQC is installed fastqc -v","title":"测序质控软件trim_galore安装"},{"content":"添加原件 添加竖线或者横线\ngeom_abline(mapping = NULL, data = NULL, ..., slope, intercept, na.rm = FALSE, show.legend = NA) geom_hline(mapping = NULL, data = NULL, ..., yintercept, na.rm = FALSE, show.legend = NA) geom_vline(mapping = NULL, data = NULL, ..., xintercept, na.rm = FALSE, show.legend = NA) 三个函数的作用分别是，geom_abline添加斜线， geom_hline添加水平线，geom_vline添加垂直线\n参数slope 表示斜率 intercept表示截距\n参数yintercept 表示y轴截距或直线所在位置\n参数xintercept 表示x轴截距或直线所在位置\n添加线段\ngeom_segment(aes(x = x1, y = y1, xend = x2, yend = y2) x, y控制线段起始位置，xend，yend控制线段终止位置\n背景布局 去掉网格\ntheme(panel.grid = element_blank()) 使用与plot相似的背景\ntheme_classic() x，y轴转换\ncoord_flip() 去掉图形和坐标轴间隙\nscale_y_continuous(expand = c(0,0))//这个可以去掉与X轴间隙 scale_x_continuous(expand = c(0,0))//这个可以去掉与Y轴间隙 添加阴影 geom_ribbon(mapping = NULL, data = NULL, stat = \u0026#34;identity\u0026#34;, position = \u0026#34;identity\u0026#34;, ..., na.rm = FALSE, orientation = NA, show.legend = NA, inherit.aes = TRUE,outline.type = \u0026#34;both\u0026#34;) geom_area(mapping = NULL, data = NULL, stat = \u0026#34;identity\u0026#34;, position = \u0026#34;stack\u0026#34;, na.rm = FALSE, orientation = NA, show.legend = NA, inherit.aes = TRUE, ..., outline.type = \u0026#34;upper\u0026#34;) 添加箭头和线段 添加箭头或线段需要使用annotate('segment')\nannotate(\u0026#39;segment\u0026#39;, x=#, xend=#, y=#, yend=#, arrow=arrow()) 没有添加arrow参数时是绘制线段 如果添加了arrow参数，需要提前加载library(grid)包才能调用arrow()函数 画图理解 使用ggplot绘图，图层是最重要的，要弄清参数是否写进了图层里。只有在图层中的对象才能进行后续的修改和操作。 标题居中 theme(plot.title = element_text(hjust = 0.5)) ","permalink":"http://localhost:1313/en/posts/tech/ggplot2/","summary":"添加原件 添加竖线或者横线 geom_abline(mapping = NULL, data = NULL, ..., slope, intercept, na.rm = FALSE, show.legend = NA) geom_hline(mapping = NULL, data = NULL, ..., yintercept, na.rm = FALSE, show.legend = NA) geom_vline(mapping = NULL, data = NULL, ..., xintercept, na.rm = FALSE, show.legend = NA) 三个函数的作用分别是，geom_abline添加斜线， geom_hline添加水平线，geom_vline添加垂直线 参数slope 表示斜率 intercept表示截距 参数y","title":"ggplot2 | 小部件参考"},{"content":"动机 scRNA-seq数据的低质量文库可能来自于：细胞分选环节的破坏、文库制备失误（没有足够的反转录或PCR次数）… 表现在：细胞总表达量低、基本没有表达的基因、高线粒体或spike-in占比。\n这些低质量的库是有问题的，因为它们可能在下游分析中导致误导的结果 。\n聚类问题： 低质量的细胞会聚集成一群，对结果的解释造成干扰，因为从这群细胞中得不到什么有用的信息，但是它的确也是一群。这种现象产生的原因有可能是：细胞破坏以后，线粒体或核RNAs占比升高。 最差的情况就是：不同类型的低质量细胞，也能聚在一起，因为相比于固有的生物差异，更相似的低质量让它们相依相偎。除此以外，本来非常小的细胞文库也能聚成一群，因为log转换后它们的平均表达量会发生很大的变化(A. Lun 2018). 方差估计或主成分分析:首先在PCA分析时，低质量和高质量之间的差异相比于生物学差异会体现更明显，占据主要的成分，减少降维结果的可靠性。另外，某个基因可能在两个细胞之间没什么表达差异，但是如果所处环境差异很大（一个细胞质量很低，另一个细胞质量正常），那么在差异估算过程中，就会把这个差异也会被当成差异表达基因。例如：一个低质量细胞文库的总表达量非常低（接近0），但恰巧还存在一个基因有表达量，那么这个基因的表达量在后续的文库归一化过程中就会尤为突出 奇怪的转录本上调：实验难免会混入外源的污染转录本，但这个量很少并且在所有细胞中都应该是差不多水平的。但如果某个细胞质量低，文库小，那么在校正文库差异过程中，其中的污染转录本表达量就会“突飞猛进”，看起来是一些明显上调的“奇怪基因”。实际上，这些奇怪的基因依然在其他细胞中存在，并且真实的表达量差不多，并且是不应该占据主体地位的。 为了最大程度避免上面一种或多种情况的发生，应该在归一化之前去掉这些低质量的细胞，这个过程就是**细胞的质控 **\n使用A. T. L. Lun et al. (2017)的小型scRNA数据（未进行QC）进行测试\n#--- loading ---# library(scRNAseq) sce.416b \u0026lt;- LunSpikeInData(which=\u0026#34;416b\u0026#34;) table(sce.416b$block) 20160113 20160325 96 96 sce.416b$block \u0026lt;- factor(sce.416b$block) sce.416b ## class: SingleCellExperiment ## dim: 46604 192 ## metadata(0): ## assays(1): counts ## rownames(46604): ENSMUSG00000102693 ENSMUSG00000064842 ... ## ENSMUSG00000095742 CBFB-MYH11-mcherry ## rowData names(1): Length ## colnames(192): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1 ## SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ... ## SLX-11312.N712_S508.H5H5YBBXX.s_8.r_1 ## SLX-11312.N712_S517.H5H5YBBXX.s_8.r_1 ## colData names(9): Source Name cell line ... spike-in addition block ## reducedDimNames(0): ## altExpNames(2): ERCC SIRV QC指标的选择 鉴定细胞是否是低质量的，需要用到几个指标。虽然下面这些指标是使用SMART-seq2数据进行展示的，但依然适用于UMI数据（比如MARS-seq、droplet-based技术）\n文库大小（library size） ：指的是每个细胞中所有基因的表达量之和。细胞的文库如果很小，说明在文库制备过程中存在RNA的损失，要么是由于细胞裂解，要么是cDNA捕获不足导致后续的扩增量少 每个细胞中表达基因的数目（number of expressed features in each cell）：指的是细胞中非0表达量的基因数量。如果细胞中基本没有基因表达，很可能是转录本捕获失败 比对到spike-in转录本的reads比例（proportion of reads mapped to spike-in transcripts）：计算方法是：spike-in counts / all features (including spike-ins) for each cell。每个细胞都应该加入等量的外源转录本（spike-in），如果哪个细胞的spike-in比例提高了，说明它的内源RNA含量减少（比如在细胞分选阶段出现的细胞裂解或者RNA降解） 比对到线粒体基因组的reads比例（proportion of reads mapped to genes in the mitochondrial genome） ：如果没有spike-in，那么使用线粒体指标也是能说明问题的(Islam et al. 2014; Ilicic et al. 2016)。比对到线粒体的reads增多，说明细胞质中的RNA减少，可能存在细胞穿孔的情况，而这个孔的大小，可能只是将细胞质中存在的mRNA流出去，但线粒体的体积超过了孔的大小，所以还留在了细胞中，造成一定程度的富集，导致线粒体RNA占比升高。 对于每个细胞，可以用scater包的perCellQCMetrics()函数进行计算，其中sum这一列表示每个细胞的文库大小；detected这一列表示检测到的基因数量；subsets_Mito_percent这一列表示比对到线粒体基因组的reads占比；altexps_ERCC_percent表示比对到ERCC spike-in的reads占比\n# Retrieving the mitochondrial transcripts using genomic locations included in # the row-level annotation for the SingleCellExperiment. location \u0026lt;- rowRanges(sce.416b) is.mito \u0026lt;- any(seqnames(location)==\u0026#34;MT\u0026#34;) # ALTERNATIVELY: using resources in AnnotationHub to retrieve chromosomal # locations given the Ensembl IDs; this should yield the same result. library(AnnotationHub) ens.mm.v97 \u0026lt;- AnnotationHub()[[\u0026#34;AH73905\u0026#34;]] chr.loc \u0026lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b), keytype=\u0026#34;GENEID\u0026#34;, column=\u0026#34;SEQNAME\u0026#34;) is.mito.alt \u0026lt;- which(chr.loc==\u0026#34;MT\u0026#34;) library(scater) df \u0026lt;- perCellQCMetrics(sce.416b, subsets=list(Mito=is.mito)) df ## DataFrame with 192 rows and 16 columns ## sum detected percent_top_50 percent_top_100 percent_top_200 ## \u0026lt;integer\u0026gt; \u0026lt;integer\u0026gt; \u0026lt;numeric\u0026gt; \u0026lt;numeric\u0026gt; \u0026lt;numeric\u0026gt; ## 1 865936 7618 26.7218 32.2773 39.7208 ## 2 1076277 7521 29.4043 35.0354 42.2581 ## 3 1180138 8306 27.3454 32.4770 39.3296 ## 4 1342593 8143 35.8092 40.2666 46.2460 ## 5 1668311 7154 34.1198 39.0901 45.6660 ## ... ... ... ... ... ... ## 188 776622 8174 45.9362 49.7010 54.6101 ## 189 1299950 8956 38.0829 42.8930 49.0622 ## 190 1800696 9530 30.6675 35.5839 41.8550 ## 191 46731 6649 32.2998 37.9149 44.5999 ## 192 1866692 10964 26.6632 31.2584 37.5608 ## percent_top_500 subsets_Mito_sum subsets_Mito_detected subsets_Mito_percent ## \u0026lt;numeric\u0026gt; \u0026lt;integer\u0026gt; \u0026lt;integer\u0026gt; \u0026lt;numeric\u0026gt; ## 1 52.9038 78790 20 9.09882 ## 2 55.7454 98613 20 9.16242 ## 3 51.9337 100341 19 8.50248 ## 4 57.1210 104882 20 7.81190 ## 5 58.2004 129559 22 7.76588 ## ... ... ... ... ... ## 188 64.4249 48126 20 6.19684 ## 189 60.6675 112225 25 8.63302 ## 190 53.6781 135693 23 7.53559 ## 191 56.5235 3505 16 7.50037 ## 192 48.9489 150375 29 8.05569 ## altexps_ERCC_sum altexps_ERCC_detected altexps_ERCC_percent ## \u0026lt;integer\u0026gt; \u0026lt;integer\u0026gt; \u0026lt;numeric\u0026gt; ## 1 65278 39 6.80658 ## 2 74748 40 6.28030 ## 3 60878 42 4.78949 ## 4 60073 42 4.18567 ## 5 136810 44 7.28887 ## ... ... ... ... ## 188 61575 39 7.17620 ## 189 94982 41 6.65764 ## 190 113707 40 5.81467 ## 191 7580 44 13.48898 ## 192 48664 39 2.51930 ## altexps_SIRV_sum altexps_SIRV_detected altexps_SIRV_percent total ## \u0026lt;integer\u0026gt; \u0026lt;integer\u0026gt; \u0026lt;numeric\u0026gt; \u0026lt;integer\u0026gt; ## 1 27828 7 2.90165 959042 ## 2 39173 7 3.29130 1190198 ## 3 30058 7 2.36477 1271074 ## 4 32542 7 2.26741 1435208 ## 5 71850 7 3.82798 1876971 ## ... ... ... ... ... ## 188 19848 7 2.313165 858045 ## 189 31729 7 2.224004 1426661 ## 190 41116 7 2.102562 1955519 ## 191 1883 7 3.350892 56194 ## 192 16289 7 0.843271 1931645 另外，还可以使用addPerCellQC()，它会把每个细胞的QC指标加到SingleCellExperiment对象的colData中，方便后面调取\nsce.416b \u0026lt;- addPerCellQC(sce.416b, subsets=list(Mito=is.mito)) colnames(colData(sce.416b)) ## [1] \u0026#34;Source Name\u0026#34; \u0026#34;cell line\u0026#34; ## [3] \u0026#34;cell type\u0026#34; \u0026#34;single cell well quality\u0026#34; ## [5] \u0026#34;genotype\u0026#34; \u0026#34;phenotype\u0026#34; ## [7] \u0026#34;strain\u0026#34; \u0026#34;spike-in addition\u0026#34; ## [9] \u0026#34;block\u0026#34; \u0026#34;sum\u0026#34; ## [11] \u0026#34;detected\u0026#34; \u0026#34;percent_top_50\u0026#34; ## [13] \u0026#34;percent_top_100\u0026#34; \u0026#34;percent_top_200\u0026#34; ## [15] \u0026#34;percent_top_500\u0026#34; \u0026#34;subsets_Mito_sum\u0026#34; ## [17] \u0026#34;subsets_Mito_detected\u0026#34; \u0026#34;subsets_Mito_percent\u0026#34; ## [19] \u0026#34;altexps_ERCC_sum\u0026#34; \u0026#34;altexps_ERCC_detected\u0026#34; ## [21] \u0026#34;altexps_ERCC_percent\u0026#34; \u0026#34;altexps_SIRV_sum\u0026#34; ## [23] \u0026#34;altexps_SIRV_detected\u0026#34; \u0026#34;altexps_SIRV_percent\u0026#34; ## [25] \u0026#34;total\u0026#34; 当然，这里做QC统计的前提假设是：每个细胞的qc指标都是独立于生物学状态的。也就是说，qc指标不会那么智能地识别细胞类型然后进行判断。它会认为（如文库太小、高线粒体占比）都是由技术误差引起的，而非生物因素。但是有一个问题，如果某些细胞类型本身的RNA含量就很低，或者它们本来就含有很多的线粒体转录本呢？再根据这个指标进行过滤，会不会损失一些细胞类型呢？\n识别低质量细胞 1. 使用固定的阈值 识别低质量细胞最简单方法是在QC度量上应用阈值。例如设定文库低于10万reads的细胞是低质量的，或者表达基因数量少于5000个，spike-in或线粒体占比高于10%。\nqc.lib \u0026lt;- df$sum \u0026lt; 1e5 qc.nexprs \u0026lt;- df$detected \u0026lt; 5e3 qc.spike \u0026lt;- df$altexps_ERCC_percent \u0026gt; 10 qc.mito \u0026lt;- df$subsets_Mito_percent \u0026gt; 10 discard \u0026lt;- qc.lib | qc.nexprs | qc.spike | qc.mito # Summarize the number of cells removed for each reason. DataFrame(LibSize=sum(qc.lib), NExprs=sum(qc.nexprs), SpikeProp=sum(qc.spike), MitoProp=sum(qc.mito), Total=sum(discard)) ## DataFrame with 1 row and 5 columns ## LibSize NExprs SpikeProp MitoProp Total ## \u0026lt;integer\u0026gt; \u0026lt;integer\u0026gt; \u0026lt;integer\u0026gt; \u0026lt;integer\u0026gt; \u0026lt;integer\u0026gt; ## 1 3 0 19 14 33 虽然看起来简单，但使用这种方法需要丰富的经验，了解实验设计和细胞状态；另外即使使用同一种文库制备方法，但由于细胞捕获效率和测序深度的不同，这个阈值依然需要适时调整。因此对于研究人员要求很高。\n2. 使用相对阈值 鉴定离群点 为了获得相对阈值，先假设大部分细胞都是高质量的，然后去找离群点作为低质量。那么按照什么方法找离群点呢？常用的一个函数isOutlier使用的是MAD指标（绝对中位差来估计方差,先计算出数据与它们的中位数之间的偏差，然后这些偏差的绝对值的中位数就是MAD，median absolute deviation）。如果超过中位数3倍MAD的值就是离群值。\n使用isOutlier时，如果要相减（例如：df$sum - 3* MAD），就用type=\u0026quot;lower\u0026quot;，此时一般还要做个log转换log=TRUE ，保证得到的结果不是负数\nqc.lib2 \u0026lt;- isOutlier(df$sum, log=TRUE, type=\u0026#34;lower\u0026#34;) qc.nexprs2 \u0026lt;- isOutlier(df$detected, log=TRUE, type=\u0026#34;lower\u0026#34;) qc.spike2 \u0026lt;- isOutlier(df$altexps_ERCC_percent, type=\u0026#34;higher\u0026#34;) qc.mito2 \u0026lt;- isOutlier(df$subsets_Mito_percent, type=\u0026#34;higher\u0026#34;) attr(qc.lib2, \u0026#34;thresholds\u0026#34;) lower higher 434082.9 Inf attr(qc.nexprs2, \u0026#34;thresholds\u0026#34;) lower higher 5231.468 Inf attr(qc.spike2, \u0026#34;thresholds\u0026#34;) lower higher -Inf 14.15371 attr(qc.mito2, \u0026#34;thresholds\u0026#34;) lower higher -Inf 11.91734 用相对阈值过滤的细胞数量统计：\ndiscard2 \u0026lt;- qc.lib2 | qc.nexprs2 | qc.spike2 | qc.mito2 # Summarize the number of cells removed for each reason. DataFrame(LibSize=sum(qc.lib2), NExprs=sum(qc.nexprs2), SpikeProp=sum(qc.spike2), MitoProp=sum(qc.mito2), Total=sum(discard2)) ## DataFrame with 1 row and 5 columns ## LibSize NExprs SpikeProp MitoProp Total ## \u0026lt;integer\u0026gt; \u0026lt;integer\u0026gt; \u0026lt;integer\u0026gt; \u0026lt;integer\u0026gt; \u0026lt;integer\u0026gt; ## 1 4 0 1 2 6 除此以外，还有一种更快的计算方法，一步整合了上面的操作：\nreasons \u0026lt;- quickPerCellQC(df, percent_subsets=c(\u0026#34;subsets_Mito_percent\u0026#34;, \u0026#34;altexps_ERCC_percent\u0026#34;)) colSums(as.matrix(reasons)) ## low_lib_size low_n_features high_subsets_Mito_percent ## 4 0 2 ## high_altexps_ERCC_percent discard ## 1 6 使用”相对“的阈值一个好处就是可以根据测序深度、cDNA捕获效率、线粒体含量等等进行阈值的调整，在经验不是足够丰富的时候，可以辅助判断。但仍需要注意的是，使用相对阈值是有前提的，那就是：认为大部分细胞都是高质量的\n离群点检测的假设 离群点的检测的假设是大部分细胞的质量都不错。这一点假设可以通过实验去验证（比如肉眼检查细胞完整性）。但当大部分细胞质量都很低，使用相对阈值结果就对大量的低质量细胞无计可施。因为它使用了MAD值，和中位数有关系，那么可以试想：如果一堆数都不合格，那么它们的中位数也不合格，因此原来正确的值，其实在这群不合格的数值中，就是“离群”的。 另一个假设就是：每个细胞的qc指标都是独立于生物学状态的。也就是说，qc指标不会那么智能地识别细胞类型然后进行判断。在异质性很高的组织中， 就是存在内源RNA含量低，而线粒体基因占比高的细胞。如果使用”一刀切“的固定阈值，它们就很可能会被当成离群点被过滤。而是用MAD计算方法检测的结果可能就是：虽然一堆细胞的某个qc指标差异很大，但中位数也在变，随之变化的还有MAD值，这样最后的结果不至于和真实生物学情况差太多 考虑实验的因素 很多大型的实验都包含多个细胞系，而且可能采用的实验方法不同（比如选用不同的测序深度），这就产生了实验的不同批次。这种情况下， 应该对每个批次分别进行检测。\n如果每个批次都是一个SingleCellExperiment对象，那么isOutlier()函数可以按上面的方法直接使用；但是如果不同批次的细胞已经混合成一整个SingleCellExperiment对象，那么batch=这个参数就派上用场了。\n同样以这个416B数据集为例，他包含了两种不同的实验类型。然后我们就可以使用batch=参数去进行质控。\nbatch \u0026lt;- paste0(sce.416b$phenotype, \u0026#34;-\u0026#34;, sce.416b$Plate) batch.reasons \u0026lt;- quickPerCellQC(df, percent_subsets=c(\u0026#34;subsets_Mito_percent\u0026#34;, \u0026#34;altexps_ERCC_percent\u0026#34;), batch=batch) colSums(as.matrix(batch.reasons)) ## low_lib_size low_n_features high_subsets_Mito_percent ## 4 2 2 ## high_altexps_ERCC_percent discard ## 4 7 但是，batch参数不是万能的，之前也说过，这种相对阈值需要一个假设：每个批次的大部分细胞都是高质量的。当某个批次的细胞整体质量偏低，离群点检测很有可能失败\n例如，在Grun et al. (2016)的数据集中有两个donor的实验是失败的。它们的ERCC含量相对其他批次高，增加了中位数和MAD值，导致过滤低质量细胞失败。因此这种情况下，可以先算其他几个批次的中位数和MAD值，然后参考这些值去对有问题的批次进行过滤。\nlibrary(scRNAseq) sce.grun \u0026lt;- GrunPancreasData() sce.grun \u0026lt;- addPerCellQC(sce.grun) # First attempt with batch-specific thresholds. discard.ercc \u0026lt;- isOutlier(sce.grun$altexps_ERCC_percent, type=\u0026#34;higher\u0026#34;, batch=sce.grun$donor) with.blocking \u0026lt;- plotColData(sce.grun, x=\u0026#34;donor\u0026#34;, y=\u0026#34;altexps_ERCC_percent\u0026#34;, colour_by=I(discard.ercc)) # Second attempt, sharing information across batches # to avoid dramatically different thresholds for unusual batches. discard.ercc2 \u0026lt;- isOutlier(sce.grun$altexps_ERCC_percent, type=\u0026#34;higher\u0026#34;, batch=sce.grun$donor, subset=sce.grun$donor %in% c(\u0026#34;D17\u0026#34;, \u0026#34;D2\u0026#34;, \u0026#34;D7\u0026#34;)) without.blocking \u0026lt;- plotColData(sce.grun, x=\u0026#34;donor\u0026#34;, y=\u0026#34;altexps_ERCC_percent\u0026#34;, colour_by=I(discard.ercc2)) gridExtra::grid.arrange(with.blocking, without.blocking, ncol=2) 注：可以看到，左图是按照每个批次分别鉴定的离群点；右图是用质量好的批次计算的阈值，然后运用到差的批次上的结果\n为了鉴别有问题的批次，可以先将每个批次分别计算结果，然后比较它们的阈值，如果比同类批次超出太多，就要警觉。\nercc.thresholds \u0026lt;- attr(discard.ercc, \u0026#34;thresholds\u0026#34;)[\u0026#34;higher\u0026#34;,] ercc.thresholds ## D10 D17 D2 D3 D7 ## 73.610696 7.599947 6.010975 113.105828 15.216956 names(ercc.thresholds)[isOutlier(ercc.thresholds, type=\u0026#34;higher\u0026#34;)] ## [1] \u0026#34;D10\u0026#34; \u0026#34;D3\u0026#34; 可以看到D10、D3的阈值就超过其他批次很多\n但是这么做的前提都是：我们认为批次中的细胞质量整体还不错。如果我们保证不了细胞质量，那么这种计算相对阈值的方法就不成立，还是要使用绝对阈值，手动去除。\n3. 其他方法 另一个策略是根据每个细胞的QC指标来在高维空间中识别异常值。利用robustbase 包，将细胞放在高维空间，根据他们的QC指标（文库大小、表达基因数、spike-in比例、线粒体比例），然后使用isOutlier()来识别表现出异常高outlylier水平的低质量细胞\nstats \u0026lt;- cbind(log10(df$sum), log10(df$detected), df$subsets_Mito_percent, df$altexps_ERCC_percent) library(robustbase) outlying \u0026lt;- adjOutlyingness(stats, only.outlyingness = TRUE) multi.outlier \u0026lt;- isOutlier(outlying, type = \u0026#34;higher\u0026#34;) summary(multi.outlier) ## Mode FALSE TRUE ## logical 182 10 除此以外，有时还可以根据基因表达量进行过滤，不过在bulk转录组中用的比较多，但是在scRNA中这样操作可能会损失一些本身数量就比较少的高质量细胞群体（比如一些罕见细胞，本身基因表达量就不是很高）\n画图检查 检查QC度量的分布以确定可能的问题是一个很好的实践。在最理想的情况下，我们会看到正态分布，可以证明在离群值检测中使用的3 MAD阈值是合理的。另一种模式下的大量细胞表明QC指标可能与某些生物状态相关，可能导致过滤过程中不同细胞类型的丢失;或者有不一致的库准备为一个子集的细胞，一个非罕见的现象在板的协议。\n# 把QC指标和原来的sce.416b细胞信息整合起来 colData(sce.416b) \u0026lt;- cbind(colData(sce.416b), df) # 修改一下整合后的信息 sce.416b$block \u0026lt;- factor(sce.416b$block) sce.416b$phenotype \u0026lt;- ifelse(grepl(\u0026#34;induced\u0026#34;, sce.416b$phenotype), \u0026#34;induced\u0026#34;, \u0026#34;wild type\u0026#34;) sce.416b$discard \u0026lt;- reasons$discard # 绘图 gridExtra::grid.arrange( plotColData(sce.416b, x=\u0026#34;block\u0026#34;, y=\u0026#34;sum\u0026#34;, colour_by=\u0026#34;discard\u0026#34;, other_fields=\u0026#34;phenotype\u0026#34;) + facet_wrap(~phenotype) + scale_y_log10() + ggtitle(\u0026#34;Total count\u0026#34;), plotColData(sce.416b, x=\u0026#34;block\u0026#34;, y=\u0026#34;detected\u0026#34;, colour_by=\u0026#34;discard\u0026#34;, other_fields=\u0026#34;phenotype\u0026#34;) + facet_wrap(~phenotype) + scale_y_log10() + ggtitle(\u0026#34;Detected features\u0026#34;), plotColData(sce.416b, x=\u0026#34;block\u0026#34;, y=\u0026#34;subsets_Mito_percent\u0026#34;, colour_by=\u0026#34;discard\u0026#34;, other_fields=\u0026#34;phenotype\u0026#34;) + facet_wrap(~phenotype) + ggtitle(\u0026#34;Mito percent\u0026#34;), plotColData(sce.416b, x=\u0026#34;block\u0026#34;, y=\u0026#34;altexps_ERCC_percent\u0026#34;, colour_by=\u0026#34;discard\u0026#34;, other_fields=\u0026#34;phenotype\u0026#34;) + facet_wrap(~phenotype) + ggtitle(\u0026#34;ERCC percent\u0026#34;), ncol=1 ) 展示的是不同批次的QC指标\n另一种有用的诊断方法是绘制相对于其他QC指标的线粒体计数比例图。\n为了确保不存在这样的细胞：虽然细胞文库大，但它的线粒体占比也高。另外也是为了避免意外过滤掉本来是高质量但同时具有高代谢活性（即高线粒体占比）的细胞（如肝脏细胞）\n======未完\n针对Droplet数据的细胞判断 背景 由于这种建库方法的独特性，我们没办法事先知道某一个细胞文库（比如一个cell barcode）是真正包含一个细胞还是只是一个空的液滴（droplet）。因此，第一步是需要根据得到的表达量信息，来推断液滴是不是空的。但仅仅根据表达量判断还是不太靠谱，因为还有可能在空的液滴中依然包含外源RNA，最后的细胞文库依旧不为0，但确实不包含细胞。\n这里为了说明这个问题，使用了一个未过滤的10X PBMC数据\n# 数据下载 library(BiocFileCache) bfc \u0026lt;- BiocFileCache(\u0026#34;raw_data\u0026#34;, ask = FALSE) raw.path \u0026lt;- bfcrpath(bfc, file.path(\u0026#34;http://cf.10xgenomics.com/samples\u0026#34;, \u0026#34;cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz\u0026#34;)) # 解压数据 untar(raw.path, exdir=file.path(tempdir(), \u0026#34;pbmc4k\u0026#34;)) library(DropletUtils) library(Matrix) fname \u0026lt;- file.path(tempdir(), \u0026#34;pbmc4k/raw_gene_bc_matrices/GRCh38\u0026#34;) sce.pbmc \u0026lt;- read10xCounts(fname, col.names=TRUE) sce.pbmc ## class: SingleCellExperiment ## dim: 33694 737280 ## metadata(1): Samples ## assays(1): counts ## rownames(33694): ENSG00000243485 ENSG00000237613 ... ENSG00000277475 ## ENSG00000268674 ## rowData names(2): ID Symbol ## colnames(737280): AAACCTGAGAAACCAT-1 AAACCTGAGAAACCGC-1 ... ## TTTGTCATCTTTAGTC-1 TTTGTCATCTTTCCTC-1 ## colData names(2): Sample Barcode ## reducedDimNames(0): ## altExpNames(0): 整体观察不同的barcodes（不一定都是真的细胞）的文库大小分布：\nbcrank \u0026lt;- barcodeRanks(counts(sce.pbmc)) # Only showing unique points for plotting speed. uniq \u0026lt;- !duplicated(bcrank$rank) plot(bcrank$rank[uniq], bcrank$total[uniq], log=\u0026#34;xy\u0026#34;, xlab=\u0026#34;Rank\u0026#34;, ylab=\u0026#34;Total UMI count\u0026#34;, cex.lab=1.2) abline(h=metadata(bcrank)$inflection, col=\u0026#34;darkgreen\u0026#34;, lty=2) abline(h=metadata(bcrank)$knee, col=\u0026#34;dodgerblue\u0026#34;, lty=2) legend(\u0026#34;bottomleft\u0026#34;, legend=c(\u0026#34;Inflection\u0026#34;, \u0026#34;Knee\u0026#34;), col=c(\u0026#34;darkgreen\u0026#34;, \u0026#34;dodgerblue\u0026#34;), lty=2, cex=1.2) 看到各个barcodes的文库大小有高有低，并且相差较大，因此可能对应着真实存在的细胞和空液滴。当然最简单的办法还是”一刀切“，留下那些文库较大的细胞，不过还是有损失真实细胞类型的风险\n检测空的液滴 我们使用emptyDrops()函数，检查每个barcode的表达量是不是和外源RNA的表达量有显著差异(Lun et al. 2019)。如果存在显著差异，就说明barcode中更有可能是一个细胞。这种方法可以帮助区分：测序质量好的空液滴 和 包含细胞但RNA含量较少的液滴。尽管它们总体的表达量可能很相似，但本质不同，还是要区分的。\nemptyDrops() 使用Monte Carlo统计模拟计算p值，如果要重复结果，需要设置随机种子。另外设置 false discovery rate (FDR)为0.1%，意味着不超过0.1%的barcodes是空的。\n","permalink":"http://localhost:1313/en/posts/tech/sc_qc/","summary":"动机 scRNA-seq数据的低质量文库可能来自于：细胞分选环节的破坏、文库制备失误（没有足够的反转录或PCR次数）… 表现在：细胞总表达量低、基本没有表达的基因、高线粒体或spike-in占比。 这些低质量的库是有问题的，因为它们可能在下游分析中导致误导的结果 。 聚类问题： 低质量的细胞","title":"scRNA的细胞质控"},{"content":"连续型数据 基于分布的检验 T检验 t.test(1:10, 10:20) ## ## Welch Two Sample t-test ## ## data: 1:10 and 10:20 ## t = -7, df = 19, p-value = 2e-06 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -12.4 -6.6 ## sample estimates: ## mean of x mean of y ## 5.5 15.0 配对 t 检验：\nt.test(rnorm(10), rnorm(10, mean = 1), paired = TRUE) ## ## Paired t-test ## ## data: rnorm(10) and rnorm(10, mean = 1) ## t = -2, df = 9, p-value = 0.03 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -1.981 -0.096 ## sample estimates: ## mean of the differences ## -1.04 使用公式表示：\ndf \u0026lt;- data.frame( value = c(rnorm(10), rnorm(10, mean = 1)), group = c(rep(\u0026#34;case\u0026#34;, 10), rep(\u0026#34;control\u0026#34;, 10)) ) t.test(value ~ group, data = df) ## ## Welch Two Sample t-test ## ## data: value by group ## t = -0.7, df = 18, p-value = 0.5 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -0.933 0.447 ## sample estimates: ## mean in group case mean in group control ## 0.539 0.782 假设方差同质化：\nt.test(value ~ group, data = df, var.equal = TRUE) ## ## Two Sample t-test ## ## data: value by group ## t = -0.7, df = 18, p-value = 0.5 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -0.933 0.447 ## sample estimates: ## mean in group case mean in group control ## 0.539 0.782 总体方差比较 var.test(value ~ group, data = df) ## ## F test to compare two variances ## ## data: value by group ## F = 0.8, num df = 9, denom df = 9, p-value = 0.8 ## alternative hypothesis: true ratio of variances is not equal to 1 ## 95 percent confidence interval: ## 0.202 3.269 ## sample estimates: ## ratio of variances ## 0.812 bartlett.test(value ~ group, data = df) ## ## Bartlett test of homogeneity of variances ## ## data: value by group ## Bartlett\u0026#39;s K-squared = 0.09, df = 1, p-value = 0.8 多个组间均值的比较 两组以上的比较要使用ANOVA\naov(wt ~ factor(cyl), data = mtcars) ## Call: ## aov(formula = wt ~ factor(cyl), data = mtcars) ## ## Terms: ## factor(cyl) Residuals ## Sum of Squares 18.2 11.5 ## Deg. of Freedom 2 29 ## ## Residual standard error: 0.63 ## Estimated effects may be unbalanced ## 查看详细的信息 model.tables(aov(wt ~ factor(cyl), data = mtcars)) ## Tables of effects ## ## factor(cyl) ## 4 6 8 ## -0.9315 -0.1001 0.782 ## rep 11.0000 7.0000 14.000 ANOVA 分析假设各组样本数据的方差是相等的，如果知道（或怀疑）不相等，可以使用 oneway.test() 函数。\noneway.test(wt ~ cyl, data = mtcars) ## ## One-way analysis of means (not assuming equal variances) ## ## data: wt and cyl ## F = 20, num df = 2, denom df = 19, p-value = 2e-05 多组样本的配对 t 检验 pairwise.t.test(mtcars$wt, mtcars$cyl) ## ## Pairwise comparisons using t tests with pooled SD ## ## data: mtcars$wt and mtcars$cyl ## ## 4 6 ## 6 0.01 - ## 8 6e-07 0.01 ## ## P value adjustment method: holm 正态性检验 shapiro.test(rnorm(30)) ## ## Shapiro-Wilk normality test ## ## data: rnorm(30) ## W = 1, p-value = 0.6 qqnorm(rnorm(30)) 分布的对称性检验 用 Kolmogorov-Smirnov 检验查看一个向量是否来自一个对称的分布（不限于正态分布）。\nks.test(rnorm(10), pnorm) ## ## One-sample Kolmogorov-Smirnov test ## ## data: rnorm(10) ## D = 0.3, p-value = 0.2 ## alternative hypothesis: two-sided 函数第 1 个参数指定待检验的数据，第 2个参数指定对称分布的类型，可以是数值型向量、指定概率分布函数的字符串或一个分布函数。\nks.test(rnorm(10), \u0026#34;pnorm\u0026#34;) ## ## One-sample Kolmogorov-Smirnov test ## ## data: rnorm(10) ## D = 0.3, p-value = 0.3 ## alternative hypothesis: two-sided ks.test(rpois(10, lambda = 1), \u0026#34;pnorm\u0026#34;) ## Warning in ks.test(rpois(10, lambda = 1), \u0026#34;pnorm\u0026#34;): ties should not be present for the ## Kolmogorov-Smirnov test ## ## One-sample Kolmogorov-Smirnov test ## ## data: rpois(10, lambda = 1) ## D = 0.5, p-value = 0.006 ## alternative hypothesis: two-sided 检验两个向量是否服从同一分布 ks.test(rnorm(20), rnorm(30)) ## ## Two-sample Kolmogorov-Smirnov test ## ## data: rnorm(20) and rnorm(30) ## D = 0.2, p-value = 0.4 ## alternative hypothesis: two-sided 相关性分析 cor.test(mtcars$mpg, mtcars$wt) ## ## Pearson\u0026#39;s product-moment correlation ## ## data: mtcars$mpg and mtcars$wt ## t = -10, df = 30, p-value = 1e-10 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.934 -0.744 ## sample estimates: ## cor ## -0.868 不依赖分布的检验 均值检验 Wilcoxon 检验是 t 检验的非参数版本\n## 秩和检验 wilcox.test(1:10, 10:20) ## Warning in wilcox.test.default(1:10, 10:20): cannot compute exact p-value with ties ## ## Wilcoxon rank sum test with continuity correction ## ## data: 1:10 and 10:20 ## W = 0.5, p-value = 1e-04 ## alternative hypothesis: true location shift is not equal to 0 ## 符号秩检验 wilcox.test(1:10, 10:19, paired = TRUE) ## Warning in wilcox.test.default(1:10, 10:19, paired = TRUE): cannot compute exact p-value with ## ties ## ## Wilcoxon signed rank test with continuity correction ## ## data: 1:10 and 10:19 ## V = 0, p-value = 0.002 ## alternative hypothesis: true location shift is not equal to 0 多均值比较 ## Kruskal-Wallis 秩和检验 kruskal.test(wt ~ factor(cyl), data = mtcars) ## ## Kruskal-Wallis rank sum test ## ## data: wt by factor(cyl) ## Kruskal-Wallis chi-squared = 23, df = 2, p-value = 1e-05 方差检验 使用Fligner-Killeen（中位数）检验完成不同组别的方差比较\nfligner.test(wt ~ cyl, data = mtcars) ## ## Fligner-Killeen test of homogeneity of variances ## ## data: wt by cyl ## Fligner-Killeen:med chi-squared = 0.5, df = 2, p-value = 0.8 离散数据 比例检验 使用 prop.test() 比较两组观测值发生的概率是否有差异。\nheads \u0026lt;- rbinom(1, size = 100, prob = .5) prop.test(heads, 100) ## ## 1-sample proportions test with continuity correction ## ## data: heads out of 100, null probability 0.5 ## X-squared = 2, df = 1, p-value = 0.1 ## alternative hypothesis: true p is not equal to 0.5 ## 95 percent confidence interval: ## 0.477 0.677 ## sample estimates: ## p ## 0.58 prop.test(heads, 100, p = 0.3, correct = FALSE) ## ## 1-sample proportions test without continuity correction ## ## data: heads out of 100, null probability 0.3 ## X-squared = 37, df = 1, p-value = 1e-09 ## alternative hypothesis: true p is not equal to 0.3 ## 95 percent confidence interval: ## 0.482 0.672 ## sample estimates: ## p ## 0.58 二项式检验 binom.test(c(682, 243), p = 3/4) ## ## Exact binomial test ## ## data: c(682, 243) ## number of successes = 682, number of trials = 925, p-value = 0.4 ## alternative hypothesis: true probability of success is not equal to 0.75 ## 95 percent confidence interval: ## 0.708 0.765 ## sample estimates: ## probability of success ## 0.737 列联表 确定两个分类变量是否相关\nFisher精确检验 TeaTasting \u0026lt;- matrix(c(3, 1, 1, 3), nrow = 2, dimnames = list(Guess = c(\u0026#34;Milk\u0026#34;, \u0026#34;Tea\u0026#34;), Truth = c(\u0026#34;Milk\u0026#34;, \u0026#34;Tea\u0026#34;))) fisher.test(TeaTasting, alternative = \u0026#34;greater\u0026#34;) ## ## Fisher\u0026#39;s Exact Test for Count Data ## ## data: TeaTasting ## p-value = 0.2 ## alternative hypothesis: true odds ratio is greater than 1 ## 95 percent confidence interval: ## 0.314 Inf ## sample estimates: ## odds ratio ## 6.41 当样本数比较多时，使用卡方检验代替\nchisq.test(TeaTasting) ## Warning in chisq.test(TeaTasting): Chi-squared approximation may be incorrect ## ## Pearson\u0026#39;s Chi-squared test with Yates\u0026#39; continuity correction ## ## data: TeaTasting ## X-squared = 0.5, df = 1, p-value = 0.5 对于三变量的混合影响，使用 Cochran-Mantel-Haenszel 检验。\nRabbits \u0026lt;- array(c(0, 0, 6, 5, 3, 0, 3, 6, 6, 2, 0, 4, 5, 6, 1, 0, 2, 5, 0, 0), dim = c(2, 2, 5), dimnames = list( Delay = c(\u0026#34;None\u0026#34;, \u0026#34;1.5h\u0026#34;), Response = c(\u0026#34;Cured\u0026#34;, \u0026#34;Died\u0026#34;), Penicillin.Level = c(\u0026#34;1/8\u0026#34;, \u0026#34;1/4\u0026#34;, \u0026#34;1/2\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;4\u0026#34;))) Rabbits ## , , Penicillin.Level = 1/8 ## ## Response ## Delay Cured Died ## None 0 6 ## 1.5h 0 5 ## ## , , Penicillin.Level = 1/4 ## ## Response ## Delay Cured Died ## None 3 3 ## 1.5h 0 6 ## ## , , Penicillin.Level = 1/2 ## ## Response ## Delay Cured Died ## None 6 0 ## 1.5h 2 4 ## ## , , Penicillin.Level = 1 ## ## Response ## Delay Cured Died ## None 5 1 ## 1.5h 6 0 ## ## , , Penicillin.Level = 4 ## ## Response ## Delay Cured Died ## None 2 0 ## 1.5h 5 0 mantelhaen.test(Rabbits) ## ## Mantel-Haenszel chi-squared test with continuity correction ## ## data: Rabbits ## Mantel-Haenszel X-squared = 4, df = 1, p-value = 0.05 ## alternative hypothesis: true common odds ratio is not equal to 1 ## 95 percent confidence interval: ## 1.03 47.73 ## sample estimates: ## common odds ratio ## 7 列联表非参数检验 Friedman 秩和检验是一个非参数版本的双边 ANOVA 检验。\n## Hollander \u0026amp; Wolfe (1973), p. 140ff. ## Comparison of three methods (\u0026#34;round out\u0026#34;, \u0026#34;narrow angle\u0026#34;, and ## \u0026#34;wide angle\u0026#34;) for rounding first base. For each of 18 players ## and the three method, the average time of two runs from a point on ## the first base line 35ft from home plate to a point 15ft short of ## second base is recorded. RoundingTimes \u0026lt;- matrix(c(5.40, 5.50, 5.55, 5.85, 5.70, 5.75, 5.20, 5.60, 5.50, 5.55, 5.50, 5.40, 5.90, 5.85, 5.70, 5.45, 5.55, 5.60, 5.40, 5.40, 5.35, 5.45, 5.50, 5.35, 5.25, 5.15, 5.00, 5.85, 5.80, 5.70, 5.25, 5.20, 5.10, 5.65, 5.55, 5.45, 5.60, 5.35, 5.45, 5.05, 5.00, 4.95, 5.50, 5.50, 5.40, 5.45, 5.55, 5.50, 5.55, 5.55, 5.35, 5.45, 5.50, 5.55, 5.50, 5.45, 5.25, 5.65, 5.60, 5.40, 5.70, 5.65, 5.55, 6.30, 6.30, 6.25), nrow = 22, byrow = TRUE, dimnames = list(1 : 22, c(\u0026#34;Round Out\u0026#34;, \u0026#34;Narrow Angle\u0026#34;, \u0026#34;Wide Angle\u0026#34;))) friedman.test(RoundingTimes) ## ## Friedman rank sum test ## ## data: RoundingTimes ## Friedman chi-squared = 11, df = 2, p-value = 0.004 ","permalink":"http://localhost:1313/en/posts/read/r_stat/","summary":"连续型数据 基于分布的检验 T检验 t.test(1:10, 10:20) ## ## Welch Two Sample t-test ## ## data: 1:10 and 10:20 ## t = -7, df = 19, p-value = 2e-06 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -12.4 -6.6 ## sample estimates: ## mean of x mean of y ## 5.5 15.0 配对 t 检验： t.test(rnorm(10), rnorm(10, mean = 1), paired = TRUE) ## ## Paired t-test ## ## data: rnorm(10) and rnorm(10, mean = 1) ## t = -2, df = 9, p-value = 0.03 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -1.981 -0.096 ## sample estimates: ## mean of the differences ## -1.04 使","title":"R 语言统计检验函数汇总"},{"content":"背景 Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。\nDocker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。\nDocker的应用场景 Web 应用的自动化打包和发布。 自动化测试和持续集成、发布。 在服务型环境中部署和调整数据库或其他的后台应用。 从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。 docker 安装 Docker 的旧版本被称为 docker，docker.io 或 docker-engine 。如果已安装，请卸载它们：\nsudo apt-get remove docker docker-engine docker.io containerd runc 首先安装依赖:\nsudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common 添加信任 Docker 的 GPG 公钥:\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 对于 amd64 架构的计算机，添加软件仓库:\nsudo add-apt-repository \\ \u0026#34;deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \\ $(lsb_release -cs) \\ stable\u0026#34; 最后安装\nsudo apt-get update sudo apt-get install docker-ce docker --version ## Docker version 19.03.11, build 42e35e61f3 Hello world Docker 允许你在容器内运行应用程序， 使用 docker run 命令来在容器内运行一个应用程序。\ndocker run ubuntu:15.10 /bin/echo \u0026#34;Hello world\u0026#34; ## hello world 参数解析：\ndocker : Docker 的执行命令 run : 与docker命令组合运行一个特定的容器 ubuntu:15.10 : 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。 /bin/echo \u0026ldquo;Hello world\u0026rdquo; : 在启动的容器里执行的命令 连起来就是：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo \u0026quot;Hello world\u0026quot;，然后输出结果。\n交互运行 ubuntu@VM-0-11-ubuntu:~$ sudo docker run -i -t ubuntu:15.10 /bin/bash root@2401df9ef044:/# -t: 在新容器内指定一个伪终端或终端。 -i: 允许你对容器内的标准输入进行交互。 通过运行 exit 命令或者使用 CTRL+D 来退出容器。\n后台运行 ubuntu@VM-0-11-ubuntu:~$ sudo docker run -d ubuntu:15.10 /bin/sh -c \u0026#34;while true; do echo hello world; sleep 1; done\u0026#34; 9db349c972802d3a7627b27d3c9eb0c58888ad0c80a001b5d7e6f08813eed876 输出的长字符串叫做容器 ID，对每个容器来说都是唯一的，我们可以通过容器 ID 来查看对应的容器发生了什么\n可以通过 docker ps 来查看容器的运行情况\nubuntu@VM-0-11-ubuntu:~$ sudo docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 9db349c97280 ubuntu:15.10 \u0026#34;/bin/sh -c \u0026#39;while t…\u0026#34; 11 seconds ago Up 10 seconds tender_black 输出详情介绍:\nCONTAINER ID: 容器 ID。 IMAGE: 使用的镜像。 COMMAND: 启动容器时运行的命令。 CREATED: 容器的创建时间。 STATUS: 容器状态。 PORTS: 容器的端口信息和使用的连接类型（tcp\\udp）。 NAMES: 自动分配的容器名称。 docker 运行有七种状态\ncreated（已创建） restarting（重启中） running（运行中） removing（迁移中） paused（暂停） exited（停止） dead（死亡） 使用docker logs查看输出结果\nubuntu@VM-0-11-ubuntu:~$ sudo docker logs tender_black hello world 使用docker stop停止容器\nubuntu@VM-0-11-ubuntu:~$ sudo docker stop tender_black tender_black docker 用户 docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。\n解决方案：\n使用sudo获取管理员权限，运行docker命令 docker守护进程启动的时候，会默认赋予名字为docker的用户组读写Unix socket的权限，因此只要创建docker用户组，并将当前用户加入到docker用户组中，那么当前用户就有权限访问Unix socket了，进而也就可以执行docker相关命令 sudo groupadd docker #添加docker用户组 sudo gpasswd -a $USER docker #将登陆用户加入到docker用户组中 newgrp docker #更新用户组 docker ps #测试docker命令是否可以使用sudo正常使用 基本概念 Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。 Docker 镜像 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。\n容器（Container）是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库（Repository）是用于储存镜像的地址。镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 \u0026lt;仓库名\u0026gt;:\u0026lt;标签\u0026gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以latest作为默认标签。 ","permalink":"http://localhost:1313/en/posts/tech/docker_1/","summary":"背景 Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 Docker的应用场景 Web 应用的自动化打包和发布。 自动化测试和持续集成、发布。 在服务型环境中部署和调整数据","title":"Docker | 安装与运行"},{"content":"Ensembl ID 辨识 例如ENSG00000279928.1中，ENS是固定字符，表示它是属于Ensembl数据库的。默认物种是人，如果是小鼠就要用ENSMUS开头，关于物种代码：http://www.ensembl.org/info/genome/stable_ids/index.html G表示：这个ID指向一个基因；E指向Exon；FM指向 protein family；GT指向gene tree；P指向protein；R指向regulary feature；T指向transcript 后面11位数字部分如00000279928 表示基因真正的编号 小数点后不一定每个都有，表示这个ID在数据库中做了几次变更，比如.1做了1次变更，在分析时需要去除 Ensembl ID 与 Symbol对应关系 一对多 在转换时会存在一个Ensembl ID对应多个Symbol的现象。此时，为了保证ID转换的准确性，需要对这些ID进行专门的转换，可以更换注释资源进行操作\n不同的注释资源之间会有差别，有时并不可靠\n多对一 同样，会存在一些Ensembl ID对应同一个Symbol，此时，除了其中一个真正对应的外，其他的可以叫做haplotypic regions。像这样的ID需要检查ENSG对应的染色体位置进行辨别\nHaplotyptic regions are defined by the Genome Reference Consortium (GRC) and are visible on all their genome assemblies for human, mouse, and zebrafish. They can also be called ‘alternate locus’, ‘partial chromosomes’, and ‘alternate alleles’ or ‘assembly exceptions’.\nThese regions can have small sequence differences, contain different gene structures or different genes entirely, or contain genes in a different order compared to the reference genome assembly.\n注释途径 bitr biomart ","permalink":"http://localhost:1313/en/posts/tech/id_convert/","summary":"Ensembl ID 辨识 例如ENSG00000279928.1中，ENS是固定字符，表示它是属于Ensembl数据库的。默认物种是人，如果是小鼠就要用ENSMUS开头，关于物种代码：http://www.ensembl.org/info/genome/stable_ids/index.html G","title":"基因ID转换相关知识"},{"content":"前言 使用hexo + github pages 搭建博客的好处:\n全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台 准备工作 有一个github账号，没有的话去注册一个；\n安装了node.js、npm\n安装了git\n本文环境：\nWindows 10 hexo: 4.1.1 node: 12.13.1 git: 2.24.0\n创建github仓库 创建仓库 新建一个名为你的用户名.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了\n由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。\n几个注意的地方：\n注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：username.github.io，其中username是你的用户名； 创建成功后，以后博客所有代码都是放在这个仓库里了\n配置SSH key 配置ssh密钥是为了能够将本地仓库连接到github，详情请见：同一电脑配置多个Github账户\n测试是否连接成功 使用命令行\nssh -T git@github.com # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：\nHi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.\n搭建hexo博客 hexo简介 Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式，有众多优秀插件和主题。\n官网： http://hexo.io\ngithub: https://github.com/hexojs/hexo\n原理 由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。\n安装 注意事项 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行 hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的_config.yml。为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件 安装hexo npm install -g hexo 初始化 在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是F:\\Workspaces\\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。\nhexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图:\n. ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes hexo g # 生成 hexo s # 启动服务 执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：\nhexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容\n主题 更改主题 默认主题很丑，那我们别的不做，首先来替换一个好看点的主题\n官方主题\n首先下载主题\ncd /f/Workspaces/hexo/ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 下载以后的主题全在theme文件夹下边\n打开根目录下站点配置文件_config.yml， 找到 theme 字段，并将其值更改为 next, 然后重新执行hexo g来重新生成。\n如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。\ngithub上传 如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。\n首先，ssh key肯定要配置好。其次，配置站点配置文件_config.yml中有关deploy的部分:\ndeploy: type: git repo: https://github.com/Jeason-Zhao/Jeason-Zhao.github.io.git branch: master 注意：最新版本一定要是这种格式\n最后需要安装一个插件:\nnpm install hexo-deployer-git --save 打开git bash，输入hexo d就会将本次有改动的代码全部提交，没有改动的不会\n保留CNAME、README.md等文件 hexo默认会把所有md文件都转换成html，包括README.md，所以在上传之前配置站点配置文件_config.yml的skip_render部分：\nskip_render: README.md 这样就会跳过该文件。\n常用hexo命令 hexo new \u0026#34;postName\u0026#34; #新建文章 hexo new page \u0026#34;pageName\u0026#34; #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，\u0026#39;ctrl + c\u0026#39;关闭server） hexo deploy #部署到GitHub hexo help # 查看帮助 hexo version #查看Hexo的版本 缩写：\nhexo n == hexo new hexo g == hexo generate hexo s == hexo server hexo d == hexo deploy 组合命令：\nhexo s -g #生成并本地预览 hexo d -g #生成并上传 写博客 写博客 定位到我们的hexo根目录，执行命令：\nhexo new \u0026#39;my-first-blog\u0026#39; hexo会帮我们在_posts下生成相关md文件：\n我们只需要打开这个文件就可以开始写博客了，\n当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。一般完整格式如下：\n--- title: postName #文章页面上的显示名称，一般是中文 date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改 categories: 默认分类 #分类 tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格 description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面 --- 以下是正文 新建页面 假如我新建一个名字为about的页面：\nhexo new page \u0026#34;about\u0026#34; 在source文件夹下，将生成about文件夹\n部署后将在public文件夹生成一个新的html页面：hexo\\public\\about\\index.html，通过访问https://用户名.github.io/about/访问这个页面：\n","permalink":"http://localhost:1313/en/posts/blog/hexo/","summary":"前言 使用hexo + github pages 搭建博客的好处: 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都","title":"hexo 博客搭建"},{"content":"规范的编程格式既可以使代码更加整洁，又能帮助别人理解使用代码，下面是在使用shell脚本的过程中涉及到的一些代码编程规范\n命名 命名只能使用字母,数字和下划线,首个字符不能以数字开头。 中间不能有空格,不能使用标点符号,不能使用汉字,可以使用下划线 _ ,所以我们往往使用 _ 作为分词的标识 例如 user_name、city_id 等 不能使用bash里的关键字(可用help命令查看保留关键字) 脚本中的所有变量风格统一使用下划线命名风格 目前关于命名使用较多的两种方式是驼峰式 和 下划线式，两种命名规则见仁见智\nlocal userName=\u0026#34;Jeason\u0026#34; local user_name=\u0026#34;Jeason\u0026#34; function log_info(){ # todo } function logInfo(){ # todo } function get_user_info(){ # todo } function getUserInfo(){ # todo } 首行 推荐使用#!/usr/bin/env bash，自动检测shell环境\n注释 除脚本首行外,所有以 # 开头的语句都将成为注释。 函数必须有注释标识该函数的用途、入参变量、函数的返回值类型,且必须简单在一行内写完。 函数的注释 # 顶格写, 井号后面紧跟一个空格 ,对于该格式的要求是为了最后生成函数的帮助文档是用的(markdown语法),然后是注释的内容,注释尽量简短且在一行,最后跟的是函数的类型。 函数内注释 # 与缩进格式对整齐。 变量的注释紧跟在变量的后面 # 主函数 []\u0026lt;-() \u0026lt;-------函数注释这样写 function main(){ local var=\u0026#34;Hello World!!!\u0026#34; echo ${var} } # info级别的日志 []\u0026lt;-(msg:String) \u0026lt;-------带入参的函数注释 log_info(){ echo \u0026#34;[$(date +\u0026#39;%Y-%m-%dT%H:%M:%S%z\u0026#39;)][$$]: [info] $*\u0026#34; \u0026gt;\u0026amp;2 } # error级别的日志 []\u0026lt;-(msg:String) \u0026lt;-------带入参的函数注释 log_error(){ # todo [error]用红色显示 \u0026lt;------函数内注释 local msg=$1 # 将要输出的日志内容 \u0026lt;------变量的注释紧跟在变量的后面 if [[ x\u0026#34;${msg}\u0026#34; != x\u0026#34;\u0026#34; ]];then # 注释 \u0026lt;-------函数内注释 `#` 与缩进格式对整齐 echo \u0026#34;[$(date +\u0026#39;%Y-%m-%dT%H:%M:%S%z\u0026#39;)][$$]:[error] $*\u0026#34; \u0026gt;\u0026amp;2 fi } 缩进 使用两个空格进行缩进,不适用tab缩进 不在一行的时候使用 \\ 进行换行,使用 \\ 换行的原则是整齐美观 #!/usr/bin/env bash # 脚本使用帮助文档 []\u0026lt;-() manual(){ cat \u0026#34;$0\u0026#34;|grep -v \u0026#34;less \\\u0026#34;\\$0\\\u0026#34;\u0026#34; \\ |grep -B1 \u0026#34;function \u0026#34; \\ |grep -v \u0026#34;\\\\--\u0026#34; \\ |sed \u0026#34;s/function //g\u0026#34; \\ |sed \u0026#34;s/(){//g\u0026#34; \\ |sed \u0026#34;s/#//g\u0026#34; \\ |sed \u0026#39;N;s/\\n/ /\u0026#39; \\ |column -t \\ |awk \u0026#39;{print $1,$3,$2}\u0026#39; \\ |column -t } function search_user_info(){ local result=$(httpclient_get --cookie \u0026#34;${cookie}\u0026#34; \\ \u0026#34;${url}/userName=${user_name}\u0026#34;) } 变量 变量赋值使用 = 等号,左右不能留有空格 使用变量的值用 $ 取值符号 使用变量的时候,变量名一定要用 {} 包裹 使用变量的时候一定要用 双引号 \u0026quot;${}\u0026quot; 包裹 var1=\u0026#34;Hello World\u0026#34; #正确,推荐使用双引号 var2=\u0026#39;Hello World\u0026#39; #正确,不推荐使用单引号 var3=\u0026#34;${var1}\u0026#34; #应用前面定义的变量的时候也要使用双引号包裹 var4=6 var5=6.70 #小数 var3=${var1} #正确,不推荐 常量一定要定义成readonly,这种变量不能使用source跨shell使用 函数中的变量要用local修饰,定义成局部变量,这样在外部遇到重名的变量也不会影响 变量一经定义,不允许删除 变量类型 定义在函数中的我们称之为函数局部变量;定义在函数外部，shell脚本中变量我们称之为脚本全局变量 环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。 函数 函数定义形式：\nfunction main(){ #函数执行的操作 #函数的返回结果 } 或\nmain(){ #函数执行的操作 #函数的返回结果 } 使用关键字 function 显示定义的函数为 public 的函数,可以供 外部脚本以 sh 脚本 函数 函数入参 的形式调用 未使用关键字 function 显示定义的函数为 privat 的函数, 仅供本脚本内部调用,注意这种privat是人为规定的,并不是shell的语法,不推荐以 sh 脚本 函数 函数入参 的形式调用,注意是不推荐而不是不能。 在函数内部首先使用有意义的变量名接受参数,然后在使用这些变量进行操作,禁止直接操作$1,$2 等，除非这些变量只用一次 函数的注释 函数类型的概念是从函数编程语言中的概念偷过来的,shell函数的函数类型指的是函数的输入到函数的输入的映射关系\n# 主函数 []\u0026lt;-() \u0026lt;-------函数注释这样写 function main(){ local var=\u0026#34;Hello World!!!\u0026#34; echo ${var} } # info级别的日志 []\u0026lt;-(msg:String) \u0026lt;-------带入参的函数注释 log_info(){ echo \u0026#34;[$(date +\u0026#39;%Y-%m-%dT%H:%M:%S%z\u0026#39;)][$$]: [info] $*\u0026#34; \u0026gt;\u0026amp;2 } main函数的函数类型是 []\u0026lt;-() , \u0026lt;- 左侧表的是函数的返回值类型 用[]包裹, 右侧是函数的参数类型 用()包裹,多个参数用 , 分隔,参数的描述是从 Scala 语言中偷过来, 先是参数名称 然后是参数类型 中间用:分隔\n对于main函数的注释来说, # 顶格写,后面紧跟一个空格,其实这样写是遵循的markdown的语法, 后面再跟一个空格,然后是 []\u0026lt;-(),代表这个函数没有入参也没有返回值,这个函数的目的就是执行这个这个函数中的命令,但我不关心这个函数的返回值。也就是利用函数的副作用来完成我们想要的操作\n对于log_info 也是一样 不过 最后的函数类型是 []\u0026lt;-(msg:String) 代表入参是一个string类型的信息,然后也没有返回值。关于函数的返回值,我理解的函数的返回值有两种形式,一种是显示的return一种是隐式的echo\n返回值 显式return 明确返回结果是在[0-255]之间的数值类型的时候使用显示 reuturn 返回结果 返回结果类型是Boolean类型,也就是说函数的功能是起判断作用,返回结果是真或者假的时候使用显示 return 返回结果 隐式echo 其他形式的输出使用echo\n循环分支 if if [[ condition ]]; then # statements fi if [[ condition ]]; then # statements else # statements fi if [[ condition ]]; then # statements elif [[ condition ]]; then # statements else # statements fi if 后面的判断 使用 双中括号[[]] if [[ condition ]]; then 写在一行 while while [[ condition ]]; do # statements done while read -r item ;do # statements done \u0026lt; \u0026#39;file_name\u0026#39; until until [[ condition ]]; do # statements done for for (( i = 0; i \u0026lt; 10; i++ )); do # statements done for item in ${array}; do # statements done case case word in pattern ) #statements ;; *) #statements ;; esac Reference Shell编程规范\u0026ndash;简书\n","permalink":"http://localhost:1313/en/posts/read/shell_format/","summary":"规范的编程格式既可以使代码更加整洁，又能帮助别人理解使用代码，下面是在使用shell脚本的过程中涉及到的一些代码编程规范 命名 命名只能使用字母,数字和下划线,首个字符不能以数字开头。 中间不能有空格,不能使用标点符号,不能使用汉字,可以使用下划线 _ ,所以我们往往使用 _ 作为分词的标识 例","title":"Shell编程规范"},{"content":"高通量测序技术（High-throughput sequencing，HTS）是对传统Sanger测序（称为一代测序技术）革命性的改变,一次对几十万到几百万条核酸分子进行序列测定, 因此在有些文献中称其为下一代测序技术(next generation sequencing，NGS )足见其划时代的改变, 同时高通量测序使得对一个物种的转录组和基因组进行细致全貌的分析成为可能, 所以又被称为深度测序(Deep sequencing)。\n什么是Sanger法测序（一代测序） Sanger法测序利用一种DNA聚合酶来延伸结合在待定序列模板上的引物。直到掺入一种链终止核苷酸为止。每一次序列测定由一套四个单独的反应构成，每个反应含有所有四种脱氧核苷酸三磷酸(dNTP)，并混入限量的一种不同的双脱氧核苷三磷酸(ddNTP)。由于ddNTP缺乏延伸所需要的3-OH基团，使延长的寡聚核苷酸选择性地在G、A、T或C处终止。终止点由反应中相应的双脱氧而定。每一种dNTPs和ddNTPs的相对浓度可以调整，使反应得到一组长几百至几千碱基的链终止产物。它们具有共同的起始点，但终止在不同的的核苷酸上，可通过高分辨率变性凝胶电泳分离大小不同的片段，凝胶处理后可用X-光胶片放射自显影或非同位素标记进行检测。\n什么是基因组重测序（Genome Re-sequencing） 全基因组重测序是对基因组序列已知的个体进行基因组测序，并在个体或群体水平上进行差异性分析的方法。随着基因组测序成本的不断降低，人类疾病的致病突变研究由外显子区域扩大到全基因组范围。通过构建不同长度的插入片段文库和短序列、双末端测序相结合的策略进行高通量测序，实现在全基因组水平上检测疾病关联的常见、低频、甚至是罕见的突变位点，以及结构变异等，具有重大的科研和产业价值。\n什么是de novo测序 de novo测序也称为从头测序：其不需要任何现有的序列资料就可以对某个物 种进行测序，利用生物信息学分析手段对序列进行拼接，组装，从而获得该物种的基因组图谱。获得一个物种的全基因组序列是加快对此物种了解的重要捷径。随着新一代测序技术的飞速发展，基因组测序所需的成本和时间较传统技术都大大降低，大规模基因组测序渐入佳境，基因组学研究也迎来新的发展契机和革命性突破。利用新一代高通量、高效率测序技术以及强大的生物信息分析能力，可以高效、低成本地测定并分析所有生物的基因组序列。\n什么是外显子测序（whole exon sequencing） 外显子组测序是指利用序列捕获技术将全基因组外显子区域DNA捕捉并富集后进行高通量测序的基因组分析方法。外显子测序相对于基因组重测序成本较低，对研究已知基因的SNP、Indel等具有较大的优势，但无法研究基因组结构变异如染色体断裂重组等。\n什么是mRNA测序 （RNA-seq） 转录组学（transcriptomics）是在基因组学后新兴的一门学科，即研究特定细胞在某一功能状态下所能转录出来的所有RNA（包括mRNA和非编码RNA）的类型与拷贝数。Illumina提供的mRNA测序技术可在整个mRNA领域进行各种相关研究和新的发现。mRNA测序不对引物或探针进行设计，可自由提供关于转录的客观和权威信息。研究人员仅需要一次试验即可快速生成完整的poly-A尾的RNA完整序列信息，并分析基因表达、cSNP、全新的转录、全新异构体、剪接位点、等位基因特异性表达和罕见转录等最全面的转录组信息。简单的样品制备和数据分析软件支持在所有物种中的mRNA测序研究。\n什么是Chip-seq 染色质免疫共沉淀技术（ChromatinImmunoprecipitation，ChIP）也称结合位点分析法，是研究体内蛋白质与DNA相互作用的有力工具，通常用于转录因子结合位点或组蛋白特异性修饰位点的研究。将ChIP与第二代测序技术相结合的ChIP-Seq技术，能够高效地在全基因组范围内检测与组蛋白、转录因子等互作的DNA区段。 ChIP-Seq的原理是：首先通过染色质免疫共沉淀技术（ChIP）特异性地富集目的蛋白结合的DNA片段，并对其进行纯化与文库构建；然后对富集得到的DNA片段进行高通量测序。研究人员通过将获得的数百万条序列标签精确定位到基因组上，从而获得全基因组范围内与组蛋白、转录因子等互作的DNA区段信息。\n单核苷酸多态性 个体间基因组DNA序列同一位置单个核苷酸变异(替代、插入或缺失)所引起的多态性。不同物种、个体基因组DNA序列同一位置上的单个核苷酸存在差别的现象。有这种差别的基因座、DNA序列等可作为基因组作图的标志。人基因组上平均约每1000个核苷酸即可能出现1个单核苷酸多态性的变化，其中有些单核苷酸多态性可能与疾病有关，但可能大多数与疾病无关。单核苷酸多态性是研究人类家族和动植物品系遗传变异的重要依据。在研究癌症基因组变异时，相对于正常组织，癌症中特异的单核苷酸变异是一种体细胞突变（somatic mutation），称做SNV。\n什么是copy number variation （CNV） 基因组拷贝数变异是基因组变异的一种形式，通常使基因组中大片段的DNA形成非正常的拷贝数量。例如人类正常染色体拷贝数是2，有些染色体区域拷贝数变成1或3，这样，该区域发生拷贝数缺失或增加，位于该区域内的基因表达量也会受到影响。如果把一条染色体分成A-B-C-D四个区域，则A-B-C-C-D/A-C-B-C-D/A-C-C-B-C-D/A-B-D分别发生了C区域的扩增及缺失，扩增的位置可以是连续扩增如A-B-C-C-D也可以是在其他位置的扩增，如A-C-B-C-D。\n什么是structure variation （SV） 染色体结构变异是指在染色体上发生了大片段的变异。主要包括染色体大片段的插入和缺失（引起CNV的变化），染色体内部的某块区域发生翻转颠换，两条染色体之间发生重组（inter-chromosome trans-location）等。一般SV的展示利用Circos 软件。\n什么是RPKM、FPKM RPKM,Reads Per Kilobase of exon model per Million mapped reads, is defined in this way [Mortazavi etal., 2008]: 每1百万个map上的reads中map到外显子的每1K个碱基上的reads个数。\nFPKM(fragments per kilobase of exon per million fragments mapped). FPKM与RPKM计算方法基本一致。不同点就是FPKM计算的是fragments，而RPKM计算的是reads。Fragment比read的含义更广，因此FPKM包含的意义也更广，可以是pair-end的一个fragment，也可以是一个read。\nMAPQ值 MAPQ（Mapping Qualities） 是用来表示每条read的比对情况的质量值，MAPQ越高，表示比对质量越好，说明该read比对到参考基因组上的位置越唯一。\n根据SAM文件的官方定义：根据SAM文件的官方定义：MAPQ是mapping的质量值，计算方法与FASTQ的质量值类似。\nMAPQ=-10 * log10{mapping出错的概率}\n当MAPQ=255的时候，代表MAPQ没有意义，就是一个占位符。\n从概率的角度来看，每个read的比对都是一个真实比对的估计，它是一个随机变量，也有可能存在错误。错误的概率可以用 Phred 来衡量。一般来讲，在比对的时候，我们需要把MAPQ质量过低的reads去掉，会将mQ的值设为30，这样就相当于将比对错误率设为0.1%\n基因组重复区域MAPQ会比较低，因为会出现multiple mapping 和 reads聚集的情况；\nread 中碱基质量值，低质量值的碱基意味着序列很可能是错误的，错误的序列可能会导致错误的比对，所以MAPQ会低；\n","permalink":"http://localhost:1313/en/posts/tech/ngs/","summary":"高通量测序技术（High-throughput sequencing，HTS）是对传统Sanger测序（称为一代测序技术）革命性的改变,一次对几十万到几百万条核酸分子进行序列测定, 因此在有些文献中称其为下一代测序技术(next generation sequencing，NGS )足见其划时代的改变, 同时","title":"高通量测序常用概念"},{"content":"SRAtoolkit是NCBI开发的一个用于SRA文件处理的软件包，包含许多有用的工具。\n下载SRAtoolkit软件包 软件包下载地址在NCBI网站：https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software\n目前最新版是2.10.8；有多个操作系统版本，我们选Ubuntu 64bit版；\nwget -P ~/download https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/2.10.8/sratoolkit.2.10.8-ubuntu64.tar.gz 解压压缩包 tar zvxf ~/download/sratoolkit.2.10.8-ubuntu64.tar.gz -C ~/software mv ~/software/sratoolkit.2.10.8-ubuntu64 ~/software/sratoolkit 将sratoolkit安装文件路径加入环境变量 echo \u0026#34;export PATH=$PATH:/home/ubuntu/software/sratoolkit/bin\u0026#34; \u0026gt;\u0026gt; ~/.zshrc source ~/.zshrc 使用fastq-dump和prefetch进行测试\n更详细步骤和说明，参见官网Documentation： https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=toolkit_doc\u0026f=std\n下载SRA文件 prefetch SRR10107270 2020-10-03T06:03:13 prefetch.2.9.6: 1) Downloading \u0026#39;SRR10107270\u0026#39;... 2020-10-03T06:03:13 prefetch.2.9.6: Downloading via https... 2020-10-03T06:09:01 prefetch.2.9.6: https download succeed 2020-10-03T06:09:01 prefetch.2.9.6: 1) \u0026#39;SRR10107270\u0026#39; was downloaded successfully 2020-10-03T06:09:01 prefetch.2.9.6: \u0026#39;SRR10107270\u0026#39; has 0 unresolved dependencies 解压SRA文件 for i in *sra do echo $i fastq-dump --split-3 $i done 查看文件 ls SRR10107270_1.fastq SRR10107270_2.fastq SRR10107270.sra head SRR10107270_1.fastq @SRR10107270.1 1 length=72 TCGGGNAGTGCTAGCTCGCGATTCCAGGATGTAGTTAACCTTGAGCACAATTTCATTGACGNNAGCAGCNNN +SRR10107270.1 1 length=72 AAAAA#EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE##EEEEEE### @SRR10107270.2 2 length=76 CATGTNATTGTTGTAGGAATCAAAGTCAAACACATTTCGAACTACACTGGAGAGACCTTCANNCGGAAANTNNNGT +SRR10107270.2 2 length=76 AAAAA#EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEAEEEEEEEEEEEEE/EEEEEE##EEEEEA#E###EE @SRR10107270.3 3 length=76 AGACGNTGGAGGATGAAGGGCTGGCTGTTGGGTCTGTTCTTGCTCTAAGGCCACATCCTAGNAAAGCAGGGNNNGT 可以看到测序read的读长是七十多bp\n","permalink":"http://localhost:1313/en/posts/tech/sratools/","summary":"SRAtoolkit是NCBI开发的一个用于SRA文件处理的软件包，包含许多有用的工具。 下载SRAtoolkit软件包 软件包下载地址在NCBI网站：https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software 目前最","title":"SRAtoolkit 安装与使用"},{"content":"记录一下找到的linux可用的百度云下载工具，项目地址：https://github.com/iikira/BaiduPCS-Go\n直接下载文件解压，进入文件夹，命令行下运行：\n./BaiduPCS-Go 即可进入BaiduPCS-Go的加护界面，使用help命令查看相关命令。\n初级使用教程 新手建议: 双击运行程序, 进入仿 Linux shell 的 cli 交互模式;\ncli交互模式下, 光标所在行的前缀应为 BaiduPCS-Go \u0026gt;, 如果登录了百度帐号则格式为 BaiduPCS-Go:\u0026lt;工作目录\u0026gt; \u0026lt;百度ID\u0026gt;$ 以下例子的命令, 均为 cli交互模式下的命令\n运行命令的正确操作: 输入命令, 按一下回车键 (键盘上的 Enter 键), 程序会接收到命令并输出结果\n1. 查看程序使用说明 cli交互模式下, 运行命令 help\n2. 登录百度帐号 (必做) cli交互模式下, 运行命令 login -h (注意空格) 查看帮助\ncli交互模式下, 运行命令 login 程序将会提示你输入百度用户名(手机号/邮箱/用户名)和密码, 必要时还可以在线验证绑定的手机号或邮箱\n3. 切换网盘工作目录 cli交互模式下, 运行命令 cd /我的资源 将工作目录切换为 /我的资源 (前提: 该目录存在于网盘)\n目录支持通配符匹配, 所以你也可以这样: 运行命令 cd /我的* 或 cd /我的?? 将工作目录切换为 /我的资源, 简化输入.\n将工作目录切换为 /我的资源 成功后, 运行命令 cd .. 切换上级目录, 即将工作目录切换为 /\n为什么要这样设计呢, 举个例子,\n假设 你要下载 /我的资源 内名为 1.mp4 和 2.mp4 两个文件, 而未切换工作目录, 你需要依次运行以下命令:\nd /我的资源/1.mp4 d /我的资源/2.mp4 而切换网盘工作目录之后, 依次运行以下命令:\ncd /我的资源 d 1.mp4 d 2.mp4 这样就达到了简化输入的目的\n4. 网盘内列出文件和目录 cli交互模式下, 运行命令 ls -h (注意空格) 查看帮助\ncli交互模式下, 运行命令 ls 来列出当前所在目录的文件和目录\ncli交互模式下, 运行命令 ls /我的资源 来列出 /我的资源 内的文件和目录\ncli交互模式下, 运行命令 ls .. 来列出当前所在目录的上级目录的文件和目录\n5. 下载文件 说明: 下载的文件默认保存到 download/ 目录 (文件夹)\ncli交互模式下, 运行命令 d -h (注意空格) 查看帮助\ncli交互模式下, 运行命令 d /我的资源/1.mp4 来下载位于 /我的资源/1.mp4 的文件 1.mp4 , 该操作等效于运行以下命令:\ncd /我的资源 d 1.mp4 现在已经支持目录 (文件夹) 下载, 所以, 运行以下命令, 会下载 /我的资源 内的所有文件 (违规文件除外):\nd /我的资源 参见 例6 设置下载最大并发量\n6. 设置下载最大并发量 cli交互模式下, 运行命令 config set -h (注意空格) 查看设置帮助以及可供设置的值\ncli交互模式下, 运行命令 config set -max_parallel 250 将下载最大并发量设置为 250\n下载最大并发量建议值: 50~500, 太低下载速度提升不明显甚至速度会变为0, 太高可能会导致程序出错被操作系统结束掉.\n7. 退出程序 运行命令 quit 或 exit 或 组合键 Ctrl+C 或 组合键 Ctrl+D\n","permalink":"http://localhost:1313/en/posts/tech/baiduyun_ubuntu/","summary":"记录一下找到的linux可用的百度云下载工具，项目地址：https://github.com/iikira/BaiduPCS-Go 直接下载文件解压，进入文件夹，命令行下运行： ./BaiduPCS-Go 即可进入BaiduPCS-Go的加护界面，使用help命令查看相关命令。 初级使用教程 新手建议: 双击运行程","title":"Linux下百度云快速下载"},{"content":"接触和分析过TCGA数据的朋友肯定会经常处理TCGA barcode的7个编码信息，每个编码信息用横杠-隔开，如下所示：\n接触和分析过TCGA数据的朋友肯定会经常处理TCGA barcode的前15位（有时12位），实际从上图可以看出TCGA的barcode设计总共有28位之多。\n每一个短横杠衔接的都是含不同意义的序列，如下图\n图中总结了TCGA中从样品到数据处理流程：\nBCR从TSS收到参与者的样本和他们相关的元数据。然后BCRs分配人可读的IDs（barcode），也就是TCGA barcode给参与者的元数据和样本。TCGA barcode用来把扩展到整个TCGA网络中的数据联系在一起，因为IDs可以唯一识别一个特定样本的一组结果。\n具体的解释如下表：\nLabel Identifier for 解释 Project Project name 来自哪个项目: 如TCGA、TARGET等等 TSS Tissue source site 样品来自哪个组织机构：01 代表International Genomics Consortium, 更多见：TSS Participant Study participant 样品唯一编号(可以理解为一个病人唯一编号） Sample Sample type 样品来自人体组织类型，01-09表示肿瘤样本，10-19表示normal type，20-29表示control samples,如：01代表Primary Solid Tumor， 更多见：SampleType Vial Order of sample in a sequence of samples 一份样品被分割成好几份，表示第几份，通常是A-Z编号 Portion Order of portion in a sequence of 100-120 mg sample portions 每份样品再分割成不同的小样品：01-99等等编号，代表第几份 Analyte Molecular type of analyte for analysis 实验数据来源分子类型，如R代表 RNA，D代表DNA等等，更多见：Portion / Analyte Codes Plate Order of plate in a sequence of 96-well plates 96孔序列中板的顺序，4个数字组成 Center Sequencing or characterization center that will receive the aliquot for analysis 数据由哪个机构分析：如 01代表The Broad Institute GCC,更多见：Center 其中比较重要的，用于区分样本类型的是 sample。\n此外除了上述的barcode还有表示其他信息的barcode，整体的组织形式如下：\n下表显示了不同barcode，所代表的不同意义：层次结构级别：\n","permalink":"http://localhost:1313/en/posts/tech/tcga_barcode/","summary":"接触和分析过TCGA数据的朋友肯定会经常处理TCGA barcode的7个编码信息，每个编码信息用横杠-隔开，如下所示： 接触和分析过TCGA数据的朋友肯定会经常处理TCGA barcode的前15位（有时12位），实际从上图可以看出TCGA的barcode设计总共有28位之多。 每一个","title":"TCGA barcode（样本ID）"},{"content":"背景 Rstudio作为一个R编程的神器竟然在Ubuntu中不能输入中文，经过搜索发现RStudio软件不能使用系统自带的QT5，因此需要我们自己编译安装qt5相关的库，但是由于Rstudio版本的不断更新，每个版本的解决方案都并不能完全兼容，下边记录集中看到的解决方案：\n方案一： 在shell中输入如下命令，将相关插件软连接到RStudio的插件中。\nsudo ln -s /usr/lib/$(dpkg-architecture -qDEB_BUILD_MULTIARCH)/qt5/plugins/platforminputcontexts/libfcitxplatforminputcontextplugin.so /usr/lib/rstudio/bin/plugins/platforminputcontexts/ 方案二： 同样在shell中输入如下命令，下载相关插件并安装。\nwget [url=http://ikuya.info/tmp/fcitx-qt5-rstudio-qt542+2.tar.gz]http://ikuya.info/tmp/fcitx-qt5-rstudio-qt542+2.tar.gz[/url] tar xf fcitx-qt5-rstudio-qt542+2.tar.gz sudo apt install ./fcitx-frontend-qt5-rstudio_1.0.5-1ubuntu1~qt542+2_amd64.deb ./libfcitx-qt5-1-rstudio_1.0.5-1ubuntu1~qt542+2_amd64.deb 方案三： 方法来自Github上，https://github.com/JackieMium/my_blog/issues/12 。作者将编译好的libfcitxplatforminputcontextplugin.so 复制到usr/lib/rstudio/plugins/platforminputcontexts路径下。然后删除libQt5*，qt.conf文件。\n方案四： 该方案适用于Rstudio（Version 1.2.1335）\n执行方案一的命令，将相关插件连接到/usr/lib/rstudio/plugins/platforminputcontexts/文件夹内，这里需要注意文件的权限\nsudo ln -s /usr/lib/$(dpkg-architecture -qDEB_BUILD_MULTIARCH)/qt5/plugins/platforminputcontexts/libfcitxplatforminputcontextplugin.so /usr/lib/rstudio/plugins/platforminputcontexts 在/usr/lib/rstudio/bin的路径下找到qt.conf文件（注意：不同版本路径可能会有所差别），修改qt.conf的内容，添加刚才链接使用的路径：\n[Paths] Prefix = /usr/lib/rstudio/ Prefix = ../ 随着版本的更新，可能之前版本的解决方案会不适用，因此。。。\n持续更新ing\n参考 https://support.rstudio.com/hc/en-us/articles/205605748-Using-RStudio-0-99-with-Fctix-on-Linux\nhttps://blog.csdn.net/wukong1981/article/details/89484408\nhttps://github.com/JackieMium/my_blog/issues/12\n","permalink":"http://localhost:1313/en/posts/tech/rstudio_ubuntu/","summary":"背景 Rstudio作为一个R编程的神器竟然在Ubuntu中不能输入中文，经过搜索发现RStudio软件不能使用系统自带的QT5，因此需要我们自己编译安装qt5相关的库，但是由于Rstudio版本的不断更新，每个版本的解决方案都并不能完全兼容，下边记录集中看到的解决方案： 方案一： 在","title":"Ubuntu 系统下Rstudio不能输入中文的解决办法"},{"content":"根据R官方提供的安装方法，感觉在Ubuntu18.04上毫无作用，因此尝试从源码手动编译安装R\n## 安装依赖 sudo apt-get install xorg-dev libreadline-dev sudo apt-get install libcurl4-openssl-dev sudo apt-get install libbz2-dev sudo apt-get install libcairo2-dev libgtk2.0-dev sudo apt-get install texinfo texlive wget http://mirrors.ctan.org/fonts/inconsolata.zip sudo cp -Rfp inconsolata/* /usr/share/texmf/ # 或者 sudo cp -r inconsolata/ /usr/share/texlive/texmf-dist/tex/latex/ sudo mktexlsr # 刷新一下 # 如果没有java解释器，安装下 sudo apt-get install default-jdk # 下载与安装R curl -O https://cran.r-project.org/src/base/R-3/R-3.6.1.tar.gz tar -zxvf R-3.6.1.tar.gz cd R-3.6.1/ ./configure --prefix=$HOME/local/R --enable-R-shlib --with-cairo=yes # 或者 # ./configure --with-cairo --with-libpng --with-libtiff --with-jpeglib --enable-R-shlib --prefix=$HOME/local/R make make install # 创建符号链接 cd /usr/bin/ sudo ln -s $HOME/local/R/bin/Rscript Rscript sudo ln -s $HOME/local/R/bin/R R 在编译过程中需要使用./configure命令检测环境及其依赖包，检测过程中可能遇到的报错：\n报错一：\nconfigure: error: No F77 compiler found 解决办法：\nsudo apt-get install gfortran build-essential 报错二：\nconfigure: error: \u0026#34;liblzma library and headers are required\u0026#34; 解决办法：安装xz\nsudo wget http://tukaani.org/xz/xz-5.2.4.tar.gz sudo tar xzvf xz-5.2.4.tar.gz sudo cd xz-5.2.4 sudo ./configure sudo make sudo make install ","permalink":"http://localhost:1313/en/posts/tech/r_ubuntu/","summary":"根据R官方提供的安装方法，感觉在Ubuntu18.04上毫无作用，因此尝试从源码手动编译安装R ## 安装依赖 sudo apt-get install xorg-dev libreadline-dev sudo apt-get install libcurl4-openssl-dev sudo apt-get install libbz2-dev sudo apt-get install libcairo2-dev libgtk2.0-dev sudo apt-get install texinfo texlive wget http://mirrors.ctan.org/fonts/inconsolata.zip sudo cp -Rfp inconsolata/* /usr/share/texmf/ # 或者 sudo cp -r inconsolata/ /usr/share/texlive/texmf-dist/tex/latex/ sudo mktexlsr # 刷新一下 # 如果没有java解释器，安装下 sudo apt-get install default-jdk # 下载与安装R curl -O https://cran.r-project.org/src/base/R-3/R-3.6.1.tar.gz tar -zxvf R-3.6.1.tar.gz cd R-3.6.1/ ./configure --prefix=$HOME/local/R --enable-R-shlib --with-cairo=yes # 或者 #","title":"从源码安装R3.6(Ubuntu 18.04LTS)"},{"content":"HTML 超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。HTML可以用 来建立自己的 WEB 站点，HTML 运行在浏览器上，由浏览器来解析。\nHTML 不是一种编程语言，而是一种标记语言，它使用一套标记标签(markup tag)来描述网页；HTML文档包含了HTML标签和文本内容，HTML文档也被称为web页面。\nhtml 元素 HTML文档由 HTML 元素定义。HTML元素包括：开始标签，元素内容，结束标签\nHTML 元素语法 HTML 元素以开始标签起始 HTML 元素以结束标签终止 元素的内容是开始标签与结束标签之间的内容 某些 HTML 元素具有空内容（empty content） 空元素在开始标签中进行关闭（以开始标签的结束而结束） 大多数 HTML 元素可拥有属性 HTML 文档是由嵌套的 HTML 元素构成的\nHTML 属性 属性是 HTML 元素提供的附加信息。\nHTML 元素可以设置属性 属性可以在元素中添加附加信息 属性一般描述于开始标签 属性总是以名称/值对的形式出现，比如：name=\u0026ldquo;value\u0026rdquo;。 \u0026lt;a href=\u0026#34;http://www.runoob.com\u0026#34;\u0026gt;这是一个链接\u0026lt;/a\u0026gt; HTML 标题 在 HTML 文档中，标题很重要。标题（Heading）是通过 \u0026lt;h1\u0026gt; - \u0026lt;h6\u0026gt; 标签进行定义的.\u0026lt;h1\u0026gt; 定义最大的标题。 \u0026lt;h6\u0026gt; 定义最小的标题。\n\u0026lt;h1\u0026gt;这是一个标题。\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;这是一个标题。\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;这是一个标题。\u0026lt;/h3\u0026gt; 请确保将 HTML 标题 标签只用于标题。不要仅仅是为了生成粗体或大号的文本而使用标题。\nHTML 水平线 \u0026lt;hr\u0026gt;标签在 HTML 页面中创建水平线。 用于分隔内容。\nHTML注释 可以将注释插入 HTML 代码中，这样可以提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们。\n注释写法如下:\n\u0026lt;!-- 这是一个注释 --\u0026gt; HTML 段落 段落是通过 \u0026lt;p\u0026gt; 标签定义的。如果在不产生新段落的情况下换行需要使用\u0026lt;br\u0026gt;\n\u0026lt;p\u0026gt;这个\u0026lt;br\u0026gt;段落\u0026lt;br\u0026gt;演示了分行的效果\u0026lt;/p\u0026gt; \u0026lt;br /\u0026gt;元素是一个空的 HTML 元素。由于关闭标签没有任何意义，因此它没有结束标签。\nHTML 格式化标签 HTML 文本格式化标签 标签 描述 \u0026lt;b\u0026gt; 定义粗体文本 \u0026lt;em\u0026gt; 定义着重文字 \u0026lt;i\u0026gt; 定义斜体字 \u0026lt;small\u0026gt; 定义小号字 \u0026lt;strong\u0026gt; 定义加重语气 \u0026lt;sub\u0026gt; 定义下标字 \u0026lt;sup\u0026gt; 定义上标字 \u0026lt;ins\u0026gt; 定义插入字 \u0026lt;del\u0026gt; 定义删除字 HTML \u0026ldquo;计算机输出\u0026rdquo; 标签 标签 描述 \u0026lt;code\u0026gt; 定义计算机代码 \u0026lt;kbd\u0026gt; 定义键盘码 \u0026lt;samp\u0026gt; 定义计算机代码样本 \u0026lt;var\u0026gt; 定义变量 \u0026lt;pre\u0026gt; 定义预格式文本 HTML 引文, 引用, 及标签定义 标签 描述 \u0026lt;abbr\u0026gt; 定义缩写 \u0026lt;address\u0026gt; 定义地址 \u0026lt;bdo\u0026gt; 定义文字方向 \u0026lt;blockquote\u0026gt; 定义长的引用 \u0026lt;q\u0026gt; 定义短的引用语 \u0026lt;cite\u0026gt; 定义引用、引证 \u0026lt;dfn\u0026gt; 定义一个定义项目 HTML头部信息 HTML \u0026lt;head\u0026gt; 元素 \u0026lt;head\u0026gt;元素包含了所有的头部标签元素。在 \u0026lt;head\u0026gt;元素中你可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息。\n可以添加在头部区域的元素标签为: \u0026lt;title\u0026gt;, \u0026lt;style\u0026gt;, \u0026lt;meta\u0026gt;, \u0026lt;link\u0026gt;, \u0026lt;script\u0026gt;,\u0026lt;noscript\u0026gt;, and \u0026lt;base\u0026gt;.\nHTML \u0026lt;title\u0026gt; 元素 \u0026lt;title\u0026gt; 标签定义了不同文档的标题，在HTML/XHTML 文档中是必须的。\n定义了浏览器工具栏的标题 当网页添加到收藏夹时，显示在收藏夹中的标题 显示在搜索引擎结果页面的标题 HTML \u0026lt;base\u0026gt; 元素 \u0026lt;base\u0026gt; 标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接.\nHTML \u0026lt;link\u0026gt; 元素 \u0026lt;link\u0026gt; 标签定义了文档与外部资源之间的关系，通常用于链接到样式表.\nHTML \u0026lt;style\u0026gt; 元素 \u0026lt;style\u0026gt; 标签定义了HTML文档的样式文件引用地址，也可以直接添加样式来渲染 HTML 文档\nHTML \u0026lt;meta\u0026gt; 元素 \u0026lt;meta\u0026gt; 标签提供了元数据.元数据也不显示在页面上，但会被浏览器解析。META 元素通常用于指定网页的描述，关键词，文件的最后修改时间，作者，和其他元数据。元数据可以使用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他Web服务。\u0026lt;meta\u0026gt; 一般放置于 \u0026lt;head\u0026gt; 区域\nHTML \u0026lt;script\u0026gt; 元素 \u0026lt;script\u0026gt;标签用于加载脚本文件，如： JavaScript\nHTML head 元素汇总 标签 描述 \u0026lt;head\u0026gt; 定义了文档的信息 \u0026lt;title\u0026gt; 定义了文档的标题 \u0026lt;base\u0026gt; 定义了页面链接标签的默认链接地址 \u0026lt;link\u0026gt; 定义了一个文档和外部资源之间的关系 \u0026lt;meta\u0026gt; 定义了HTML文档中的元数据 \u0026lt;script\u0026gt; 定义了客户端的脚本文件 \u0026lt;style\u0026gt; 定义了HTML文档的样式文件 HTML 样式- CSS CSS (Cascading Style Sheets) 用于渲染HTML元素标签的样式.CSS 可以通过以下方式添加到HTML中:\n内联样式- 在HTML元素中使用\u0026quot;style\u0026quot; 属性 内部样式表 -在HTML文档头部 \u0026lt;head\u0026gt; 区域使用\u0026lt;style\u0026gt; 元素 来包含CSS 外部引用 - 使用外部 CSS 文件 使用CSS最好的方式是通过外部引用CSS文件.\nHTML 图像 在 HTML 中，图像由\u0026lt;img\u0026gt; 标签定义。\u0026lt;img\u0026gt; 是空标签，意思是说，它只包含属性，并且没有闭合标签。\n空格\u0026lt;br\u0026gt;也是没有闭合标签的\n定义图像的一般语法：\n\u0026lt;img src=\u0026#34;url\u0026#34; alt=\u0026#34;some_text\u0026#34;\u0026gt; Alt属性 alt 属性用来为图像定义一串预备的可替换的文本。在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息。此时，浏览器将显示这个替代性的文本而不是图像。\n\u0026lt;img src=\u0026#34;boat.gif\u0026#34; alt=\u0026#34;Big Boat\u0026#34;\u0026gt; 设置图像的高度与宽度 height（高度） 与 width（宽度）属性用于设置图像的高度与宽度。\n属性值默认单位为像素:\n\u0026lt;img src=\u0026#34;pulpit.jpg\u0026#34; alt=\u0026#34;Pulpit rock\u0026#34; width=\u0026#34;304\u0026#34; height=\u0026#34;228\u0026#34;\u0026gt; HTML 表格 表格由 \u0026lt;table\u0026gt; 标签来定义。每个表格均有若干行（由 \u0026lt;tr\u0026gt; 标签定义），每行被分割为若干单元格（由\u0026lt;td\u0026gt; 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。\n表格的表头使用 \u0026lt;th\u0026gt; 标签进行定义。\n\u0026lt;table border=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Header 1\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Header 2\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;row 1, cell 1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;row 1, cell 2\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;row 2, cell 1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;row 2, cell 2\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; Header 1 Header 2 row 1, cell 1 row 1, cell 2 row 2, cell 1 row 2, cell 2 大多数浏览器会把表头显示为粗体居中的文本\n标签 描述 \u0026lt;table\u0026gt; 定义表格 \u0026lt;th\u0026gt; 定义表格的表头 \u0026lt;tr\u0026gt; 定义表格的行 \u0026lt;td\u0026gt; 定义表格单元格 \u0026lt;caption\u0026gt; 定义表格标题 \u0026lt;colgroup\u0026gt; 定义表格列的组 \u0026lt;col\u0026gt; 定义用于表格列的属性 \u0026lt;thead\u0026gt; 定义表格的页眉 \u0026lt;tbody\u0026gt; 定义表格的主体 \u0026lt;tfoot\u0026gt; 定义表格的页脚 HTML 列表 HTML无序列表 无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。\n无序列表使用 \u0026lt;ul\u0026gt; 标签\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Coffee\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; Coffee Milk HTML 有序列表 有序列表也是一列项目，列表项目使用数字进行标记。 有序列表始于 \u0026lt;ol\u0026gt; 标签。每个列表项始于 \u0026lt;li\u0026gt; 标签。列表项使用数字来标记。\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Coffee\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; Coffee Milk HTML 自定义列表 自定义列表不仅仅是一列项目，而是项目及其注释的组合。\n自定义列表以 \u0026lt;dl\u0026gt; 标签开始。每个自定义列表项以 \u0026lt;dt\u0026gt; 开始。每个自定义列表项的定义以 \u0026lt;dd\u0026gt; 开始。\n\u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;Coffee\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;- black hot drink\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;Milk\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;- white cold drink\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; Coffee - black hot drink Milk - white cold drink HTML 区块 大多数 HTML 元素被定义为块级元素或内联元素。\n块级元素在浏览器显示时，通常会以新行来开始（和结束）。（如：\u0026lt;h1\u0026gt;, \u0026lt;p\u0026gt;, \u0026lt;ul\u0026gt;, \u0026lt;table\u0026gt;）\n内联元素在显示时通常不会以新行开始。（如：\u0026lt;b\u0026gt;, \u0026lt;td\u0026gt;, \u0026lt;a\u0026gt;, \u0026lt;img\u0026gt;）\n\u0026lt;div\u0026gt; 元素是块级元素，它可用于组合其他 HTML 元素的容器。\u0026lt;div\u0026gt; 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。如果与 CSS 一同使用，\u0026lt;div\u0026gt; 元素可用于对大的内容块设置样式属性。\n\u0026lt;span\u0026gt; 元素是内联元素，可用作文本的容器。\u0026lt;span\u0026gt; 元素也没有特定的含义。当与 CSS 一同使用时，\u0026lt;span\u0026gt; 元素可用于为部分文本设置样式属性。\nHTML 布局 大多数网站可以使用 \u0026lt;div\u0026gt; 或者 \u0026lt;table\u0026gt; 元素来创建多列。CSS 用于对元素进行定位，或者为页面创建背景以及色彩丰富的外观。\n例如：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Demo\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;maxname\u0026#34; style=\u0026#34;width:500px;\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;hname\u0026#34; style=\u0026#34;background-color:#666FFF;\u0026#34;\u0026gt; \u0026lt;h1 style=\u0026#34;margin-bottom:0;text-align:center;\u0026#34;\u0026gt;Div布局实例\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;menu\u0026#34; style=\u0026#34;background-color:#FFFFFF;height:200px;width:100px;float:left;\u0026#34;\u0026gt; 菜单\u0026lt;br/\u0026gt; num1\u0026lt;br/\u0026gt; num2\u0026lt;br/\u0026gt; num3 \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;content\u0026#34; style=\u0026#34;background-color:#FFFF00;height:200px;width:300px;float:left;\u0026#34;\u0026gt; 中间信息 \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;right\u0026#34; style=\u0026#34;background-color:#000000;color:#FFFFFF;height:200px;width:100px;float:right;\u0026#34;\u0026gt; 右侧信息 \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;bool\u0026#34; style=\u0026#34;background-color:#F0F8FF;clear:both;text-align:center;\u0026#34;\u0026gt; 整体布局测试 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Demo Div布局实例 菜单 num1 num2 num3 中间信息 右侧信息 整体布局测试 HTML 表单 表单是一个包含表单元素的区域。\n表单元素是允许用户在表单中输入内容,比如：文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等。\n表单的构建用\u0026lt;form\u0026gt;元素\n输入元素 多数情况下被用到的表单标签是输入标签（\u0026lt;input\u0026gt;）。输入类型是由类型属性（type）定义的。\n文本域（Text Fields） 文本域通过\u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt; 标签来设定，用户可以在表单中键入字母、数字等内容\n\u0026lt;form\u0026gt; First name: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;firstname\u0026#34;\u0026gt;\u0026lt;br\u0026gt; Last name: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;lastname\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; First name: Last name: 密码字段 \u0026lt;form\u0026gt; Password: \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;pwd\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; Password: 单选按钮（Radio Buttons） \u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;sex\u0026#34; value=\u0026#34;male\u0026#34;\u0026gt;Male\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;sex\u0026#34; value=\u0026#34;female\u0026#34;\u0026gt;Female \u0026lt;/form\u0026gt; Male\nFemale 复选框（Checkboxes） \u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;vehicle\u0026#34; value=\u0026#34;Bike\u0026#34;\u0026gt;I have a bike\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;vehicle\u0026#34; value=\u0026#34;Car\u0026#34;\u0026gt;I have a car \u0026lt;/form\u0026gt; I have a bike\nI have a car 提交按钮(Submit Button) \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt; 定义了提交按钮. 当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。:\n\u0026lt;form name=\u0026#34;input\u0026#34; action=\u0026#34;html_form_action.php\u0026#34; method=\u0026#34;get\u0026#34;\u0026gt; Username: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;user\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; Username: HTML 表单标签 标签 描述 \u0026lt;form\u0026gt; 定义供用户输入的表单 \u0026lt;input\u0026gt; 定义输入域 \u0026lt;textarea\u0026gt; 定义文本域 (一个多行的输入控件) \u0026lt;label\u0026gt; 定义了 \u0026lt;input\u0026gt; 元素的标签，一般为输入标题 \u0026lt;filedset\u0026gt; 定义了一组相关的表单元素，并使用外框包含起来 \u0026lt;legend\u0026gt; 定义了 \u0026lt;fieldset\u0026gt; 元素的标题 \u0026lt;select\u0026gt; 定义了下拉选项列表 \u0026lt;optgroup\u0026gt; 定义选项组 \u0026lt;option\u0026gt; 定义下拉列表中的选项 \u0026lt;button\u0026gt; 定义一个点击按钮 \u0026lt;datalist\u0026gt; 指定一个预先定义的输入控件选项列表 keygen 定义了表单的密钥对生成器字段 \u0026lt;output\u0026gt; 定义一个计算结果 HTML 框架 通过使用框架，你可以在同一个浏览器窗口中镶嵌其他页面。\n\u0026lt;iframe src=\u0026#34;demo_iframe.htm\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;200\u0026#34; frameborder=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; HTML 脚本 \u0026lt;script\u0026gt; 标签用于定义客户端脚本，比如 JavaScript。\u0026lt;script\u0026gt; 元素既可包含脚本语句，也可通过 src 属性指向外部脚本文件。\u0026lt;noscript\u0026gt; 标签提供无法使用脚本时的替代内容，比方在浏览器禁用脚本时，或浏览器不支持客户端脚本时。\u0026lt;noscript\u0026gt;元素可包含普通 HTML 页面的 body 元素中能够找到的所有元素。\n\u0026lt;script\u0026gt; document.write(\u0026#34;Hello World!\u0026#34;) \u0026lt;/script\u0026gt; \u0026lt;noscript\u0026gt;抱歉，你的浏览器不支持 JavaScript!\u0026lt;/noscript\u0026gt; Reference 菜鸟教程\n","permalink":"http://localhost:1313/en/posts/blog/html/","summary":"HTML 超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。HTML可以用 来建立自己的 WEB 站点，HTML 运行在浏览器上，由浏览器来解析。 HTML 不是一种编程语言，而是一种标记语言，它使用一套标记标签(markup tag)来描述网页；HT","title":"HTML基本语法"},{"content":"数据结构 R 语言的基础数据结构可以按照维度来划分(1 维、 2 维\u0026hellip;n 维)；也可以按照它们所包含的数据类型是否相同来划分。 这样就产生了五种数据类型，它们是数据分析中最常用的：\nHomogeneous Heterogeneous 1d Atomic vector List 2d Matrix Data frame nd Array 向量（vector） 向量包括：原子向量 （Atomic vector） 和列表 （List）。兩者都属于一维数据， 两者的区别在于： 原子向量中的所有元素都必须是相同的类型；而列表中的元素可以是不同的类型\nis.vector()并不能测试一个对象是不是向量。 相反，仅当对象是除了名字以外，不包含其它属性时，它才返回 TRUE。 所以，请使用 is.atomic(x) || is.list(x) 来测试一个对象是不是向量。\n向量具有三个共同属性：\n类型， typeof()，它是什么 长度， length()，它包含有多少元素 属性， attributes()，额外的任意元数据 原子向量 (Atomic vector) 原子向量类型：逻辑类型 (logical)、 整数类型 (integer)、 双精度数值类型 (double)、 字符类型 (character)、 复数类型 (complex)、 raw类型。 缺失值用 NA 表示，是一个长度为1的逻辑向量，NA可根据所处整体环境强制转换成正确的类型，或者使用 NA_real_(双精度浮点数向量)、 NA_integer_ 和 NA_character_ 来创建一系列确定类型的 NA typeof 确定具体的数据类型，is开头的函数（如：is.integer）来确定是否属于某一特定类型 is.atomic() 是检测原子向量最通用的 强制转换：一个原子向量中的所有元素都必须是相同的类型。 所以，当你试图合并不同类型的数据时，将向最灵活的类型进行强制转换。 以灵活程度排序，从小到大依次为：逻辑、 整数、双精度浮点数和字符。 如果转换遇到歧义，则需要使用 as.character()、 as.double()、 as.integer()或者 as.logical()等函数，进行明确的强制转换。 列表(List) c()可以将几个向量合并成一个。 如果原子向量和列表同时存在，那么在合并之前， c()会将原子向量强制转换成列表\nx \u0026lt;- list(list(1, 2), c(3, 4)) y \u0026lt;- c(list(1, 2), c(3, 4)) str(x) #\u0026gt; List of 2 #\u0026gt; $ :List of 2 #\u0026gt; ..$ : num 1 #\u0026gt; ..$ : num 2 #\u0026gt; $ : num [1:2] 3 4 str(y) #\u0026gt; List of 4 #\u0026gt; $ : num 1 #\u0026gt; $ : num 2 #\u0026gt; $ : num 3 #\u0026gt; $ : num 4 列表用来建立 R 语言中的许多更加复杂的数据结构。 比如， 数据框和其他复杂对象\nis.list(mtcars) #\u0026gt; [1] TRUE 这里说明一点：data.frame是比list更为复杂的数据结构\n属性(Attributes) 所有的对象都可以拥有任意多个附加属性， 附加属性用来存取与该对象相关的元数据。 属性可以看做是已命名的列表(带有不重复的名字)。 属性可以使用 attr()函数一个一个的访问，也可以使用 attributes()函数一次性访问。\ny \u0026lt;- 1:10 attr(y, \u0026#34;my_attribute\u0026#34;) \u0026lt;- \u0026#34;This is a vector\u0026#34; attr(y, \u0026#34;alpha\u0026#34;) \u0026lt;- \u0026#34;This is a vector\u0026#34; attr(y, \u0026#34;my_attribute\u0026#34;) #\u0026gt; [1] \u0026#34;This is a vector\u0026#34; attributes(y) #\u0026gt; $my_attribute #\u0026gt; [1] \u0026#34;This is a vector\u0026#34; #\u0026gt; #\u0026gt; $alpha #\u0026gt; [1] \u0026#34;This is a vector\u0026#34; attr(y, \u0026#34;my_attribute\u0026#34;) \u0026lt;- \u0026#34;alpha\u0026#34; attributes(y) #\u0026gt; $my_attribute #\u0026gt; [1] \u0026#34;alpha\u0026#34; #\u0026gt; #\u0026gt; $alpha #\u0026gt; [1] \u0026#34;This is a vector\u0026#34; structure() 函数返回一个带有属性的对象， 也可以用来修改属性\nstructure(y, alpha = \u0026#34;alpha\u0026#34;) #\u0026gt; [1] 1 2 3 4 5 6 7 8 9 10 #\u0026gt; attr(,\u0026#34;my_attribute\u0026#34;) #\u0026gt; [1] \u0026#34;alpha\u0026#34; #\u0026gt; attr(,\u0026#34;alpha\u0026#34;) #\u0026gt; [1] \u0026#34;alpha\u0026#34; 默认情况下，当修改向量时，数据的大多数属性会丢失，但有三种重要的属性不会丢失：名字(name)，维度(dimension)，类(class)\n三个特殊属性需要使用特定函数names(x)、 class(x)和 dim(x) 访问，而不是 attr(x, \u0026quot;names\u0026quot;)、 attr(x, \u0026quot;class\u0026quot;) 和 attr(x, \u0026quot;dim\u0026quot;)\n数据框(data frame) 数据框是由等长向量构成的列表。 它也是二维结构，所以它具有矩阵和列表双重属性。也就是说，数据框拥有 names()、 colnames()和 rownames()，尽管 names()和 colnames()对数据框来说是一样的。 数据框的 length()是列表的长度，所以和 ncol()相同； nrow()则得到行数。\n由于数据框是一个包含向量的列表，所以数据框的某个是列表类型是有可能的：\ndf \u0026lt;- data.frame(x = 1:3) df$y \u0026lt;- list(1:2, 1:3, 1:4) df #\u0026gt; x y #\u0026gt; 1 1 1, 2 #\u0026gt; 2 2 1, 2, 3 #\u0026gt; 3 3 1, 2, 3, 4 当把列表传入 data.frame()函数时，该函数将试图把列表的每一个元素都放到单独的一列中。一种绕开的方法是使用 I()函数，它使得 data.frame()把列表看成一个整体单元\nR中的对象 S3对象 S3 对象是由原子向量、数组和列表组成的，所以你可以使用上面描述的技术对 S3 对象进行取子集操作。 你可以通过 str()函数获得的它们的结构信息。\nS4对象 对 S4 对象来说，有另外两种取子集操作符: @(相当于$)和 slot()(相当于[[)。 @比$更加严格，如果槽(slot)不存在，那么它会返回错误。\nAdvanced R\n","permalink":"http://localhost:1313/en/posts/tech/advancer/","summary":"数据结构 R 语言的基础数据结构可以按照维度来划分(1 维、 2 维\u0026hellip;n 维)；也可以按照它们所包含的数据类型是否相同来划分。 这样就产生了五种数据类型，它们是数据分析中最常用的： Homogeneous Heterogeneous 1d Atomic vector List 2d Matrix Data frame nd Array 向量（vector） 向量包括：原子向量 （Atomic vector） 和列表 （L","title":"R语言高级程序设计"},{"content":"typeof class mode storage.mode 的区别 class 根据 class 函数的帮助文档可知：\nR possesses a simple generic function mechanism which can be used for an object-oriented style of programming. Method dispatch takes place based on the class of the first argument to the generic function.\nclass 给出的是一个对象的抽象类型（也可以理解为对象的特定属性），主要针对的是R中的泛型函数，用于泛型函数的参数识别\n可以这样理解：R是一种基于对象(object)的语言，R中的所有内容都是对象，每个对象都有不同的属性（attribute），而对象最重要的属性是他们的类型（class），决定了对象在R中可以进行什么样的操作\n正常情况下，对于一般的R对象，如果没有类属性（class），那么它肯定有一个隐式的类属性（class），而隐式属性是类似于 mode 的结果\na \u0026lt;- 1 # numeric class(a) # 显示隐式类属性 [1] \u0026#34;numeric\u0026#34; attributes(a) # attributes查看属性，不能看到隐式类属性 NULL a \u0026lt;- structure(a, class = \u0026#34;a\u0026#34;) # 赋予显式类属性 class(a) [1] \u0026#34;a\u0026#34; attributes(a) # attributes查看属性，可以看到显式类属性 $class [1] \u0026#34;a\u0026#34; 注意：NULL 对象是没有属性的，并且也不能对它赋予任何属性\ninherits 函数用来判断对象是否具有某一类属性（class）\n基本类型情况 对于单个值或者向量，class 返回隐式属性（与 mode 结果一致）；如：numeric，character 对于矩阵，数组，日期，因子，class 返回matrix，array，Date，factor 对于数据框，class 返回data.frame 对于列表，class 返回list mode storage.mode typeof mode、 storage.mode、 typeof 是同一类别的函数，它们识别的是对象在内存中的存储类型，即返回的是R中的基本数据类型\nR中的基本数据类型：\u0026ldquo;logical\u0026rdquo;, \u0026ldquo;integer\u0026rdquo;, \u0026ldquo;double\u0026rdquo;, \u0026ldquo;complex\u0026rdquo;, \u0026ldquo;raw\u0026rdquo;,\u0026ldquo;character\u0026rdquo;, \u0026ldquo;list\u0026rdquo;, \u0026ldquo;expression\u0026rdquo;, \u0026ldquo;name\u0026rdquo;, \u0026ldquo;symbol\u0026rdquo; 和 \u0026ldquo;function\u0026rdquo;\n对于 mode、 storage.mode、 typeof 三个函数来说，mode 是比较旧的版本，typeof 是更新的、也是更细的一种形式；三个函数检测的精细程度为：mode \u0026gt; storage.mode \u0026gt; typeof\nmode(1:5) # numeric storage.mode(1:5) # integer typeof(1:5) # integer mode(`+`) # function storage.mode(`+`) # function typeof(`+`) # builtin ","permalink":"http://localhost:1313/en/posts/tech/typeof/","summary":"typeof class mode storage.mode 的区别 class 根据 class 函数的帮助文档可知： R possesses a simple generic function mechanism which can be used for an object-oriented style of programming. Method dispatch takes place based on the class of the first argument to the generic function. class 给出的是一个对象的抽象类型（也可以理解为对象的特定属性），主要针对的是R中的泛型函数，用于泛型函数的参数识别 可以这样理解：R是一种基于对象(object)的语言，R中的所","title":"typeof class mode storage.mode 的区别"},{"content":"R的并行运算 R作为主要流行的统计分析软件之一，其处理数据一般都是单线程的。随着数据量的增大，R运行的时间会大大增加；为了充分发挥计算机的性能和进一步提升R运行速度，使用并行运算不失为一种有效的手段。\n简单的说R的并行化计算其实没有改变其整个并行环境，而是先启动N个附属进程，然后将数据分割成N块在N个核上进行运行，等待附属进程结束返回结果。与单线程运算相比，会大大节省运算时间\nparallel R内置了parallel包（R version \u0026gt; 2.14），强化了R的并行计算能力。parallel包的思路和lapply函数很相似，都是将输入数据分割、计算、整合结果。只不过并行计算是用到了不同的cpu内核来运算。两个核心的函数为mclapply和parlapply。\n## lapply system.time({ res \u0026lt;- lapply(1:5000000, function(x) x+1); }); user system elapsed 21.42 1.74 25.70 ## parlapply # load parallel library(parallel) # check numrber of cores clnum\u0026lt;-detectCores() #设置参与并行的CPU核数目 cl \u0026lt;- makeCluster(getOption(\u0026#34;cl.cores\u0026#34;, clnum)); #运行 system.time({ res \u0026lt;- parLapply(cl, 1:5000000, function(x) x + 1) }); user system elapsed 6.54 0.34 19.95 #关闭并行计算 stopCluster(cl); ## mclapply ==\u0026gt; mclapply适用于类Unix系统的操作 mc \u0026lt;- getOption(\u0026#34;mc.cores\u0026#34;, 3) system.time({ res \u0026lt;- mclapply(1:5000000, function(x){x+1}, mc.cores = mc); }); user system elapsed 6.657 0.500 7.181 furrr furrr是future和purrr包的结合，提供了一系列的并行操作适用于*map家族函数\nlibrary(furrr) library(tictoc) # This should take 6 seconds in total running sequentially plan(sequential) tic() nothingness \u0026lt;- future_map(c(2, 2, 2), ~Sys.sleep(.x)) toc() #\u0026gt; 6.08 sec elapsed # This should take ~2 seconds running in parallel, with a little overhead plan(multiprocess) tic() nothingness \u0026lt;- future_map(c(2, 2, 2), ~Sys.sleep(.x)) toc() #\u0026gt; 2.212 sec elapsed 与parallel相比更喜欢furrr的傻瓜式操作，且其与其他R包的交互使用更为方便。\n其他 其他一些并行相关的R包：\nfuture : 强大的分布式处理并行包\nfuture.apply : 基于future包开发的*apply家族函数并行包\n","permalink":"http://localhost:1313/en/posts/tech/r_parallel/","summary":"R的并行运算 R作为主要流行的统计分析软件之一，其处理数据一般都是单线程的。随着数据量的增大，R运行的时间会大大增加；为了充分发挥计算机的性能和进一步提升R运行速度，使用并行运算不失为一种有效的手段。 简单的说R的并行化计算其实没有改变其整个并行环境，而是先启动N个附属进程，然后将数","title":"R并行运算"},{"content":"screen 是一个非常有用的命令，提供从单个 SSH 会话中使用多个 shell 窗口（会话）的能力。当会话被分离或网络中断时，screen 会话中启动的进程仍将运行，你可以随时重新连接到 screen 会话。如果你想运行一个持久的进程或者从多个位置连接到 shell 会话，这也很方便。\n安装screen screen 在一些流行的发行版上已经预安装了。你可以使用下面的命令检查是否已经在你的服务器上安装了。\nscreen -v Screen version 4.04.00 (GNU) 19-Jun-16 如果没有，可以直接使用包管理器进行安装\n启动 screen 会话 你可以在命令行中输入 screen 来启动它，接着会有一个看上去和命令行提示符一样的 screen 会话启动\nscreen 使用描述性名称启动屏幕会话是一个很好的做法，这样你可以轻松地记住会话中正在运行的进程。要使用会话名称创建新会话，请运行以下命令：\nscreen -S yourname screen 会话分离 要从当前的 screen 会话中分离，你可以按下 Ctrl-A 和 d。所有的 screen 会话仍将是活跃的，你之后可以随时重新连接。\n重新连接到 screen 会话 如果你从一个会话分离，或者由于某些原因你的连接被中断了，你可以使用下面的命令重新连接：\nscreen -r 如果你有多个 screen 会话，你可以用 ls 参数列出它们。\nscreen -ls There are screens on: 7880.session (Detached) 7934.session2 (Detached) 2 Sockets in /var/run/screen/S-root. 如果你想要还原 “session2” 会话，你可以执行：\nscreen -r 7934 或者：\nscreen -r -S session2 中止 screen 你可以按下 Ctrl+d，或者在命令行中使用 exit 命令。\n快捷键 ctrl-a c：创建一个新的 Shell ctrl-a：在 Shell 间切换 ctrl-a n：切换到下一个 Shell ctrl-a p：切换到上一个 Shell ctrl-a 0…9：同样是切换各个 Shell ctrl-a d：退出 Screen 会话 更多语法 screen -S # 创建一个screen（可以用screen -S ID，打开一个指定的ID session） screen -ls # 显示所有的screen会话 screen -d # 脱离当前screen ,返回正常shell screen -r # 进入指定screen screen -S SEEION_NAME -X quit #删除镜像 ","permalink":"http://localhost:1313/en/posts/tech/screen/","summary":"screen 是一个非常有用的命令，提供从单个 SSH 会话中使用多个 shell 窗口（会话）的能力。当会话被分离或网络中断时，screen 会话中启动的进程仍将运行，你可以随时重新连接到 screen 会话。如果你想运行一个持久的进程或者从多个位置连接到 shell 会话，这也很方便。 安装screen screen 在一些流行的发行版上已经预安装了","title":"linux screen 命令使用"},{"content":"目录操作 查看目录 getwd() 列出当前工作路径\nsetwd() 设置工作路径\nlist.files()和dir()的用法相同，可以列出路径下的文件和目录\nlist.files(path =\u0026#34;.\u0026#34;, pattern = NULL, all.files = FALSE, full.names = FALSE, recursive =FALSE, ignore.case = FALSE, include.dirs =FALSE, no.. = FALSE) dir(path =\u0026#34;.\u0026#34;, pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE,no.. = FALSE) 函数list.dirs()只列出路径下所有目录,默认是递归进行的\nlist.dirs(path = \u0026#34;.\u0026#34;, full.names = TRUE, recursive = TRUE) 参数介绍：\npath 路径，如不填则默认为当前工作路径，即getwd()得到的路径； pattern 正则表达式，若pattern不为NULL，返回文件（目录）名满足该正则表达式的文件（目录）； all.files 若为FALSE则不显示隐藏文件（目录），若为TRUE则返回所有文件（目录）； full.names 若为FALSE则只返回文件（目录）名，若为TRUE则返回文件（目录）路径； recursive 若为FALSE则只返回该路径的子级文件（目录），若为TRUE则递归返回所有子、孙文件（目录）； ignore.case 若为TRUE则在匹配pattern时不区分大小写； include.dirs 在recursive为TURE，即显示所有子、孙文件时，若include.dirs为FALSE则只列出最终端的文件名，而不列出中间层级的目录名； no.. 若为TRUE，则不显示“.”和“..”。\n查看目录的权限 \u0026gt; file.info(\u0026#34;.\u0026#34;) size isdir mode mtime ctime atime exe . 0 TRUE 555 2019-03-13 08:10:19 2018-10-13 17:14:40 2019-04-01 18:54:24 no 创建目录 创建单个目录 \u0026gt; dir.create(\u0026#34;create\u0026#34;) \u0026gt; list.dirs() [1] \u0026#34;.\u0026#34; \u0026#34;./create\u0026#34; \u0026#34;./tmp\u0026#34; 递归创建目录 \u0026gt; dir.create(path=\u0026#34;a1/b2/c3\u0026#34;,recursive = TRUE) \u0026gt; list.dirs() [1] \u0026#34;.\u0026#34; \u0026#34;./a1\u0026#34; \u0026#34;./a1/b2\u0026#34; \u0026#34;./a1/b2/c3\u0026#34; \u0026#34;./create\u0026#34; \u0026#34;./tmp\u0026#34; 检测目录是否存在 \u0026gt; file.exists(\u0026#34;a\u0026#34;) [1] FALSE 检查目录的权限 \u0026gt; df \u0026lt;- dir(file.path(R.home(), \u0026#34;bin\u0026#34;), full.names = T) \u0026gt; file.access(df, mode = 0) == 0 D:/Rcore/bin/config.sh D:/Rcore/bin/R.exe D:/Rcore/bin/Rscript.exe TRUE TRUE TRUE D:/Rcore/bin/x64 TRUE mode = 0, 检查文件或目录是否存在 mode = 1, 检查文件或目录是否可执行 mode = 2, 检查文件或目录是否可写 mode = 4, 检查文件或目录是否可读\nfile.access()返回的是逻辑值，file.info()返回的是详细的权限信息\n修改目录权限 Sys.chmod(list.dirs(\u0026#34;.\u0026#34;), \u0026#34;777\u0026#34;) f \u0026lt;- list.files(\u0026#34;.\u0026#34;, all.files = TRUE, full.names = TRUE, recursive = TRUE) Sys.chmod(f, (file.info(f)$mode | \u0026#34;664\u0026#34;)) 对目录重名 # 对tmp目录重命名 \u0026gt; file.rename(\u0026#34;tmp\u0026#34;, \u0026#34;tmp2\u0026#34;) [1] TRUE 删除目录 # 删除tmp2目录 \u0026gt; unlink(\u0026#34;tmp2\u0026#34;, recursive = TRUE) 其他功能 # 拼接目录字符串 \u0026gt; file.path(\u0026#34;p1\u0026#34;,\u0026#34;p2\u0026#34;,\u0026#34;p3\u0026#34;) [1] \u0026#34;p1/p2/p3\u0026#34; # 最底层子目录或文件名 \u0026gt; filename\u0026lt;-\u0026#39;C:/test/lalala.txt\u0026#39; \u0026gt; basename(filename) [1] \u0026#34;lalala.txt\u0026#34; # 最底层子目录 \u0026gt; dirname(filename)r [1] \u0026#34;C:/test\u0026#34; # 转换扩展路径 \u0026gt; path.expand(\u0026#34;~/foo\u0026#34;) [1] \u0026#34;/home/conan/foo\u0026#34; 常规文件操作 cat(“file A\\n”, file=”A”) #创建一个文件A，文件内容是’file A’,’\\n’表示换行，这是一个很好的习惯\ncat(“file B\\n”, file=”B”) #创建一个文件B\nfile.append(“A”, “B”) #将文件B的内容附到A内容的后面，注意没有空行\nfile.create(“A”) #创建一个文件A, 注意会覆盖原来的文件\nfile.append(“A”, rep(“B”, 10)) #将文件B的内容复制10便，并先后附到文件A内容后\nfile.show(“A”) #新开工作窗口显示文件A的内容\nfile.copy(“A”, “C”) #复制文件A保存为C文件，同一个文件夹\ndir.create(“tmp”) #创建名为tmp的文件夹\nfile.copy(c(“A”, “B”), “tmp”) #将文件夹拷贝到tmp文件夹中\nlist.files(“tmp”) #查看文件夹tmp中的文件名\nunlink(“tmp”, recursive=F) #如果文件夹tmp为空，删除文件夹tmp\nunlink(“tmp”, recursive=TRUE) #删除文件夹tmp，如果其中有文件一并删除\nfile.remove(“A”, “B”, “C”) #移除三个文件\n特殊目录 R.home() 查看R软件的相关目录 .Library 查看R核心包的目录 .Library.site 查看R核心包的目录和root用户安装包目录 .libPaths() 查看R所有包的存放目录 system.file() 查看指定包所在的目录 ","permalink":"http://localhost:1313/en/posts/tech/file_r/","summary":"目录操作 查看目录 getwd() 列出当前工作路径 setwd() 设置工作路径 list.files()和dir()的用法相同，可以列出路径下的文件和目录 list.files(path =\u0026#34;.\u0026#34;, pattern = NULL, all.files = FALSE, full.names = FALSE, recursive =FALSE, ignore.case = FALSE, include.dirs =FALSE, no.. = FALSE) dir(path =\u0026#34;.\u0026#34;, pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE,no.. = FALSE) 函数list.dirs()只列出路径下所有目录,默认是递归进行的 list.dirs(path = \u0026#34;.\u0026#34;, full.names","title":"R的文件操作"},{"content":"Table of Contents Table of Contents People Nature Objects Places Symbols Uncategorized People ico emoji ico emoji top :bowtie: :bowtie: \u0026#x1f604; :smile: top \u0026#x1f606; :laughing: \u0026#x1f60a; :blush: top \u0026#x1f603; :smiley: \u0026#x263a;\u0026#xfe0f; :relaxed: top \u0026#x1f60f; :smirk: \u0026#x1f60d; :heart_eyes: top \u0026#x1f618; :kissing_heart: \u0026#x1f61a; :kissing_closed_eyes: top \u0026#x1f633; :flushed: \u0026#x1f60c; :relieved: top \u0026#x1f606; :satisfied: \u0026#x1f601; :grin: top \u0026#x1f609; :wink: \u0026#x1f61c; :stuck_out_tongue_winking_eye: top \u0026#x1f61d; :stuck_out_tongue_closed_eyes: \u0026#x1f600; :grinning: top \u0026#x1f617; :kissing: \u0026#x1f619; :kissing_smiling_eyes: top \u0026#x1f61b; :stuck_out_tongue: \u0026#x1f634; :sleeping: top \u0026#x1f61f; :worried: \u0026#x1f626; :frowning: top \u0026#x1f627; :anguished: \u0026#x1f62e; :open_mouth: top \u0026#x1f62c; :grimacing: \u0026#x1f615; :confused: top \u0026#x1f62f; :hushed: \u0026#x1f611; :expressionless: top \u0026#x1f612; :unamused: \u0026#x1f605; :sweat_smile: top \u0026#x1f613; :sweat: \u0026#x1f625; :disappointed_relieved: top \u0026#x1f629; :weary: \u0026#x1f614; :pensive: top \u0026#x1f61e; :disappointed: \u0026#x1f616; :confounded: top \u0026#x1f628; :fearful: \u0026#x1f630; :cold_sweat: top \u0026#x1f623; :persevere: \u0026#x1f622; :cry: top \u0026#x1f62d; :sob: \u0026#x1f602; :joy: top \u0026#x1f632; :astonished: \u0026#x1f631; :scream: top :neckbeard: :neckbeard: \u0026#x1f62b; :tired_face: top \u0026#x1f620; :angry: \u0026#x1f621; :rage: top \u0026#x1f624; :triumph: \u0026#x1f62a; :sleepy: top \u0026#x1f60b; :yum: \u0026#x1f637; :mask: top \u0026#x1f60e; :sunglasses: \u0026#x1f635; :dizzy_face: top \u0026#x1f47f; :imp: \u0026#x1f608; :smiling_imp: top \u0026#x1f610; :neutral_face: \u0026#x1f636; :no_mouth: top \u0026#x1f607; :innocent: \u0026#x1f47d; :alien: top \u0026#x1f49b; :yellow_heart: \u0026#x1f499; :blue_heart: top \u0026#x1f49c; :purple_heart: \u0026#x2764;\u0026#xfe0f; :heart: top \u0026#x1f49a; :green_heart: \u0026#x1f494; :broken_heart: top \u0026#x1f493; :heartbeat: \u0026#x1f497; :heartpulse: top \u0026#x1f495; :two_hearts: \u0026#x1f49e; :revolving_hearts: top \u0026#x1f498; :cupid: \u0026#x1f496; :sparkling_heart: top \u0026#x2728; :sparkles: \u0026#x2b50; :star: top \u0026#x1f31f; :star2: \u0026#x1f4ab; :dizzy: top \u0026#x1f4a5; :boom: \u0026#x1f4a5; :collision: top \u0026#x1f4a2; :anger: \u0026#x2757; :exclamation: top \u0026#x2753; :question: \u0026#x2755; :grey_exclamation: top \u0026#x2754; :grey_question: \u0026#x1f4a4; :zzz: top \u0026#x1f4a8; :dash: \u0026#x1f4a6; :sweat_drops: top \u0026#x1f3b6; :notes: \u0026#x1f3b5; :musical_note: top \u0026#x1f525; :fire: \u0026#x1f4a9; :hankey: top \u0026#x1f4a9; :poop: \u0026#x1f4a9; :shit: top \u0026#x1f44d; :+1: \u0026#x1f44d; :thumbsup: top \u0026#x1f44e; :-1: \u0026#x1f44e; :thumbsdown: top \u0026#x1f44c; :ok_hand: \u0026#x1f44a; :punch: top \u0026#x1f44a; :facepunch: \u0026#x270a; :fist: top \u0026#x270c;\u0026#xfe0f; :v: \u0026#x1f44b; :wave: top \u0026#x270b; :hand: \u0026#x270b; :raised_hand: top \u0026#x1f450; :open_hands: \u0026#x261d;\u0026#xfe0f; :point_up: top \u0026#x1f447; :point_down: \u0026#x1f448; :point_left: top \u0026#x1f449; :point_right: \u0026#x1f64c; :raised_hands: top \u0026#x1f64f; :pray: \u0026#x1f446; :point_up_2: top \u0026#x1f44f; :clap: \u0026#x1f4aa; :muscle: top \u0026#x1f918; :metal: \u0026#x1f595; :fu: top \u0026#x1f3c3; :runner: \u0026#x1f3c3; :running: top \u0026#x1f46b; :couple: \u0026#x1f46a; :family: top \u0026#x1f46c; :two_men_holding_hands: \u0026#x1f46d; :two_women_holding_hands: top \u0026#x1f483; :dancer: \u0026#x1f46f; :dancers: top \u0026#x1f646;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :ok_woman: \u0026#x1f645; :no_good: top \u0026#x1f481; :information_desk_person: \u0026#x1f64b; :raising_hand: top \u0026#x1f470;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :bride_with_veil: :person_with_pouting_face: :person_with_pouting_face: top :person_frowning: :person_frowning: \u0026#x1f647; :bow: top \u0026#x1f491; :couple_with_heart: \u0026#x1f486; :massage: top \u0026#x1f487; :haircut: \u0026#x1f485; :nail_care: top \u0026#x1f466; :boy: \u0026#x1f467; :girl: top \u0026#x1f469; :woman: \u0026#x1f468; :man: top \u0026#x1f476; :baby: \u0026#x1f475; :older_woman: top \u0026#x1f474; :older_man: :person_with_blond_hair: :person_with_blond_hair: top \u0026#x1f472; :man_with_gua_pi_mao: \u0026#x1f473;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :man_with_turban: top \u0026#x1f477; :construction_worker: \u0026#x1f46e; :cop: top \u0026#x1f47c; :angel: \u0026#x1f478; :princess: top \u0026#x1f63a; :smiley_cat: \u0026#x1f638; :smile_cat: top \u0026#x1f63b; :heart_eyes_cat: \u0026#x1f63d; :kissing_cat: top \u0026#x1f63c; :smirk_cat: \u0026#x1f640; :scream_cat: top \u0026#x1f63f; :crying_cat_face: \u0026#x1f639; :joy_cat: top \u0026#x1f63e; :pouting_cat: \u0026#x1f479; :japanese_ogre: top \u0026#x1f47a; :japanese_goblin: \u0026#x1f648; :see_no_evil: top \u0026#x1f649; :hear_no_evil: \u0026#x1f64a; :speak_no_evil: top \u0026#x1f482;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :guardsman: \u0026#x1f480; :skull: top \u0026#x1f43e; :feet: \u0026#x1f444; :lips: top \u0026#x1f48b; :kiss: \u0026#x1f4a7; :droplet: top \u0026#x1f442; :ear: \u0026#x1f440; :eyes: top \u0026#x1f443; :nose: \u0026#x1f445; :tongue: top \u0026#x1f48c; :love_letter: \u0026#x1f464; :bust_in_silhouette: top \u0026#x1f465; :busts_in_silhouette: \u0026#x1f4ac; :speech_balloon: top \u0026#x1f4ad; :thought_balloon: :feelsgood: :feelsgood: top :finnadie: :finnadie: :goberserk: :goberserk: top :godmode: :godmode: :hurtrealbad: :hurtrealbad: top :rage1: :rage1: :rage2: :rage2: top :rage3: :rage3: :rage4: :rage4: top :suspect: :suspect: :trollface: :trollface: Nature ico emoji ico emoji top \u0026#x2600;\u0026#xfe0f; :sunny: \u0026#x2614; :umbrella: top \u0026#x2601;\u0026#xfe0f; :cloud: \u0026#x2744;\u0026#xfe0f; :snowflake: top \u0026#x26c4; :snowman: \u0026#x26a1; :zap: top \u0026#x1f300; :cyclone: \u0026#x1f301; :foggy: top \u0026#x1f30a; :ocean: \u0026#x1f431; :cat: top \u0026#x1f436; :dog: \u0026#x1f42d; :mouse: top \u0026#x1f439; :hamster: \u0026#x1f430; :rabbit: top \u0026#x1f43a; :wolf: \u0026#x1f438; :frog: top \u0026#x1f42f; :tiger: \u0026#x1f428; :koala: top \u0026#x1f43b; :bear: \u0026#x1f437; :pig: top \u0026#x1f43d; :pig_nose: \u0026#x1f42e; :cow: top \u0026#x1f417; :boar: \u0026#x1f435; :monkey_face: top \u0026#x1f412; :monkey: \u0026#x1f434; :horse: top \u0026#x1f40e; :racehorse: \u0026#x1f42b; :camel: top \u0026#x1f411; :sheep: \u0026#x1f418; :elephant: top \u0026#x1f43c; :panda_face: \u0026#x1f40d; :snake: top \u0026#x1f426; :bird: \u0026#x1f424; :baby_chick: top \u0026#x1f425; :hatched_chick: \u0026#x1f423; :hatching_chick: top \u0026#x1f414; :chicken: \u0026#x1f427; :penguin: top \u0026#x1f422; :turtle: \u0026#x1f41b; :bug: top \u0026#x1f41d; :honeybee: \u0026#x1f41c; :ant: top \u0026#x1fab2; :beetle: \u0026#x1f40c; :snail: top \u0026#x1f419; :octopus: \u0026#x1f420; :tropical_fish: top \u0026#x1f41f; :fish: \u0026#x1f433; :whale: top \u0026#x1f40b; :whale2: \u0026#x1f42c; :dolphin: top \u0026#x1f404; :cow2: \u0026#x1f40f; :ram: top \u0026#x1f400; :rat: \u0026#x1f403; :water_buffalo: top \u0026#x1f405; :tiger2: \u0026#x1f407; :rabbit2: top \u0026#x1f409; :dragon: \u0026#x1f410; :goat: top \u0026#x1f413; :rooster: \u0026#x1f415; :dog2: top \u0026#x1f416; :pig2: \u0026#x1f401; :mouse2: top \u0026#x1f402; :ox: \u0026#x1f432; :dragon_face: top \u0026#x1f421; :blowfish: \u0026#x1f40a; :crocodile: top \u0026#x1f42a; :dromedary_camel: \u0026#x1f406; :leopard: top \u0026#x1f408; :cat2: \u0026#x1f429; :poodle: top \u0026#x1f43e; :paw_prints: \u0026#x1f490; :bouquet: top \u0026#x1f338; :cherry_blossom: \u0026#x1f337; :tulip: top \u0026#x1f340; :four_leaf_clover: \u0026#x1f339; :rose: top \u0026#x1f33b; :sunflower: \u0026#x1f33a; :hibiscus: top \u0026#x1f341; :maple_leaf: \u0026#x1f343; :leaves: top \u0026#x1f342; :fallen_leaf: \u0026#x1f33f; :herb: top \u0026#x1f344; :mushroom: \u0026#x1f335; :cactus: top \u0026#x1f334; :palm_tree: \u0026#x1f332; :evergreen_tree: top \u0026#x1f333; :deciduous_tree: \u0026#x1f330; :chestnut: top \u0026#x1f331; :seedling: \u0026#x1f33c; :blossom: top \u0026#x1f33e; :ear_of_rice: \u0026#x1f41a; :shell: top \u0026#x1f310; :globe_with_meridians: \u0026#x1f31e; :sun_with_face: top \u0026#x1f31d; :full_moon_with_face: \u0026#x1f31a; :new_moon_with_face: top \u0026#x1f311; :new_moon: \u0026#x1f312; :waxing_crescent_moon: top \u0026#x1f313; :first_quarter_moon: \u0026#x1f314; :waxing_gibbous_moon: top \u0026#x1f315; :full_moon: \u0026#x1f316; :waning_gibbous_moon: top \u0026#x1f317; :last_quarter_moon: \u0026#x1f318; :waning_crescent_moon: top \u0026#x1f31c; :last_quarter_moon_with_face: \u0026#x1f31b; :first_quarter_moon_with_face: top \u0026#x1f319; :crescent_moon: \u0026#x1f30d; :earth_africa: top \u0026#x1f30e; :earth_americas: \u0026#x1f30f; :earth_asia: top \u0026#x1f30b; :volcano: \u0026#x1f30c; :milky_way: top \u0026#x26c5; :partly_sunny: :octocat: :octocat: top :squirrel: :squirrel: Objects ico emoji ico emoji top \u0026#x1f38d; :bamboo: \u0026#x1f49d; :gift_heart: top \u0026#x1f38e; :dolls: \u0026#x1f392; :school_satchel: top \u0026#x1f393; :mortar_board: \u0026#x1f38f; :flags: top \u0026#x1f386; :fireworks: \u0026#x1f387; :sparkler: top \u0026#x1f390; :wind_chime: \u0026#x1f391; :rice_scene: top \u0026#x1f383; :jack_o_lantern: \u0026#x1f47b; :ghost: top \u0026#x1f385; :santa: \u0026#x1f384; :christmas_tree: top \u0026#x1f381; :gift: \u0026#x1f514; :bell: top \u0026#x1f515; :no_bell: \u0026#x1f38b; :tanabata_tree: top \u0026#x1f389; :tada: \u0026#x1f38a; :confetti_ball: top \u0026#x1f388; :balloon: \u0026#x1f52e; :crystal_ball: top \u0026#x1f4bf; :cd: \u0026#x1f4c0; :dvd: top \u0026#x1f4be; :floppy_disk: \u0026#x1f4f7; :camera: top \u0026#x1f4f9; :video_camera: \u0026#x1f3a5; :movie_camera: top \u0026#x1f4bb; :computer: \u0026#x1f4fa; :tv: top \u0026#x1f4f1; :iphone: \u0026#x260e;\u0026#xfe0f; :phone: top \u0026#x260e;\u0026#xfe0f; :telephone: \u0026#x1f4de; :telephone_receiver: top \u0026#x1f4df; :pager: \u0026#x1f4e0; :fax: top \u0026#x1f4bd; :minidisc: \u0026#x1f4fc; :vhs: top \u0026#x1f509; :sound: \u0026#x1f508; :speaker: top \u0026#x1f507; :mute: \u0026#x1f4e2; :loudspeaker: top \u0026#x1f4e3; :mega: \u0026#x231b; :hourglass: top \u0026#x23f3; :hourglass_flowing_sand: \u0026#x23f0; :alarm_clock: top \u0026#x231a; :watch: \u0026#x1f4fb; :radio: top \u0026#x1f4e1; :satellite: \u0026#x27bf; :loop: top \u0026#x1f50d; :mag: \u0026#x1f50e; :mag_right: top \u0026#x1f513; :unlock: \u0026#x1f512; :lock: top \u0026#x1f50f; :lock_with_ink_pen: \u0026#x1f510; :closed_lock_with_key: top \u0026#x1f511; :key: \u0026#x1f4a1; :bulb: top \u0026#x1f526; :flashlight: \u0026#x1f506; :high_brightness: top \u0026#x1f505; :low_brightness: \u0026#x1f50c; :electric_plug: top \u0026#x1f50b; :battery: \u0026#x1f4f2; :calling: top \u0026#x1f4e7; :email: \u0026#x1f4eb; :mailbox: top \u0026#x1f4ee; :postbox: \u0026#x1f6c0; :bath: top \u0026#x1f6c1; :bathtub: \u0026#x1f6bf; :shower: top \u0026#x1f6bd; :toilet: \u0026#x1f527; :wrench: top \u0026#x1f529; :nut_and_bolt: \u0026#x1f528; :hammer: top \u0026#x1f4ba; :seat: \u0026#x1f4b0; :moneybag: top \u0026#x1f4b4; :yen: \u0026#x1f4b5; :dollar: top \u0026#x1f4b7; :pound: \u0026#x1f4b6; :euro: top \u0026#x1f4b3; :credit_card: \u0026#x1f4b8; :money_with_wings: top \u0026#x1f4e7; :e-mail: \u0026#x1f4e5; :inbox_tray: top \u0026#x1f4e4; :outbox_tray: \u0026#x2709;\u0026#xfe0f; :envelope: top \u0026#x1f4e8; :incoming_envelope: \u0026#x1f4ef; :postal_horn: top \u0026#x1f4ea; :mailbox_closed: \u0026#x1f4ec; :mailbox_with_mail: top \u0026#x1f4ed; :mailbox_with_no_mail: \u0026#x1f4e6; :package: top \u0026#x1f6aa; :door: \u0026#x1f6ac; :smoking: top \u0026#x1f4a3; :bomb: \u0026#x1f52b; :gun: top \u0026#x1f52a; :hocho: \u0026#x1f48a; :pill: top \u0026#x1f489; :syringe: \u0026#x1f4c4; :page_facing_up: top \u0026#x1f4c3; :page_with_curl: \u0026#x1f4d1; :bookmark_tabs: top \u0026#x1f4ca; :bar_chart: \u0026#x1f4c8; :chart_with_upwards_trend: top \u0026#x1f4c9; :chart_with_downwards_trend: \u0026#x1f4dc; :scroll: top \u0026#x1f4cb; :clipboard: \u0026#x1f4c6; :calendar: top \u0026#x1f4c5; :date: \u0026#x1f4c7; :card_index: top \u0026#x1f4c1; :file_folder: \u0026#x1f4c2; :open_file_folder: top \u0026#x2702;\u0026#xfe0f; :scissors: \u0026#x1f4cc; :pushpin: top \u0026#x1f4ce; :paperclip: \u0026#x2712;\u0026#xfe0f; :black_nib: top \u0026#x270f;\u0026#xfe0f; :pencil2: \u0026#x1f4cf; :straight_ruler: top \u0026#x1f4d0; :triangular_ruler: \u0026#x1f4d5; :closed_book: top \u0026#x1f4d7; :green_book: \u0026#x1f4d8; :blue_book: top \u0026#x1f4d9; :orange_book: \u0026#x1f4d3; :notebook: top \u0026#x1f4d4; :notebook_with_decorative_cover: \u0026#x1f4d2; :ledger: top \u0026#x1f4da; :books: \u0026#x1f516; :bookmark: top \u0026#x1f4db; :name_badge: \u0026#x1f52c; :microscope: top \u0026#x1f52d; :telescope: \u0026#x1f4f0; :newspaper: top \u0026#x1f3c8; :football: \u0026#x1f3c0; :basketball: top \u0026#x26bd; :soccer: \u0026#x26be; :baseball: top \u0026#x1f3be; :tennis: \u0026#x1f3b1; :8ball: top \u0026#x1f3c9; :rugby_football: \u0026#x1f3b3; :bowling: top \u0026#x26f3; :golf: \u0026#x1f6b5; :mountain_bicyclist: top \u0026#x1f6b4; :bicyclist: \u0026#x1f3c7; :horse_racing: top \u0026#x1f3c2; :snowboarder: \u0026#x1f3ca; :swimmer: top \u0026#x1f3c4; :surfer: \u0026#x1f3bf; :ski: top \u0026#x2660;\u0026#xfe0f; :spades: \u0026#x2665;\u0026#xfe0f; :hearts: top \u0026#x2663;\u0026#xfe0f; :clubs: \u0026#x2666;\u0026#xfe0f; :diamonds: top \u0026#x1f48e; :gem: \u0026#x1f48d; :ring: top \u0026#x1f3c6; :trophy: \u0026#x1f3bc; :musical_score: top \u0026#x1f3b9; :musical_keyboard: \u0026#x1f3bb; :violin: top \u0026#x1f47e; :space_invader: \u0026#x1f3ae; :video_game: top \u0026#x1f0cf; :black_joker: \u0026#x1f3b4; :flower_playing_cards: top \u0026#x1f3b2; :game_die: \u0026#x1f3af; :dart: top \u0026#x1f004; :mahjong: \u0026#x1f3ac; :clapper: top \u0026#x1f4dd; :memo: \u0026#x1f4dd; :pencil: top \u0026#x1f4d6; :book: \u0026#x1f3a8; :art: top \u0026#x1f3a4; :microphone: \u0026#x1f3a7; :headphones: top \u0026#x1f3ba; :trumpet: \u0026#x1f3b7; :saxophone: top \u0026#x1f3b8; :guitar: \u0026#x1f45e; :shoe: top \u0026#x1f461; :sandal: \u0026#x1f460; :high_heel: top \u0026#x1f484; :lipstick: \u0026#x1f462; :boot: top \u0026#x1f455; :shirt: \u0026#x1f455; :tshirt: top \u0026#x1f454; :necktie: \u0026#x1f45a; :womans_clothes: top \u0026#x1f457; :dress: \u0026#x1f3bd; :running_shirt_with_sash: top \u0026#x1f456; :jeans: \u0026#x1f458; :kimono: top \u0026#x1f459; :bikini: \u0026#x1f380; :ribbon: top \u0026#x1f3a9; :tophat: \u0026#x1f451; :crown: top \u0026#x1f452; :womans_hat: \u0026#x1f45e; :mans_shoe: top \u0026#x1f302; :closed_umbrella: \u0026#x1f4bc; :briefcase: top \u0026#x1f45c; :handbag: \u0026#x1f45d; :pouch: top \u0026#x1f45b; :purse: \u0026#x1f453; :eyeglasses: top \u0026#x1f3a3; :fishing_pole_and_fish: \u0026#x2615; :coffee: top \u0026#x1f375; :tea: \u0026#x1f376; :sake: top \u0026#x1f37c; :baby_bottle: \u0026#x1f37a; :beer: top \u0026#x1f37b; :beers: \u0026#x1f378; :cocktail: top \u0026#x1f379; :tropical_drink: \u0026#x1f377; :wine_glass: top \u0026#x1f374; :fork_and_knife: \u0026#x1f355; :pizza: top \u0026#x1f354; :hamburger: \u0026#x1f35f; :fries: top \u0026#x1f357; :poultry_leg: \u0026#x1f356; :meat_on_bone: top \u0026#x1f35d; :spaghetti: \u0026#x1f35b; :curry: top \u0026#x1f364; :fried_shrimp: \u0026#x1f371; :bento: top \u0026#x1f363; :sushi: \u0026#x1f365; :fish_cake: top \u0026#x1f359; :rice_ball: \u0026#x1f358; :rice_cracker: top \u0026#x1f35a; :rice: \u0026#x1f35c; :ramen: top \u0026#x1f372; :stew: \u0026#x1f362; :oden: top \u0026#x1f361; :dango: \u0026#x1f95a; :egg: top \u0026#x1f35e; :bread: \u0026#x1f369; :doughnut: top \u0026#x1f36e; :custard: \u0026#x1f366; :icecream: top \u0026#x1f368; :ice_cream: \u0026#x1f367; :shaved_ice: top \u0026#x1f382; :birthday: \u0026#x1f370; :cake: top \u0026#x1f36a; :cookie: \u0026#x1f36b; :chocolate_bar: top \u0026#x1f36c; :candy: \u0026#x1f36d; :lollipop: top \u0026#x1f36f; :honey_pot: \u0026#x1f34e; :apple: top \u0026#x1f34f; :green_apple: \u0026#x1f34a; :tangerine: top \u0026#x1f34b; :lemon: \u0026#x1f352; :cherries: top \u0026#x1f347; :grapes: \u0026#x1f349; :watermelon: top \u0026#x1f353; :strawberry: \u0026#x1f351; :peach: top \u0026#x1f348; :melon: \u0026#x1f34c; :banana: top \u0026#x1f350; :pear: \u0026#x1f34d; :pineapple: top \u0026#x1f360; :sweet_potato: \u0026#x1f346; :eggplant: top \u0026#x1f345; :tomato: \u0026#x1f33d; :corn: Places ico emoji ico emoji top \u0026#x1f3e0; :house: \u0026#x1f3e1; :house_with_garden: top \u0026#x1f3eb; :school: \u0026#x1f3e2; :office: top \u0026#x1f3e3; :post_office: \u0026#x1f3e5; :hospital: top \u0026#x1f3e6; :bank: \u0026#x1f3ea; :convenience_store: top \u0026#x1f3e9; :love_hotel: \u0026#x1f3e8; :hotel: top \u0026#x1f492; :wedding: \u0026#x26ea; :church: top \u0026#x1f3ec; :department_store: \u0026#x1f3e4; :european_post_office: top \u0026#x1f307; :city_sunrise: \u0026#x1f306; :city_sunset: top \u0026#x1f3ef; :japanese_castle: \u0026#x1f3f0; :european_castle: top \u0026#x26fa; :tent: \u0026#x1f3ed; :factory: top \u0026#x1f5fc; :tokyo_tower: \u0026#x1f5fe; :japan: top \u0026#x1f5fb; :mount_fuji: \u0026#x1f304; :sunrise_over_mountains: top \u0026#x1f305; :sunrise: \u0026#x1f320; :stars: top \u0026#x1f5fd; :statue_of_liberty: \u0026#x1f309; :bridge_at_night: top \u0026#x1f3a0; :carousel_horse: \u0026#x1f308; :rainbow: top \u0026#x1f3a1; :ferris_wheel: \u0026#x26f2; :fountain: top \u0026#x1f3a2; :roller_coaster: \u0026#x1f6a2; :ship: top \u0026#x1f6a4; :speedboat: \u0026#x26f5; :boat: top \u0026#x26f5; :sailboat: \u0026#x1f6a3; :rowboat: top \u0026#x2693; :anchor: \u0026#x1f680; :rocket: top \u0026#x2708;\u0026#xfe0f; :airplane: \u0026#x1f681; :helicopter: top \u0026#x1f682; :steam_locomotive: \u0026#x1f68a; :tram: top \u0026#x1f69e; :mountain_railway: \u0026#x1f6b2; :bike: top \u0026#x1f6a1; :aerial_tramway: \u0026#x1f69f; :suspension_railway: top \u0026#x1f6a0; :mountain_cableway: \u0026#x1f69c; :tractor: top \u0026#x1f699; :blue_car: \u0026#x1f698; :oncoming_automobile: top \u0026#x1f697; :car: \u0026#x1f697; :red_car: top \u0026#x1f695; :taxi: \u0026#x1f696; :oncoming_taxi: top \u0026#x1f69b; :articulated_lorry: \u0026#x1f68c; :bus: top \u0026#x1f68d; :oncoming_bus: \u0026#x1f6a8; :rotating_light: top \u0026#x1f693; :police_car: \u0026#x1f694; :oncoming_police_car: top \u0026#x1f692; :fire_engine: \u0026#x1f691; :ambulance: top \u0026#x1f690; :minibus: \u0026#x1f69a; :truck: top \u0026#x1f68b; :train: \u0026#x1f689; :station: top \u0026#x1f686; :train2: \u0026#x1f685; :bullettrain_front: top \u0026#x1f684; :bullettrain_side: \u0026#x1f688; :light_rail: top \u0026#x1f69d; :monorail: \u0026#x1f683; :railway_car: top \u0026#x1f68e; :trolleybus: \u0026#x1f3ab; :ticket: top \u0026#x26fd; :fuelpump: \u0026#x1f6a6; :vertical_traffic_light: top \u0026#x1f6a5; :traffic_light: \u0026#x26a0;\u0026#xfe0f; :warning: top \u0026#x1f6a7; :construction: \u0026#x1f530; :beginner: top \u0026#x1f3e7; :atm: \u0026#x1f3b0; :slot_machine: top \u0026#x1f68f; :busstop: \u0026#x1f488; :barber: top \u0026#x2668;\u0026#xfe0f; :hotsprings: \u0026#x1f3c1; :checkered_flag: top \u0026#x1f38c; :crossed_flags: \u0026#x1f3ee; :izakaya_lantern: top \u0026#x1f5ff; :moyai: \u0026#x1f3aa; :circus_tent: top \u0026#x1f3ad; :performing_arts: \u0026#x1f4cd; :round_pushpin: top \u0026#x1f6a9; :triangular_flag_on_post: \u0026#x1f1ef;\u0026#x1f1f5; :jp: top \u0026#x1f1f0;\u0026#x1f1f7; :kr: \u0026#x1f1e8;\u0026#x1f1f3; :cn: top \u0026#x1f1fa;\u0026#x1f1f8; :us: \u0026#x1f1eb;\u0026#x1f1f7; :fr: top \u0026#x1f1ea;\u0026#x1f1f8; :es: \u0026#x1f1ee;\u0026#x1f1f9; :it: top \u0026#x1f1f7;\u0026#x1f1fa; :ru: \u0026#x1f1ec;\u0026#x1f1e7; :gb: top \u0026#x1f1ec;\u0026#x1f1e7; :uk: \u0026#x1f1e9;\u0026#x1f1ea; :de: Symbols ico emoji ico emoji top \u0026#x31;\u0026#xfe0f;\u0026#x20e3; :one: \u0026#x32;\u0026#xfe0f;\u0026#x20e3; :two: top \u0026#x33;\u0026#xfe0f;\u0026#x20e3; :three: \u0026#x34;\u0026#xfe0f;\u0026#x20e3; :four: top \u0026#x35;\u0026#xfe0f;\u0026#x20e3; :five: \u0026#x36;\u0026#xfe0f;\u0026#x20e3; :six: top \u0026#x37;\u0026#xfe0f;\u0026#x20e3; :seven: \u0026#x38;\u0026#xfe0f;\u0026#x20e3; :eight: top \u0026#x39;\u0026#xfe0f;\u0026#x20e3; :nine: \u0026#x1f51f; :keycap_ten: top \u0026#x1f522; :1234: \u0026#x30;\u0026#xfe0f;\u0026#x20e3; :zero: top \u0026#x23;\u0026#xfe0f;\u0026#x20e3; :hash: \u0026#x1f523; :symbols: top \u0026#x25c0;\u0026#xfe0f; :arrow_backward: \u0026#x2b07;\u0026#xfe0f; :arrow_down: top \u0026#x25b6;\u0026#xfe0f; :arrow_forward: \u0026#x2b05;\u0026#xfe0f; :arrow_left: top \u0026#x1f520; :capital_abcd: \u0026#x1f521; :abcd: top \u0026#x1f524; :abc: \u0026#x2199;\u0026#xfe0f; :arrow_lower_left: top \u0026#x2198;\u0026#xfe0f; :arrow_lower_right: \u0026#x27a1;\u0026#xfe0f; :arrow_right: top \u0026#x2b06;\u0026#xfe0f; :arrow_up: \u0026#x2196;\u0026#xfe0f; :arrow_upper_left: top \u0026#x2197;\u0026#xfe0f; :arrow_upper_right: \u0026#x23ec; :arrow_double_down: top \u0026#x23eb; :arrow_double_up: \u0026#x1f53d; :arrow_down_small: top \u0026#x2935;\u0026#xfe0f; :arrow_heading_down: \u0026#x2934;\u0026#xfe0f; :arrow_heading_up: top \u0026#x21a9;\u0026#xfe0f; :leftwards_arrow_with_hook: \u0026#x21aa;\u0026#xfe0f; :arrow_right_hook: top \u0026#x2194;\u0026#xfe0f; :left_right_arrow: \u0026#x2195;\u0026#xfe0f; :arrow_up_down: top \u0026#x1f53c; :arrow_up_small: \u0026#x1f503; :arrows_clockwise: top \u0026#x1f504; :arrows_counterclockwise: \u0026#x23ea; :rewind: top \u0026#x23e9; :fast_forward: \u0026#x2139;\u0026#xfe0f; :information_source: top \u0026#x1f197; :ok: \u0026#x1f500; :twisted_rightwards_arrows: top \u0026#x1f501; :repeat: \u0026#x1f502; :repeat_one: top \u0026#x1f195; :new: \u0026#x1f51d; :top: top \u0026#x1f199; :up: \u0026#x1f192; :cool: top \u0026#x1f193; :free: \u0026#x1f196; :ng: top \u0026#x1f3a6; :cinema: \u0026#x1f201; :koko: top \u0026#x1f4f6; :signal_strength: \u0026#x1f239; :u5272: top \u0026#x1f234; :u5408: \u0026#x1f23a; :u55b6: top \u0026#x1f22f; :u6307: \u0026#x1f237;\u0026#xfe0f; :u6708: top \u0026#x1f236; :u6709: \u0026#x1f235; :u6e80: top \u0026#x1f21a; :u7121: \u0026#x1f238; :u7533: top \u0026#x1f233; :u7a7a: \u0026#x1f232; :u7981: top \u0026#x1f202;\u0026#xfe0f; :sa: \u0026#x1f6bb; :restroom: top \u0026#x1f6b9; :mens: \u0026#x1f6ba; :womens: top \u0026#x1f6bc; :baby_symbol: \u0026#x1f6ad; :no_smoking: top \u0026#x1f17f;\u0026#xfe0f; :parking: \u0026#x267f; :wheelchair: top \u0026#x1f687; :metro: \u0026#x1f6c4; :baggage_claim: top \u0026#x1f251; :accept: \u0026#x1f6be; :wc: top \u0026#x1f6b0; :potable_water: \u0026#x1f6ae; :put_litter_in_its_place: top \u0026#x3299;\u0026#xfe0f; :secret: \u0026#x3297;\u0026#xfe0f; :congratulations: top \u0026#x24c2;\u0026#xfe0f; :m: \u0026#x1f6c2; :passport_control: top \u0026#x1f6c5; :left_luggage: \u0026#x1f6c3; :customs: top \u0026#x1f250; :ideograph_advantage: \u0026#x1f191; :cl: top \u0026#x1f198; :sos: \u0026#x1f194; :id: top \u0026#x1f6ab; :no_entry_sign: \u0026#x1f51e; :underage: top \u0026#x1f4f5; :no_mobile_phones: \u0026#x1f6af; :do_not_litter: top \u0026#x1f6b1; :non-potable_water: \u0026#x1f6b3; :no_bicycles: top \u0026#x1f6b7; :no_pedestrians: \u0026#x1f6b8; :children_crossing: top \u0026#x26d4; :no_entry: \u0026#x2733;\u0026#xfe0f; :eight_spoked_asterisk: top \u0026#x2747;\u0026#xfe0f; :sparkle: \u0026#x2734;\u0026#xfe0f; :eight_pointed_black_star: top \u0026#x1f49f; :heart_decoration: \u0026#x1f19a; :vs: top \u0026#x1f4f3; :vibration_mode: \u0026#x1f4f4; :mobile_phone_off: top \u0026#x1f4b9; :chart: \u0026#x1f4b1; :currency_exchange: top \u0026#x2648; :aries: \u0026#x2649; :taurus: top \u0026#x264a; :gemini: \u0026#x264b; :cancer: top \u0026#x264c; :leo: \u0026#x264d; :virgo: top \u0026#x264e; :libra: \u0026#x264f; :scorpius: top \u0026#x2650; :sagittarius: \u0026#x2651; :capricorn: top \u0026#x2652; :aquarius: \u0026#x2653; :pisces: top \u0026#x26ce; :ophiuchus: \u0026#x1f52f; :six_pointed_star: top \u0026#x274e; :negative_squared_cross_mark: \u0026#x1f170;\u0026#xfe0f; :a: top \u0026#x1f171;\u0026#xfe0f; :b: \u0026#x1f18e; :ab: top \u0026#x1f17e;\u0026#xfe0f; :o2: \u0026#x1f4a0; :diamond_shape_with_a_dot_inside: top \u0026#x267b;\u0026#xfe0f; :recycle: \u0026#x1f51a; :end: top \u0026#x1f519; :back: \u0026#x1f51b; :on: top \u0026#x1f51c; :soon: \u0026#x1f550; :clock1: top \u0026#x1f55c; :clock130: \u0026#x1f559; :clock10: top \u0026#x1f565; :clock1030: \u0026#x1f55a; :clock11: top \u0026#x1f566; :clock1130: \u0026#x1f55b; :clock12: top \u0026#x1f567; :clock1230: \u0026#x1f551; :clock2: top \u0026#x1f55d; :clock230: \u0026#x1f552; :clock3: top \u0026#x1f55e; :clock330: \u0026#x1f553; :clock4: top \u0026#x1f55f; :clock430: \u0026#x1f554; :clock5: top \u0026#x1f560; :clock530: \u0026#x1f555; :clock6: top \u0026#x1f561; :clock630: \u0026#x1f556; :clock7: top \u0026#x1f562; :clock730: \u0026#x1f557; :clock8: top \u0026#x1f563; :clock830: \u0026#x1f558; :clock9: top \u0026#x1f564; :clock930: \u0026#x1f4b2; :heavy_dollar_sign: top \u0026#xa9;\u0026#xfe0f; :copyright: \u0026#xae;\u0026#xfe0f; :registered: top \u0026#x2122;\u0026#xfe0f; :tm: \u0026#x274c; :x: top \u0026#x2757; :heavy_exclamation_mark: \u0026#x203c;\u0026#xfe0f; :bangbang: top \u0026#x2049;\u0026#xfe0f; :interrobang: \u0026#x2b55; :o: top \u0026#x2716;\u0026#xfe0f; :heavy_multiplication_x: \u0026#x2795; :heavy_plus_sign: top \u0026#x2796; :heavy_minus_sign: \u0026#x2797; :heavy_division_sign: top \u0026#x1f4ae; :white_flower: \u0026#x1f4af; :100: top \u0026#x2714;\u0026#xfe0f; :heavy_check_mark: \u0026#x2611;\u0026#xfe0f; :ballot_box_with_check: top \u0026#x1f518; :radio_button: \u0026#x1f517; :link: top \u0026#x27b0; :curly_loop: \u0026#x3030;\u0026#xfe0f; :wavy_dash: top \u0026#x303d;\u0026#xfe0f; :part_alternation_mark: \u0026#x1f531; :trident: top \u0026#x25aa;\u0026#xfe0f; :black_small_square: \u0026#x25ab;\u0026#xfe0f; :white_small_square: top \u0026#x25fe; :black_medium_small_square: \u0026#x25fd; :white_medium_small_square: top \u0026#x25fc;\u0026#xfe0f; :black_medium_square: \u0026#x25fb;\u0026#xfe0f; :white_medium_square: top \u0026#x2b1b; :black_large_square: \u0026#x2b1c; :white_large_square: top \u0026#x2705; :white_check_mark: \u0026#x1f532; :black_square_button: top \u0026#x1f533; :white_square_button: \u0026#x26ab; :black_circle: top \u0026#x26aa; :white_circle: \u0026#x1f534; :red_circle: top \u0026#x1f535; :large_blue_circle: \u0026#x1f537; :large_blue_diamond: top \u0026#x1f536; :large_orange_diamond: \u0026#x1f539; :small_blue_diamond: top \u0026#x1f538; :small_orange_diamond: \u0026#x1f53a; :small_red_triangle: top \u0026#x1f53b; :small_red_triangle_down: :shipit: :shipit: Uncategorized ico emoji ico emoji top \u0026#x1f947; :1st_place_medal: \u0026#x1f948; :2nd_place_medal: top \u0026#x1f949; :3rd_place_medal: \u0026#x1f1e6;\u0026#x1f1eb; :afghanistan: top \u0026#x1f1e6;\u0026#x1f1fd; :aland_islands: \u0026#x1f1e6;\u0026#x1f1f1; :albania: top \u0026#x2697;\u0026#xfe0f; :alembic: \u0026#x1f1e9;\u0026#x1f1ff; :algeria: top \u0026#x1f1e6;\u0026#x1f1f8; :american_samoa: \u0026#x1f3fa; :amphora: top \u0026#x1f1e6;\u0026#x1f1e9; :andorra: \u0026#x1f1e6;\u0026#x1f1f4; :angola: top \u0026#x1f1e6;\u0026#x1f1ee; :anguilla: \u0026#x1f1e6;\u0026#x1f1f6; :antarctica: top \u0026#x1f1e6;\u0026#x1f1ec; :antigua_barbuda: \u0026#x1f1e6;\u0026#x1f1f7; :argentina: top \u0026#x1f1e6;\u0026#x1f1f2; :armenia: \u0026#x1f6f0;\u0026#xfe0f; :artificial_satellite: top \u0026#x1f1e6;\u0026#x1f1fc; :aruba: \u0026#x2a;\u0026#xfe0f;\u0026#x20e3; :asterisk: top \u0026#x1f45f; :athletic_shoe: :atom: :atom: top \u0026#x269b;\u0026#xfe0f; :atom_symbol: \u0026#x1f1e6;\u0026#x1f1fa; :australia: top \u0026#x1f1e6;\u0026#x1f1f9; :austria: \u0026#x1f951; :avocado: top \u0026#x1f1e6;\u0026#x1f1ff; :azerbaijan: \u0026#x1f953; :bacon: top \u0026#x1f3f8; :badminton: \u0026#x1f956; :baguette_bread: top \u0026#x1f1e7;\u0026#x1f1f8; :bahamas: \u0026#x1f1e7;\u0026#x1f1ed; :bahrain: top \u0026#x2696;\u0026#xfe0f; :balance_scale: \u0026#x1f5f3;\u0026#xfe0f; :ballot_box: top \u0026#x1f1e7;\u0026#x1f1e9; :bangladesh: \u0026#x1f1e7;\u0026#x1f1e7; :barbados: top :basecamp: :basecamp: :basecampy: :basecampy: top \u0026#x26f9;\u0026#xfe0f;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :basketball_man: \u0026#x26f9;\u0026#xfe0f;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :basketball_woman: top \u0026#x1f987; :bat: \u0026#x1f3d6;\u0026#xfe0f; :beach_umbrella: top \u0026#x1f6cf;\u0026#xfe0f; :bed: \u0026#x1f41d; :bee: top \u0026#x1f1e7;\u0026#x1f1fe; :belarus: \u0026#x1f1e7;\u0026#x1f1ea; :belgium: top \u0026#x1f1e7;\u0026#x1f1ff; :belize: \u0026#x1f6ce;\u0026#xfe0f; :bellhop_bell: top \u0026#x1f1e7;\u0026#x1f1ef; :benin: \u0026#x1f1e7;\u0026#x1f1f2; :bermuda: top \u0026#x1f1e7;\u0026#x1f1f9; :bhutan: \u0026#x1f6b4;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :biking_man: top \u0026#x1f6b4;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :biking_woman: \u0026#x2623;\u0026#xfe0f; :biohazard: top \u0026#x1f3f4; :black_flag: \u0026#x1f5a4; :black_heart: top :blonde_man: :blonde_man: \u0026#x1f471;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :blonde_woman: top \u0026#x1f1e7;\u0026#x1f1f4; :bolivia: \u0026#x1f1e7;\u0026#x1f1e6; :bosnia_herzegovina: top \u0026#x1f1e7;\u0026#x1f1fc; :botswana: \u0026#x1f3f9; :bow_and_arrow: top \u0026#x1f647;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :bowing_man: \u0026#x1f647;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :bowing_woman: top \u0026#x1f94a; :boxing_glove: \u0026#x1f1e7;\u0026#x1f1f7; :brazil: top \u0026#x1f1ee;\u0026#x1f1f4; :british_indian_ocean_territory: \u0026#x1f1fb;\u0026#x1f1ec; :british_virgin_islands: top \u0026#x1f1e7;\u0026#x1f1f3; :brunei: \u0026#x1f3d7;\u0026#xfe0f; :building_construction: top \u0026#x1f1e7;\u0026#x1f1ec; :bulgaria: \u0026#x1f1e7;\u0026#x1f1eb; :burkina_faso: top \u0026#x1f32f; :burrito: \u0026#x1f1e7;\u0026#x1f1ee; :burundi: top \u0026#x1f574;\u0026#xfe0f; :business_suit_levitating: \u0026#x1f98b; :butterfly: top \u0026#x1f919; :call_me_hand: \u0026#x1f1f0;\u0026#x1f1ed; :cambodia: top \u0026#x1f4f8; :camera_flash: \u0026#x1f1e8;\u0026#x1f1f2; :cameroon: top \u0026#x1f3d5;\u0026#xfe0f; :camping: \u0026#x1f1e8;\u0026#x1f1e6; :canada: top \u0026#x1f1ee;\u0026#x1f1e8; :canary_islands: \u0026#x1f56f;\u0026#xfe0f; :candle: top \u0026#x1f6f6; :canoe: \u0026#x1f1e8;\u0026#x1f1fb; :cape_verde: top \u0026#x1f5c3;\u0026#xfe0f; :card_file_box: \u0026#x1f5c2;\u0026#xfe0f; :card_index_dividers: top \u0026#x1f1e7;\u0026#x1f1f6; :caribbean_netherlands: \u0026#x1f955; :carrot: top \u0026#x1f1f0;\u0026#x1f1fe; :cayman_islands: \u0026#x1f1e8;\u0026#x1f1eb; :central_african_republic: top \u0026#x1f1f9;\u0026#x1f1e9; :chad: \u0026#x26d3;\u0026#xfe0f; :chains: top \u0026#x1f37e; :champagne: \u0026#x1f9c0; :cheese: top \u0026#x1f1e8;\u0026#x1f1f1; :chile: \u0026#x1f43f;\u0026#xfe0f; :chipmunk: top \u0026#x1f1e8;\u0026#x1f1fd; :christmas_island: \u0026#x1f3d9;\u0026#xfe0f; :cityscape: top \u0026#x1f5dc;\u0026#xfe0f; :clamp: \u0026#x1f3db;\u0026#xfe0f; :classical_building: top \u0026#x1f942; :clinking_glasses: \u0026#x1f329;\u0026#xfe0f; :cloud_with_lightning: top \u0026#x26c8;\u0026#xfe0f; :cloud_with_lightning_and_rain: \u0026#x1f327;\u0026#xfe0f; :cloud_with_rain: top \u0026#x1f328;\u0026#xfe0f; :cloud_with_snow: \u0026#x1f921; :clown_face: top \u0026#x1f1e8;\u0026#x1f1e8; :cocos_islands: \u0026#x26b0;\u0026#xfe0f; :coffin: top \u0026#x1f1e8;\u0026#x1f1f4; :colombia: \u0026#x2604;\u0026#xfe0f; :comet: top \u0026#x1f1f0;\u0026#x1f1f2; :comoros: \u0026#x1f5b1;\u0026#xfe0f; :computer_mouse: top \u0026#x1f1e8;\u0026#x1f1ec; :congo_brazzaville: \u0026#x1f1e8;\u0026#x1f1e9; :congo_kinshasa: top \u0026#x1f477;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :construction_worker_man: \u0026#x1f477;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :construction_worker_woman: top \u0026#x1f39b;\u0026#xfe0f; :control_knobs: \u0026#x1f1e8;\u0026#x1f1f0; :cook_islands: top \u0026#x1f1e8;\u0026#x1f1f7; :costa_rica: \u0026#x1f1e8;\u0026#x1f1ee; :cote_divoire: top \u0026#x1f6cb;\u0026#xfe0f; :couch_and_lamp: \u0026#x1f468;\u0026zwj;\u0026#x2764;\u0026#xfe0f;\u0026zwj;\u0026#x1f468; :couple_with_heart_man_man: top \u0026#x1f469;\u0026zwj;\u0026#x2764;\u0026#xfe0f;\u0026zwj;\u0026#x1f468; :couple_with_heart_woman_man: \u0026#x1f469;\u0026zwj;\u0026#x2764;\u0026#xfe0f;\u0026zwj;\u0026#x1f469; :couple_with_heart_woman_woman: top \u0026#x1f468;\u0026zwj;\u0026#x2764;\u0026#xfe0f;\u0026zwj;\u0026#x1f48b;\u0026zwj;\u0026#x1f468; :couplekiss_man_man: \u0026#x1f469;\u0026zwj;\u0026#x2764;\u0026#xfe0f;\u0026zwj;\u0026#x1f48b;\u0026zwj;\u0026#x1f468; :couplekiss_man_woman: top \u0026#x1f469;\u0026zwj;\u0026#x2764;\u0026#xfe0f;\u0026zwj;\u0026#x1f48b;\u0026zwj;\u0026#x1f469; :couplekiss_woman_woman: \u0026#x1f920; :cowboy_hat_face: top \u0026#x1f980; :crab: \u0026#x1f58d;\u0026#xfe0f; :crayon: top \u0026#x1f997; :cricket: \u0026#x1f1ed;\u0026#x1f1f7; :croatia: top \u0026#x1f950; :croissant: \u0026#x1f91e; :crossed_fingers: top \u0026#x2694;\u0026#xfe0f; :crossed_swords: \u0026#x1f1e8;\u0026#x1f1fa; :cuba: top \u0026#x1f952; :cucumber: \u0026#x1f1e8;\u0026#x1f1fc; :curacao: top \u0026#x1f1e8;\u0026#x1f1fe; :cyprus: \u0026#x1f1e8;\u0026#x1f1ff; :czech_republic: top \u0026#x1f5e1;\u0026#xfe0f; :dagger: \u0026#x1f46f;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :dancing_men: top \u0026#x1f46f;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :dancing_women: \u0026#x1f576;\u0026#xfe0f; :dark_sunglasses: top \u0026#x1f98c; :deer: \u0026#x1f1e9;\u0026#x1f1f0; :denmark: top \u0026#x1f3da;\u0026#xfe0f; :derelict_house: \u0026#x1f3dc;\u0026#xfe0f; :desert: top \u0026#x1f3dd;\u0026#xfe0f; :desert_island: \u0026#x1f5a5;\u0026#xfe0f; :desktop_computer: top \u0026#x1f575;\u0026#xfe0f; :detective: \u0026#x1f1e9;\u0026#x1f1ef; :djibouti: top \u0026#x1f1e9;\u0026#x1f1f2; :dominica: \u0026#x1f1e9;\u0026#x1f1f4; :dominican_republic: top \u0026#x1f54a;\u0026#xfe0f; :dove: \u0026#x1f924; :drooling_face: top \u0026#x1f941; :drum: \u0026#x1f986; :duck: top \u0026#x1f985; :eagle: \u0026#x1f1ea;\u0026#x1f1e8; :ecuador: top \u0026#x1f1ea;\u0026#x1f1ec; :egypt: \u0026#x1f1f8;\u0026#x1f1fb; :el_salvador: top :electron: :electron: \u0026#x1f4e9; :envelope_with_arrow: top \u0026#x1f1ec;\u0026#x1f1f6; :equatorial_guinea: \u0026#x1f1ea;\u0026#x1f1f7; :eritrea: top \u0026#x1f1ea;\u0026#x1f1ea; :estonia: \u0026#x1f1ea;\u0026#x1f1f9; :ethiopia: top \u0026#x1f1ea;\u0026#x1f1fa; :eu: \u0026#x1f1ea;\u0026#x1f1fa; :european_union: top \u0026#x1f441;\u0026#xfe0f; :eye: \u0026#x1f441;\u0026#xfe0f;\u0026zwj;\u0026#x1f5e8;\u0026#xfe0f; :eye_speech_bubble: top \u0026#x1f915; :face_with_head_bandage: \u0026#x1f912; :face_with_thermometer: top \u0026#x1f1eb;\u0026#x1f1f0; :falkland_islands: \u0026#x1f468;\u0026zwj;\u0026#x1f466; :family_man_boy: top \u0026#x1f468;\u0026zwj;\u0026#x1f466;\u0026zwj;\u0026#x1f466; :family_man_boy_boy: \u0026#x1f468;\u0026zwj;\u0026#x1f467; :family_man_girl: top \u0026#x1f468;\u0026zwj;\u0026#x1f467;\u0026zwj;\u0026#x1f466; :family_man_girl_boy: \u0026#x1f468;\u0026zwj;\u0026#x1f467;\u0026zwj;\u0026#x1f467; :family_man_girl_girl: top \u0026#x1f468;\u0026zwj;\u0026#x1f468;\u0026zwj;\u0026#x1f466; :family_man_man_boy: \u0026#x1f468;\u0026zwj;\u0026#x1f468;\u0026zwj;\u0026#x1f466;\u0026zwj;\u0026#x1f466; :family_man_man_boy_boy: top \u0026#x1f468;\u0026zwj;\u0026#x1f468;\u0026zwj;\u0026#x1f467; :family_man_man_girl: \u0026#x1f468;\u0026zwj;\u0026#x1f468;\u0026zwj;\u0026#x1f467;\u0026zwj;\u0026#x1f466; :family_man_man_girl_boy: top \u0026#x1f468;\u0026zwj;\u0026#x1f468;\u0026zwj;\u0026#x1f467;\u0026zwj;\u0026#x1f467; :family_man_man_girl_girl: \u0026#x1f468;\u0026zwj;\u0026#x1f469;\u0026zwj;\u0026#x1f466; :family_man_woman_boy: top \u0026#x1f468;\u0026zwj;\u0026#x1f469;\u0026zwj;\u0026#x1f466;\u0026zwj;\u0026#x1f466; :family_man_woman_boy_boy: \u0026#x1f468;\u0026zwj;\u0026#x1f469;\u0026zwj;\u0026#x1f467; :family_man_woman_girl: top \u0026#x1f468;\u0026zwj;\u0026#x1f469;\u0026zwj;\u0026#x1f467;\u0026zwj;\u0026#x1f466; :family_man_woman_girl_boy: \u0026#x1f468;\u0026zwj;\u0026#x1f469;\u0026zwj;\u0026#x1f467;\u0026zwj;\u0026#x1f467; :family_man_woman_girl_girl: top \u0026#x1f469;\u0026zwj;\u0026#x1f466; :family_woman_boy: \u0026#x1f469;\u0026zwj;\u0026#x1f466;\u0026zwj;\u0026#x1f466; :family_woman_boy_boy: top \u0026#x1f469;\u0026zwj;\u0026#x1f467; :family_woman_girl: \u0026#x1f469;\u0026zwj;\u0026#x1f467;\u0026zwj;\u0026#x1f466; :family_woman_girl_boy: top \u0026#x1f469;\u0026zwj;\u0026#x1f467;\u0026zwj;\u0026#x1f467; :family_woman_girl_girl: \u0026#x1f469;\u0026zwj;\u0026#x1f469;\u0026zwj;\u0026#x1f466; :family_woman_woman_boy: top \u0026#x1f469;\u0026zwj;\u0026#x1f469;\u0026zwj;\u0026#x1f466;\u0026zwj;\u0026#x1f466; :family_woman_woman_boy_boy: \u0026#x1f469;\u0026zwj;\u0026#x1f469;\u0026zwj;\u0026#x1f467; :family_woman_woman_girl: top \u0026#x1f469;\u0026zwj;\u0026#x1f469;\u0026zwj;\u0026#x1f467;\u0026zwj;\u0026#x1f466; :family_woman_woman_girl_boy: \u0026#x1f469;\u0026zwj;\u0026#x1f469;\u0026zwj;\u0026#x1f467;\u0026zwj;\u0026#x1f467; :family_woman_woman_girl_girl: top \u0026#x1f1eb;\u0026#x1f1f4; :faroe_islands: \u0026#x1f575;\u0026#xfe0f;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :female_detective: top \u0026#x26f4;\u0026#xfe0f; :ferry: \u0026#x1f3d1; :field_hockey: top \u0026#x1f1eb;\u0026#x1f1ef; :fiji: \u0026#x1f5c4;\u0026#xfe0f; :file_cabinet: top \u0026#x1f4fd;\u0026#xfe0f; :film_projector: \u0026#x1f39e;\u0026#xfe0f; :film_strip: top \u0026#x1f1eb;\u0026#x1f1ee; :finland: \u0026#x1f91b; :fist_left: top \u0026#x1f44a; :fist_oncoming: \u0026#x270a; :fist_raised: top \u0026#x1f91c; :fist_right: \u0026#x269c;\u0026#xfe0f; :fleur_de_lis: top \u0026#x1f6ec; :flight_arrival: \u0026#x1f6eb; :flight_departure: top \u0026#x1f42c; :flipper: \u0026#x1f32b;\u0026#xfe0f; :fog: top \u0026#x1f463; :footprints: \u0026#x1f58b;\u0026#xfe0f; :fountain_pen: top \u0026#x1f98a; :fox_face: \u0026#x1f5bc;\u0026#xfe0f; :framed_picture: top \u0026#x1f1ec;\u0026#x1f1eb; :french_guiana: \u0026#x1f1f5;\u0026#x1f1eb; :french_polynesia: top \u0026#x1f1f9;\u0026#x1f1eb; :french_southern_territories: \u0026#x1f373; :fried_egg: top \u0026#x2639;\u0026#xfe0f; :frowning_face: \u0026#x1f64d;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :frowning_man: top \u0026#x1f64d;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :frowning_woman: \u0026#x26b1;\u0026#xfe0f; :funeral_urn: top \u0026#x1f1ec;\u0026#x1f1e6; :gabon: \u0026#x1f1ec;\u0026#x1f1f2; :gambia: top \u0026#x2699;\u0026#xfe0f; :gear: \u0026#x1f1ec;\u0026#x1f1ea; :georgia: top \u0026#x1f1ec;\u0026#x1f1ed; :ghana: \u0026#x1f1ec;\u0026#x1f1ee; :gibraltar: top \u0026#x1f945; :goal_net: \u0026#x1f3cc;\u0026#xfe0f;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :golfing_man: top \u0026#x1f3cc;\u0026#xfe0f;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :golfing_woman: \u0026#x1f98d; :gorilla: top \u0026#x1f1ec;\u0026#x1f1f7; :greece: \u0026#x1f957; :green_salad: top \u0026#x1f1ec;\u0026#x1f1f1; :greenland: \u0026#x1f1ec;\u0026#x1f1e9; :grenada: top \u0026#x1f1ec;\u0026#x1f1f5; :guadeloupe: \u0026#x1f1ec;\u0026#x1f1fa; :guam: top \u0026#x1f482;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :guardswoman: \u0026#x1f1ec;\u0026#x1f1f9; :guatemala: top \u0026#x1f1ec;\u0026#x1f1ec; :guernsey: \u0026#x1f1ec;\u0026#x1f1f3; :guinea: top \u0026#x1f1ec;\u0026#x1f1fc; :guinea_bissau: \u0026#x1f1ec;\u0026#x1f1fe; :guyana: top \u0026#x1f487;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :haircut_man: \u0026#x1f487;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :haircut_woman: top \u0026#x1f1ed;\u0026#x1f1f9; :haiti: \u0026#x2692;\u0026#xfe0f; :hammer_and_pick: top \u0026#x1f6e0;\u0026#xfe0f; :hammer_and_wrench: \u0026#x1f91d; :handshake: top \u0026#x2763;\u0026#xfe0f; :heavy_heart_exclamation: \u0026#x1f573;\u0026#xfe0f; :hole: top \u0026#x1f1ed;\u0026#x1f1f3; :honduras: \u0026#x1f1ed;\u0026#x1f1f0; :hong_kong: top \u0026#x1f336;\u0026#xfe0f; :hot_pepper: \u0026#x1f32d; :hotdog: top \u0026#x1f3d8;\u0026#xfe0f; :houses: \u0026#x1f917; :hugs: top \u0026#x1f1ed;\u0026#x1f1fa; :hungary: \u0026#x1f3d2; :ice_hockey: top \u0026#x26f8;\u0026#xfe0f; :ice_skate: \u0026#x1f1ee;\u0026#x1f1f8; :iceland: top \u0026#x1f1ee;\u0026#x1f1f3; :india: \u0026#x1f1ee;\u0026#x1f1e9; :indonesia: top \u0026#x1f1ee;\u0026#x1f1f7; :iran: \u0026#x1f1ee;\u0026#x1f1f6; :iraq: top \u0026#x1f1ee;\u0026#x1f1ea; :ireland: \u0026#x1f1ee;\u0026#x1f1f2; :isle_of_man: top \u0026#x1f1ee;\u0026#x1f1f1; :israel: \u0026#x1f1ef;\u0026#x1f1f2; :jamaica: top \u0026#x1f1ef;\u0026#x1f1ea; :jersey: \u0026#x1f1ef;\u0026#x1f1f4; :jordan: top \u0026#x1f579;\u0026#xfe0f; :joystick: \u0026#x1f54b; :kaaba: top \u0026#x1f1f0;\u0026#x1f1ff; :kazakhstan: \u0026#x1f1f0;\u0026#x1f1ea; :kenya: top \u0026#x2328;\u0026#xfe0f; :keyboard: \u0026#x1f6f4; :kick_scooter: top \u0026#x1f1f0;\u0026#x1f1ee; :kiribati: \u0026#x1f95d; :kiwi_fruit: top \u0026#x1f52a; :knife: \u0026#x1f1fd;\u0026#x1f1f0; :kosovo: top \u0026#x1f1f0;\u0026#x1f1fc; :kuwait: \u0026#x1f1f0;\u0026#x1f1ec; :kyrgyzstan: top \u0026#x1f3f7;\u0026#xfe0f; :label: \u0026#x1f3ee; :lantern: top \u0026#x1f1f1;\u0026#x1f1e6; :laos: \u0026#x271d;\u0026#xfe0f; :latin_cross: top \u0026#x1f1f1;\u0026#x1f1fb; :latvia: \u0026#x1f1f1;\u0026#x1f1e7; :lebanon: top \u0026#x1f1f1;\u0026#x1f1f8; :lesotho: \u0026#x1f39a;\u0026#xfe0f; :level_slider: top \u0026#x1f1f1;\u0026#x1f1f7; :liberia: \u0026#x1f1f1;\u0026#x1f1fe; :libya: top \u0026#x1f1f1;\u0026#x1f1ee; :liechtenstein: \u0026#x1f981; :lion: top \u0026#x1f1f1;\u0026#x1f1f9; :lithuania: \u0026#x1f98e; :lizard: top \u0026#x1f50a; :loud_sound: \u0026#x1f1f1;\u0026#x1f1fa; :luxembourg: top \u0026#x1f925; :lying_face: \u0026#x1f1f2;\u0026#x1f1f4; :macau: top \u0026#x1f1f2;\u0026#x1f1f0; :macedonia: \u0026#x1f1f2;\u0026#x1f1ec; :madagascar: top \u0026#x1f1f2;\u0026#x1f1fc; :malawi: \u0026#x1f1f2;\u0026#x1f1fe; :malaysia: top \u0026#x1f1f2;\u0026#x1f1fb; :maldives: \u0026#x1f575;\u0026#xfe0f;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :male_detective: top \u0026#x1f1f2;\u0026#x1f1f1; :mali: \u0026#x1f1f2;\u0026#x1f1f9; :malta: top \u0026#x1f468;\u0026zwj;\u0026#x1f3a8; :man_artist: \u0026#x1f468;\u0026zwj;\u0026#x1f680; :man_astronaut: top \u0026#x1f938;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :man_cartwheeling: \u0026#x1f468;\u0026zwj;\u0026#x1f373; :man_cook: top \u0026#x1f57a; :man_dancing: \u0026#x1f926;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :man_facepalming: top \u0026#x1f468;\u0026zwj;\u0026#x1f3ed; :man_factory_worker: \u0026#x1f468;\u0026zwj;\u0026#x1f33e; :man_farmer: top \u0026#x1f468;\u0026zwj;\u0026#x1f692; :man_firefighter: \u0026#x1f468;\u0026zwj;\u0026#x2695;\u0026#xfe0f; :man_health_worker: top \u0026#x1f935;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :man_in_tuxedo: \u0026#x1f468;\u0026zwj;\u0026#x2696;\u0026#xfe0f; :man_judge: top \u0026#x1f939;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :man_juggling: \u0026#x1f468;\u0026zwj;\u0026#x1f527; :man_mechanic: top \u0026#x1f468;\u0026zwj;\u0026#x1f4bc; :man_office_worker: \u0026#x1f468;\u0026zwj;\u0026#x2708;\u0026#xfe0f; :man_pilot: top \u0026#x1f93e;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :man_playing_handball: \u0026#x1f93d;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :man_playing_water_polo: top \u0026#x1f468;\u0026zwj;\u0026#x1f52c; :man_scientist: \u0026#x1f937;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :man_shrugging: top \u0026#x1f468;\u0026zwj;\u0026#x1f3a4; :man_singer: \u0026#x1f468;\u0026zwj;\u0026#x1f393; :man_student: top \u0026#x1f468;\u0026zwj;\u0026#x1f3eb; :man_teacher: \u0026#x1f468;\u0026zwj;\u0026#x1f4bb; :man_technologist: top \u0026#x1f34a; :mandarin: \u0026#x1f570;\u0026#xfe0f; :mantelpiece_clock: top \u0026#x1f1f2;\u0026#x1f1ed; :marshall_islands: \u0026#x1f94b; :martial_arts_uniform: top \u0026#x1f1f2;\u0026#x1f1f6; :martinique: \u0026#x1f486;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :massage_man: top \u0026#x1f486;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :massage_woman: \u0026#x1f1f2;\u0026#x1f1f7; :mauritania: top \u0026#x1f1f2;\u0026#x1f1fa; :mauritius: \u0026#x1f1fe;\u0026#x1f1f9; :mayotte: top \u0026#x1f396;\u0026#xfe0f; :medal_military: \u0026#x1f3c5; :medal_sports: top \u0026#x1f93c;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :men_wrestling: \u0026#x1f54e; :menorah: top \u0026#x1f1f2;\u0026#x1f1fd; :mexico: \u0026#x1f1eb;\u0026#x1f1f2; :micronesia: top \u0026#x1f595; :middle_finger: \u0026#x1f95b; :milk_glass: top \u0026#x1f1f2;\u0026#x1f1e9; :moldova: \u0026#x1f1f2;\u0026#x1f1e8; :monaco: top \u0026#x1f911; :money_mouth_face: \u0026#x1f1f2;\u0026#x1f1f3; :mongolia: top \u0026#x1f1f2;\u0026#x1f1ea; :montenegro: \u0026#x1f1f2;\u0026#x1f1f8; :montserrat: top \u0026#x1f314; :moon: \u0026#x1f1f2;\u0026#x1f1e6; :morocco: top \u0026#x1f54c; :mosque: \u0026#x1f6e5;\u0026#xfe0f; :motor_boat: top \u0026#x1f6f5; :motor_scooter: \u0026#x1f3cd;\u0026#xfe0f; :motorcycle: top \u0026#x1f6e3;\u0026#xfe0f; :motorway: \u0026#x26f0;\u0026#xfe0f; :mountain: top \u0026#x1f6b5;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :mountain_biking_man: \u0026#x1f6b5;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :mountain_biking_woman: top \u0026#x1f3d4;\u0026#xfe0f; :mountain_snow: \u0026#x1f1f2;\u0026#x1f1ff; :mozambique: top \u0026#x1f936; :mrs_claus: \u0026#x1f1f2;\u0026#x1f1f2; :myanmar: top \u0026#x1f1f3;\u0026#x1f1e6; :namibia: \u0026#x1f3de;\u0026#xfe0f; :national_park: top \u0026#x1f1f3;\u0026#x1f1f7; :nauru: \u0026#x1f922; :nauseated_face: top \u0026#x1f1f3;\u0026#x1f1f5; :nepal: \u0026#x1f913; :nerd_face: top \u0026#x1f1f3;\u0026#x1f1f1; :netherlands: \u0026#x1f1f3;\u0026#x1f1e8; :new_caledonia: top \u0026#x1f1f3;\u0026#x1f1ff; :new_zealand: \u0026#x1f5de;\u0026#xfe0f; :newspaper_roll: top \u0026#x23ed;\u0026#xfe0f; :next_track_button: \u0026#x1f645;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :ng_man: top \u0026#x1f645;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :ng_woman: \u0026#x1f1f3;\u0026#x1f1ee; :nicaragua: top \u0026#x1f1f3;\u0026#x1f1ea; :niger: \u0026#x1f1f3;\u0026#x1f1ec; :nigeria: top \u0026#x1f303; :night_with_stars: \u0026#x1f1f3;\u0026#x1f1fa; :niue: top \u0026#x1f645;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :no_good_man: \u0026#x1f645;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :no_good_woman: top \u0026#x1f1f3;\u0026#x1f1eb; :norfolk_island: \u0026#x1f1f0;\u0026#x1f1f5; :north_korea: top \u0026#x1f1f2;\u0026#x1f1f5; :northern_mariana_islands: \u0026#x1f1f3;\u0026#x1f1f4; :norway: top \u0026#x1f6e2;\u0026#xfe0f; :oil_drum: \u0026#x1f646;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :ok_man: top \u0026#x1f5dd;\u0026#xfe0f; :old_key: \u0026#x1f549;\u0026#xfe0f; :om: top \u0026#x1f1f4;\u0026#x1f1f2; :oman: \u0026#x1f4d6; :open_book: top \u0026#x2602;\u0026#xfe0f; :open_umbrella: \u0026#x1f34a; :orange: top \u0026#x2626;\u0026#xfe0f; :orthodox_cross: \u0026#x1f989; :owl: top \u0026#x1f58c;\u0026#xfe0f; :paintbrush: \u0026#x1f1f5;\u0026#x1f1f0; :pakistan: top \u0026#x1f1f5;\u0026#x1f1fc; :palau: \u0026#x1f1f5;\u0026#x1f1f8; :palestinian_territories: top \u0026#x1f1f5;\u0026#x1f1e6; :panama: \u0026#x1f95e; :pancakes: top \u0026#x1f587;\u0026#xfe0f; :paperclips: \u0026#x1f1f5;\u0026#x1f1ec; :papua_new_guinea: top \u0026#x1f1f5;\u0026#x1f1fe; :paraguay: \u0026#x26f1;\u0026#xfe0f; :parasol_on_ground: top \u0026#x1f6f3;\u0026#xfe0f; :passenger_ship: \u0026#x23f8;\u0026#xfe0f; :pause_button: top \u0026#x262e;\u0026#xfe0f; :peace_symbol: \u0026#x1f95c; :peanuts: top \u0026#x1f58a;\u0026#xfe0f; :pen: \u0026#x1f93a; :person_fencing: top \u0026#x1f1f5;\u0026#x1f1ea; :peru: \u0026#x1f1f5;\u0026#x1f1ed; :philippines: top \u0026#x26cf;\u0026#xfe0f; :pick: \u0026#x1f3d3; :ping_pong: top \u0026#x1f1f5;\u0026#x1f1f3; :pitcairn_islands: \u0026#x1f6d0; :place_of_worship: top \u0026#x1f37d;\u0026#xfe0f; :plate_with_cutlery: \u0026#x23ef;\u0026#xfe0f; :play_or_pause_button: top \u0026#x1f1f5;\u0026#x1f1f1; :poland: \u0026#x1f46e;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :policeman: top \u0026#x1f46e;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :policewoman: \u0026#x1f37f; :popcorn: top \u0026#x1f1f5;\u0026#x1f1f9; :portugal: \u0026#x1f954; :potato: top \u0026#x1f621; :pout: \u0026#x1f64e;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :pouting_man: top \u0026#x1f64e;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :pouting_woman: \u0026#x1f4ff; :prayer_beads: top \u0026#x1f930; :pregnant_woman: \u0026#x23ee;\u0026#xfe0f; :previous_track_button: top \u0026#x1f934; :prince: \u0026#x1f5a8;\u0026#xfe0f; :printer: top \u0026#x1f1f5;\u0026#x1f1f7; :puerto_rico: \u0026#x1f1f6;\u0026#x1f1e6; :qatar: top \u0026#x1f3ce;\u0026#xfe0f; :racing_car: \u0026#x2622;\u0026#xfe0f; :radioactive: top \u0026#x1f6e4;\u0026#xfe0f; :railway_track: \u0026#x1f3f3;\u0026#xfe0f;\u0026zwj;\u0026#x1f308; :rainbow_flag: top \u0026#x1f91a; :raised_back_of_hand: \u0026#x1f590;\u0026#xfe0f; :raised_hand_with_fingers_splayed: top \u0026#x1f64b;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :raising_hand_man: \u0026#x1f64b;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :raising_hand_woman: top \u0026#x23fa;\u0026#xfe0f; :record_button: \u0026#x1f397;\u0026#xfe0f; :reminder_ribbon: top \u0026#x26d1;\u0026#xfe0f; :rescue_worker_helmet: \u0026#x1f1f7;\u0026#x1f1ea; :reunion: top \u0026#x1f98f; :rhinoceros: \u0026#x1f5ef;\u0026#xfe0f; :right_anger_bubble: top \u0026#x1f916; :robot: \u0026#x1f923; :rofl: top \u0026#x1f644; :roll_eyes: \u0026#x1f1f7;\u0026#x1f1f4; :romania: top \u0026#x1f3f5;\u0026#xfe0f; :rosette: \u0026#x1f6a3;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :rowing_man: top \u0026#x1f6a3;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :rowing_woman: \u0026#x1f3c3;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :running_man: top \u0026#x1f3c3;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :running_woman: \u0026#x1f1f7;\u0026#x1f1fc; :rwanda: top \u0026#x1f1fc;\u0026#x1f1f8; :samoa: \u0026#x1f1f8;\u0026#x1f1f2; :san_marino: top \u0026#x1f1f8;\u0026#x1f1f9; :sao_tome_principe: \u0026#x1f1f8;\u0026#x1f1e6; :saudi_arabia: top \u0026#x1f982; :scorpion: \u0026#x1f933; :selfie: top \u0026#x1f1f8;\u0026#x1f1f3; :senegal: \u0026#x1f1f7;\u0026#x1f1f8; :serbia: top \u0026#x1f1f8;\u0026#x1f1e8; :seychelles: \u0026#x1f958; :shallow_pan_of_food: top \u0026#x2618;\u0026#xfe0f; :shamrock: \u0026#x1f988; :shark: top \u0026#x1f6e1;\u0026#xfe0f; :shield: \u0026#x26e9;\u0026#xfe0f; :shinto_shrine: top \u0026#x1f6cd;\u0026#xfe0f; :shopping: \u0026#x1f6d2; :shopping_cart: top \u0026#x1f990; :shrimp: \u0026#x1f1f8;\u0026#x1f1f1; :sierra_leone: top \u0026#x1f1f8;\u0026#x1f1ec; :singapore: \u0026#x1f1f8;\u0026#x1f1fd; :sint_maarten: top \u0026#x26f7;\u0026#xfe0f; :skier: \u0026#x2620;\u0026#xfe0f; :skull_and_crossbones: top \u0026#x1f6cc; :sleeping_bed: \u0026#x1f641; :slightly_frowning_face: top \u0026#x1f642; :slightly_smiling_face: \u0026#x1f1f8;\u0026#x1f1f0; :slovakia: top \u0026#x1f1f8;\u0026#x1f1ee; :slovenia: \u0026#x1f6e9;\u0026#xfe0f; :small_airplane: top \u0026#x1f927; :sneezing_face: \u0026#x2603;\u0026#xfe0f; :snowman_with_snow: top \u0026#x1f1f8;\u0026#x1f1e7; :solomon_islands: \u0026#x1f1f8;\u0026#x1f1f4; :somalia: top \u0026#x1f1ff;\u0026#x1f1e6; :south_africa: \u0026#x1f1ec;\u0026#x1f1f8; :south_georgia_south_sandwich_islands: top \u0026#x1f1f8;\u0026#x1f1f8; :south_sudan: \u0026#x1f5e3;\u0026#xfe0f; :speaking_head: top \u0026#x1f577;\u0026#xfe0f; :spider: \u0026#x1f578;\u0026#xfe0f; :spider_web: top \u0026#x1f5d3;\u0026#xfe0f; :spiral_calendar: \u0026#x1f5d2;\u0026#xfe0f; :spiral_notepad: top \u0026#x1f944; :spoon: \u0026#x1f991; :squid: top \u0026#x1f1f1;\u0026#x1f1f0; :sri_lanka: \u0026#x1f1e7;\u0026#x1f1f1; :st_barthelemy: top \u0026#x1f1f8;\u0026#x1f1ed; :st_helena: \u0026#x1f1f0;\u0026#x1f1f3; :st_kitts_nevis: top \u0026#x1f1f1;\u0026#x1f1e8; :st_lucia: \u0026#x1f1f5;\u0026#x1f1f2; :st_pierre_miquelon: top \u0026#x1f1fb;\u0026#x1f1e8; :st_vincent_grenadines: \u0026#x1f3df;\u0026#xfe0f; :stadium: top \u0026#x262a;\u0026#xfe0f; :star_and_crescent: \u0026#x2721;\u0026#xfe0f; :star_of_david: top \u0026#x23f9;\u0026#xfe0f; :stop_button: \u0026#x1f6d1; :stop_sign: top \u0026#x23f1;\u0026#xfe0f; :stopwatch: \u0026#x1f399;\u0026#xfe0f; :studio_microphone: top \u0026#x1f959; :stuffed_flatbread: \u0026#x1f1f8;\u0026#x1f1e9; :sudan: top \u0026#x1f325;\u0026#xfe0f; :sun_behind_large_cloud: \u0026#x1f326;\u0026#xfe0f; :sun_behind_rain_cloud: top \u0026#x1f324;\u0026#xfe0f; :sun_behind_small_cloud: \u0026#x1f3c4;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :surfing_man: top \u0026#x1f3c4;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :surfing_woman: \u0026#x1f1f8;\u0026#x1f1f7; :suriname: top \u0026#x1f1f8;\u0026#x1f1ff; :swaziland: \u0026#x1f1f8;\u0026#x1f1ea; :sweden: top \u0026#x1f3ca;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :swimming_man: \u0026#x1f3ca;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :swimming_woman: top \u0026#x1f1e8;\u0026#x1f1ed; :switzerland: \u0026#x1f54d; :synagogue: top \u0026#x1f1f8;\u0026#x1f1fe; :syria: \u0026#x1f32e; :taco: top \u0026#x1f1f9;\u0026#x1f1fc; :taiwan: \u0026#x1f1f9;\u0026#x1f1ef; :tajikistan: top \u0026#x1f1f9;\u0026#x1f1ff; :tanzania: \u0026#x1f1f9;\u0026#x1f1ed; :thailand: top \u0026#x1f321;\u0026#xfe0f; :thermometer: \u0026#x1f914; :thinking: top \u0026#x1f39f;\u0026#xfe0f; :tickets: \u0026#x23f2;\u0026#xfe0f; :timer_clock: top \u0026#x1f1f9;\u0026#x1f1f1; :timor_leste: \u0026#x1f481;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :tipping_hand_man: top \u0026#x1f481;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :tipping_hand_woman: \u0026#x1f1f9;\u0026#x1f1ec; :togo: top \u0026#x1f1f9;\u0026#x1f1f0; :tokelau: \u0026#x1f1f9;\u0026#x1f1f4; :tonga: top \u0026#x1f32a;\u0026#xfe0f; :tornado: \u0026#x1f1f9;\u0026#x1f1f7; :tr: top \u0026#x1f5b2;\u0026#xfe0f; :trackball: \u0026#x1f1f9;\u0026#x1f1f9; :trinidad_tobago: top \u0026#x1f943; :tumbler_glass: \u0026#x1f1f9;\u0026#x1f1f3; :tunisia: top \u0026#x1f983; :turkey: \u0026#x1f1f9;\u0026#x1f1f2; :turkmenistan: top \u0026#x1f1f9;\u0026#x1f1e8; :turks_caicos_islands: \u0026#x1f1f9;\u0026#x1f1fb; :tuvalu: top \u0026#x1f1fa;\u0026#x1f1ec; :uganda: \u0026#x1f1fa;\u0026#x1f1e6; :ukraine: top \u0026#x1f984; :unicorn: \u0026#x1f1e6;\u0026#x1f1ea; :united_arab_emirates: top \u0026#x1f643; :upside_down_face: \u0026#x1f1fa;\u0026#x1f1fe; :uruguay: top \u0026#x1f1fb;\u0026#x1f1ee; :us_virgin_islands: \u0026#x1f1fa;\u0026#x1f1ff; :uzbekistan: top \u0026#x1f1fb;\u0026#x1f1fa; :vanuatu: \u0026#x1f1fb;\u0026#x1f1e6; :vatican_city: top \u0026#x1f1fb;\u0026#x1f1ea; :venezuela: \u0026#x1f1fb;\u0026#x1f1f3; :vietnam: top \u0026#x1f3d0; :volleyball: \u0026#x1f596; :vulcan_salute: top \u0026#x1f6b6; :walking: \u0026#x1f6b6;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :walking_man: top \u0026#x1f6b6;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :walking_woman: \u0026#x1f1fc;\u0026#x1f1eb; :wallis_futuna: top \u0026#x1f5d1;\u0026#xfe0f; :wastebasket: \u0026#x1f3cb;\u0026#xfe0f;\u0026zwj;\u0026#x2642;\u0026#xfe0f; :weight_lifting_man: top \u0026#x1f3cb;\u0026#xfe0f;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :weight_lifting_woman: \u0026#x1f1ea;\u0026#x1f1ed; :western_sahara: top \u0026#x2638;\u0026#xfe0f; :wheel_of_dharma: \u0026#x1f3f3;\u0026#xfe0f; :white_flag: top \u0026#x1f940; :wilted_flower: \u0026#x1f32c;\u0026#xfe0f; :wind_face: top \u0026#x1f469;\u0026zwj;\u0026#x1f3a8; :woman_artist: \u0026#x1f469;\u0026zwj;\u0026#x1f680; :woman_astronaut: top \u0026#x1f938;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :woman_cartwheeling: \u0026#x1f469;\u0026zwj;\u0026#x1f373; :woman_cook: top \u0026#x1f926;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :woman_facepalming: \u0026#x1f469;\u0026zwj;\u0026#x1f3ed; :woman_factory_worker: top \u0026#x1f469;\u0026zwj;\u0026#x1f33e; :woman_farmer: \u0026#x1f469;\u0026zwj;\u0026#x1f692; :woman_firefighter: top \u0026#x1f469;\u0026zwj;\u0026#x2695;\u0026#xfe0f; :woman_health_worker: \u0026#x1f469;\u0026zwj;\u0026#x2696;\u0026#xfe0f; :woman_judge: top \u0026#x1f939;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :woman_juggling: \u0026#x1f469;\u0026zwj;\u0026#x1f527; :woman_mechanic: top \u0026#x1f469;\u0026zwj;\u0026#x1f4bc; :woman_office_worker: \u0026#x1f469;\u0026zwj;\u0026#x2708;\u0026#xfe0f; :woman_pilot: top \u0026#x1f93e;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :woman_playing_handball: \u0026#x1f93d;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :woman_playing_water_polo: top \u0026#x1f469;\u0026zwj;\u0026#x1f52c; :woman_scientist: \u0026#x1f937;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :woman_shrugging: top \u0026#x1f469;\u0026zwj;\u0026#x1f3a4; :woman_singer: \u0026#x1f469;\u0026zwj;\u0026#x1f393; :woman_student: top \u0026#x1f469;\u0026zwj;\u0026#x1f3eb; :woman_teacher: \u0026#x1f469;\u0026zwj;\u0026#x1f4bb; :woman_technologist: top \u0026#x1f473;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :woman_with_turban: \u0026#x1f93c;\u0026zwj;\u0026#x2640;\u0026#xfe0f; :women_wrestling: top \u0026#x1f5fa;\u0026#xfe0f; :world_map: \u0026#x270d;\u0026#xfe0f; :writing_hand: top \u0026#x1f1fe;\u0026#x1f1ea; :yemen: \u0026#x262f;\u0026#xfe0f; :yin_yang: top \u0026#x1f1ff;\u0026#x1f1f2; :zambia: \u0026#x1f1ff;\u0026#x1f1fc; :zimbabwe: top \u0026#x1f910; :zipper_mouth_face: ","permalink":"http://localhost:1313/en/posts/blog/emoji/","summary":"Table of Contents Table of Contents People Nature Objects Places Symbols Uncategorized People ico emoji ico emoji top :bowtie: :bowtie: \u0026#x1f604; :smile: top \u0026#x1f606; :laughing: \u0026#x1f60a; :blush: top \u0026#x1f603; :smiley: \u0026#x263a;\u0026#xfe0f; :relaxed: top \u0026#x1f60f; :smirk: \u0026#x1f60d; :heart_eyes: top \u0026#x1f618; :kissing_heart: \u0026#x1f61a; :kissing_closed_eyes: top \u0026#x1f633; :flushed: \u0026#x1f60c; :relieved: top \u0026#x1f606; :satisfied: \u0026#x1f601; :grin: top \u0026#x1f609; :wink: \u0026#x1f61c; :stuck_out_tongue_winking_eye: top \u0026#x1f61d; :stuck_out_tongue_closed_eyes: \u0026#x1f600; :grinning: top \u0026#x1f617; :kissing: \u0026#x1f619; :kissing_smiling_eyes: top \u0026#x1f61b; :stuck_out_tongue: \u0026#x1f634; :sleeping: top \u0026#x1f61f; :worried: \u0026#x1f626; :frowning: top \u0026#x1f627; :anguished: \u0026#x1f62e; :open_mouth: top \u0026#x1f62c; :grimacing: \u0026#x1f615; :confused: top \u0026#x1f62f; :hushed: \u0026#x1f611; :expressionless: top \u0026#x1f612; :unamused: \u0026#x1f605; :sweat_smile: top \u0026#x1f613; :sweat: \u0026#x1f625; :disappointed_relieved: top \u0026#x1f629; :weary: \u0026#x1f614; :pensive: top \u0026#x1f61e; :disappointed: \u0026#x1f616; :confounded: top \u0026#x1f628; :fearful: \u0026#x1f630; :cold_sweat: top \u0026#x1f623; :persevere: \u0026#x1f622; :cry: top \u0026#x1f62d; :sob: \u0026#x1f602; :joy: top \u0026#x1f632; :astonished: \u0026#x1f631; :scream: top :neckbeard: :neckbeard: \u0026#x1f62b; :tired_face: top \u0026#x1f620; :angry:","title":"emoji表情收集"},{"content":" title: Jekyll-theme-next添加Valine评论系统 date: 2019-03-18 19:42:02 categories:\nBlog tags: blog 给Jekyll添加Valine评论系统\n一直想给博客配置一款简洁的评论系统，但是没有发现合适的，最近倒腾一下Valine之后，发现效果还不错☺️\n详情请访问官网：https://valine.js.org\n这个评论系统是基于LeanCloud的，对Jekyll的博客是支持的，官网网址：https://leancloud.cn\n获取 APP ID 和 APP KEY 需要注册登录LeanCloud然后创建应用获取\n点击这里登录或注册Leancloud\n然后创建应用\n选择刚刚创建的应用\u0026gt;设置\u0026gt;应用 Key，然后你就能看到你的APP ID和APP KEY\n然后填写应用\u0026gt;设置\u0026gt;安全设置中的Web 安全域名\n在blog中添加valine评论系统 由于我使用的是jekyll-theme-next, 所以可能在其他模板中不适用\n创建valine.html 在 /_includes/_third-party/comments文件夹中添加一个文件valine.html 在文件里添加代码：\n中间几行需要配置在_config.yml文件当中\n添加_config.yml配置 将app_id，app_key， placeholde等信息添加到_config.yml配置当中 具体使用代码：\nvaline_comment: enable: true # app_id leancloud_appid: XXX # app_key leancloud_appkey: XXX # placeholde placeholder: “Just go go” 更改调用valine.html 由于前面创建了valine.html，要jekyll博客能够运行这个页面的代码，使评论框显示在每篇文章的页面，需要在/_includes/_third-party/comments/index.html里面适当位置添加以下代码：\n此外，在/_includes/_partials/comments.html里面插入下列代码：\n最后生成的评论框如下：\n感觉还不错！！\n","permalink":"http://localhost:1313/en/posts/blog/valine/","summary":"\u003chr\u003e\n\u003cp\u003etitle: Jekyll-theme-next添加Valine评论系统\ndate: 2019-03-18 19:42:02\ncategories:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBlog\ntags:\u003c/li\u003e\n\u003cli\u003eblog\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003e给Jekyll添加Valine评论系统\u003c/p\u003e","title":"Jekyll-theme-next添加Valine评论系统"},{"content":"背景 在使用R进行循环操作时，出现错误，为了对错误进行分析，使用tryCatch()函数抓取处理错误\n使用 tryCatch常用的三种用法:\n抓取错误 tryCatch(libray(test), error = function(e){print(\u0026#34;出现错误\u0026#34;)} ) ## [1] \u0026#34;出现错误\u0026#34; 释义：当加载test包时，出现错误，执行error函数\n这里很适合在循环中出现错误的情况，可以对错误的循环结果进行赋值\n抓取警告和错误 tryCatch(stop(\u0026#34;test\u0026#34;), warning = function(w){print(\u0026#34;出现警告\u0026#34;)}, finally={ print(\u0026#34;test\u0026#34;) }) ## Error in doTryCatch(return(expr), name, parentenv, handler) : test ## [1] \u0026#34;test\u0026#34; 释义：执行语句出错，打印出错误，并执行finally函数\n如果单独只有warning函数，则只是打印错误\n继续执行 tryCatch(a = 1, finally={print(\u0026#34;我是个测试\u0026#34;)}) ## Error in tryCatchList(expr, classes, parentenv, handlers) : ## argument \u0026#34;expr\u0026#34; is missing, with no default ## [1] \u0026#34;我是个测试\u0026#34; finally函数无论错与对都会执行\n封装函数 log_calculator \u0026lt;- function(x){ tryCatch( expr = { message(log(x)) message(\u0026#34;Successfully executed the log(x) call.\u0026#34;) }, error = function(e){ message(\u0026#39;Caught an error!\u0026#39;) print(e) }, warning = function(w){ message(\u0026#39;Caught an warning!\u0026#39;) print(w) }, finally = { message(\u0026#39;All done, quitting.\u0026#39;) } ) } 测试结果如下：\n如果x是有效数字，则expr和finally被执行： log_calculator(-10) ## Caught an warning! ## \u0026lt;simpleWarning in log(x): NaNs produced\u0026gt; ## All done, quitting. 如果x不是有效数字，则expr会报错，warning和finally被执行： log_calculator(\u0026#34;10\u0026#34;) ## Caught an error! ## \u0026lt;simpleError in log(x): non-numeric argument to mathematical function\u0026gt; ## All done, quitting. ","permalink":"http://localhost:1313/en/posts/tech/trycatch/","summary":"背景 在使用R进行循环操作时，出现错误，为了对错误进行分析，使用tryCatch()函数抓取处理错误 使用 tryCatch常用的三种用法: 抓取错误 tryCatch(libray(test), error = function(e){print(\u0026#34;出现错误\u0026#34;)} ) ## [1] \u0026#34;出现错误\u0026#34; 释义：当加载test包时，出现","title":"tryCatch抓取错误"},{"content":"超几何分布 超几何分布是统计学上一种离散概率分布。它描述了由有限个物件中抽出$n$个物件，成功抽出指定种类的物件的个数的概率（不归还）。\n黑白球问题解释：例如共有$N$个球，其中$m$个白球。超几何分布描述了在该$N$个球中抽出$n$个，其中$k$个是白球的机率：\n$$ f(k;n,m,N) = \\frac{\\binom{m} {k} \\binom {N-m} {n-k}} {\\binom {N} {n}} $$ 上式可如此理解：\n$\\left( N \\over n\\right)$表示所有在$N$个样本中抽出$n$个，而抽出的结果不一样的数目。\n$\\left(m \\over k\\right)$表示在$m$个样本中，抽出$k$个的方法数目。剩下来的样本都是及格的，而及格的样本有$N-m$个，剩下的抽法便有$\\left({N-m} \\over {n-k}\\right)$种。\n若$n=1$，超几何分布还原为伯努利分布。若$N$接近 $\\infty$，超几何分布可视为二项分布\n二项分布 在概率论和统计学中，二项分布（英语：Binomial distribution）是n个独立的是/非试验中成功的次数的离散概率分布，其中每次试验的成功概率为$p$。这样的单次成功/失败试验又称为伯努利试验。实际上，当$n=1$时，二项分布就是伯努利分布。\n具体解释：\n假设进行$n$次独立实验，每次实验“成功”的概率为$p$，失败的概率为$1-p$，所有成功的次数X就是一个参数为$n$和$p$的二项随机变量.数学公式定义为：\n$$ p(k) = \\binom {n} {k} * p^k * (1-p)^{n-k} $$ 二项分布公式基于伯努利分布得到，因为二项分布中每项实验都是独立的，因此每一次实验都是一次伯努利实验，在$n$次实验中，成功$k$次，排列方式有$\\left( {n \\over k} \\right)$种，根据乘法原理，即可得到二项分布的公式。\n总结 超几何分布相当于连续抽取$n$次成功的概率（不放回抽样），二项分布是重复抽$n$次成功的概率（放回抽样）。\n","permalink":"http://localhost:1313/en/posts/tech/hypergeometric/","summary":"超几何分布 超几何分布是统计学上一种离散概率分布。它描述了由有限个物件中抽出$n$个物件，成功抽出指定种类的物件的个数的概率（不归还）。 黑白球问题解释：例如共有$N$个球，其中$m$个白球。超几何分布描述了在该$N$个球中抽出$n$个，其中$k$个是白球的机率： $$ f(k;n,m,N) = \\frac{\\binom{m} {k} \\binom {N-m} {n-k}} {\\binom {N}","title":"超几何分布和二项分布"},{"content":"基本概念 Fisher精确检验是用于分析列联表的统计显着性检验。虽然在实践中它适用于样本量较小的情况，但实际上它适用于所有样本量。它可以精确的计算出差异的显著性p值，而不是卡方检验得到的近似p值。\n理论依据 Fisher精确检验是基于超几何分布计算的，它分为两种，分别是单边检验（等同于超几何检验）和双边检验。\n超几何分布是统计学上一种离散概率分布。它描述了由有限个物件中抽出n个物件，成功抽出指定种类的物件的次数（不归还）。称为超几何分布，是因为其形式与“超几何函数”的级数展式的系数有关。超几何分布的一个形象例子是：有N件物品，M件为次品，求取n件，其中有k件为次品的概率 = $\\frac {\\binom {M} {k} * \\binom {N-M} {n-k}} {\\binom {N} {n}}$\n基本思想 在2*2列联表中，四格表周边和（即边际分布）计数固定不变的条件下，计算表内4个实际频数变动时的各种组合之概率Pi；再按照检验假设用单侧或双侧的累计概率P，依据所取的检验水准做出推断。\n具体操作 假如想要知道学习好坏是否和男女性别有关，那么现在随机抽出20个人，对应的统计列联表如下：\n男 女 行总数 好 9 3 12 坏 1 7 8 列总数 10 10 20 零假设：男女性别和学习好坏无关\n为了知道能否拒绝零假设，我们下面做个Fisher精确检验（单侧检验）\n第一步：在零假设成立时（即性别与学习好坏无关），我们随机一抽就能抽出这20个样本的概率是（超几何概率）：\n$$ p_1 = {\\binom{12} {9} \\binom{8} {1} \\over \\binom{20} {10}} = 0.0095 $$ 第二步：如果行总数与列总数（又叫边际总数）不变，零假设不成立时的极端情况应该是，男生学习都好，那么我们可以得到新的列联表：\n男 女 行总数 好 10 2 12 坏 0 8 8 列总数 10 10 20 这时，可以计算这个表格的超几何概率：\n$$ p_2 = {\\binom{12} {10} \\binom{8} {0} \\over \\binom{20} {10}} = 3.5723 \\times 10^{-4} $$ 那么Fisher精确检验的P value就是两者加和，即\n$$ p_1 + p_2 = 0.0099 $$ p值越小，我们越有信心拒绝零假设。如果我们以0.05为显著性水平判断值的话，我们可以认为，男生的学习更好\n注意：以上例子计算的是单侧检验的结果，对于双侧结果，一般是说在所有四格表的组合当中，将概率小于或等于原四格表的概率相加，得到双侧概率（需要进一步验证这种说法）\n思考 Fisher精确检验是基于超几何分布检验的，相对于卡方检验来说，适用于小样本量的计算（卡方检验是通过大样本量来近似卡方分布求得近似的p值）\n","permalink":"http://localhost:1313/en/posts/tech/fisher/","summary":"基本概念 Fisher精确检验是用于分析列联表的统计显着性检验。虽然在实践中它适用于样本量较小的情况，但实际上它适用于所有样本量。它可以精确的计算出差异的显著性p值，而不是卡方检验得到的近似p值。 理论依据 Fisher精确检验是基于超几何分布计算的，它分为两种，分别是单边检验（等同于","title":"Fisher精确检验"},{"content":"背景 本篇文章主要收集R语言绘图配色可能用到的一些方案，网站等信息，持续更新ing….\n网站 colorbrewer 这个网站中包含多种可视化主题，RColorBrewer包中的配色方案来源于此\nR语言中的色彩和调色板 该博文中介绍了介绍了几种常见的R的色彩配色\nRGB颜色表 提供了各种颜色对应的RGB和16色代码\n更新ing… …\n","permalink":"http://localhost:1313/en/posts/tech/color/","summary":"背景 本篇文章主要收集R语言绘图配色可能用到的一些方案，网站等信息，持续更新ing…. 网站 colorbrewer 这个网站中包含多种可视化主题，RColorBrewer包中的配色方案来源于此 R语言中的色彩和调色板 该博文中介绍了介绍了几种常见的R的色彩配色 RGB颜色表 提供了各种颜色对应的RGB和16色代码","title":"绘图配色"},{"content":"什么是Markdown Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档”。作为一种小型标记语言，Markdown很容易阅读，也很容易使用普通的文本编辑器编辑。\nMarkdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。\n亚伦·斯沃茨的传奇人生 Markdown是由Aaron Swartz和John Gruber共同设计的，Aaron Swartz就是那位于2013年自杀,有着开挂一般传奇人生经历的美国程序员。死后也被追授入互联网名人堂。维基百科对他的评价是：美国计算机程序员、企业家、作家、政治活动者和互联网黑客主义者\n他的一生足以让我们膜拜：\n13岁时，斯沃茨赢得为创办“有用、有教育意义、协作而非商业的网站”的年轻人而设的ArsDigita奖。 14岁时，斯沃茨加入编写早期版本的RSS1.0版本的工作组。 2004年入读斯坦福，2005年暑假之后就退学创业。。。 2005年创建Infogami，之后与Reddit合并成为其合伙人，斯沃茨被给予公司联合创始人的头衔。 2008 年，斯沃茨创办了 Watchdog.net，“会咬人的优秀政府类网站”（”the good government site with teeth”），用于汇集政治人物相关的数据起来并进行数据可视化。此外，他最著名的项目之一是《DeadDrop》（之后更名为《SecureDrop》），一个致力于帮助记者和线人（告密者）安全沟通的平台。 2010年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。 2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。 2013年1月自杀身亡，死后仍然影响着世界各地的黑客。 科里·多克托罗的评价：亚伦拥有无以伦比的政治洞见力、技术能力和处理人、事的智能。我认为他本可以彻底改变美国（及世界）政治。不过——他的遗产仍然可以在将来对政治做出影响。 Markdown的优点 易读（看起来舒服）、易写（语法简单）、易更改纯文本 与HTML兼容，是属于程序员的Word 排版方便 越来越多的网站支持Markdown。（主要还是写博客方便😜） Markdown常用语法 标题 标题一般有两种形式： 1）使用=和-标记一级和二级标题。\n一级标题\n========= 二级标题\n---------\n效果：\n一级标题 二级标题 2）使用#，可表示1-6级标题。\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n效果:\n一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 段落 Markdown的段落前后都要有空行，如果要段内强制换行，需要使用两个以上空格键加上回车键\n区块引用 在段落的每行或者只在第一行使用符号\u0026gt;,还可使用多个嵌套引用，如：\n\u0026gt;区块引用 \u0026gt;\u0026gt; 嵌套引用\n效果：\n区块引用\n嵌套引用\n插入代码块 代码区块的建立有两种方法： 1）在每行加上4个空格或者一个制表符，如：\nHello Markdown 注意:和普通段落之间需要单独保留空行。\n2）使用三个**```** 来作为代码开始的标志，如：\n``` Hello Markdown ```\n效果如下：\nHello Markdown 黑体和斜体 在强调内容两侧分别加上*或者_，如：\n*斜体*，斜体\n**粗体**，粗体\n列表 无序列表 使用·、+、或-标记无序列表，如：\n-（+*） 第一项\n-（+*） 第二项\n-（+*）第三项\n注意：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。\n效果：\n第一项 第二项 第三项 有序列表的标记方式是将上述的符号换成数字,并辅以.，如：\n1 . 第一项\n2 . 第二项 3 . 第三项\n效果：\n第一项 第二项 第三项 分割线 分割线最常使用就是三个或以上*，还可以使用-和_。\n注意： 第一二级标题会自带分割线\n链接 链接可以由两种形式生成：行内式和参考式。\n行内式：\n[*Aaron Swartz*](http://www.aaronsw.com/)\n效果：\nAaron Swartz\n参考式： 就是以参考的形式给出链接\n[*Aaron Swartz*][1]\n[*亚伦·斯沃茨*][2]\n效果：\nAaron Swartz 亚伦·斯沃茨\n图像插入 插入图片的语法和插入超链接的语法基本一致，只是在最前面多一个 !。也可分为行内式和参考式两种。\n![亚伦·斯沃茨](https://upload.wikimedia.org/wikipedia/commons/thumb/0/06/Aaron_Swartz_profile.jpg/220px-Aaron_Swartz_profile.jpg)\nMarkdown 不支持指定图片的显示大小，不过可以通过直接插入\u0026lt;img /\u0026gt;标签来指定相关属性。\n字符转义 反斜线（\\）用于插入在 Markdown 语法中有特殊作用的字符。\n行内代码块 起到标记作用。如：\n`hello`\n效果：\nhello\n扩展语法 删除线 使用~~表示\n~~删除线~~\n效果：\n删除线\n表格 使用|表示表格纵向边界，表头和表内容用-隔开，并可用:进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。\n| left | center | right | | :--- | :----: | ----: | | aaaa | bbbbbb | ccccc | | a | b | c | 效果如下：\nleft center right aaaa bbbbbb ccccc a b c 表格中不仅可以加入字符，还可以是链接等信息。\n","permalink":"http://localhost:1313/en/posts/blog/markdown/","summary":"什么是Markdown Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档”。作为一种小型标记语言，Markdown很容易阅读，也很容易使用普通的文本","title":"Markdown常用语法"},{"content":"卡方检验 卡方检验(Chi-square test/Chi-Square Goodness-of-Fit Test)\n基本概念 卡方检验是一种非参数假设检验，主要用于比较两个分类变量的关联性分析，其根本思想就是在于比较理论频数和实际频数的吻合程度或拟合优度问题。\n它在分类资料统计推断中的应用，包括：两个率或两个构成比比较的卡方检验；多个率或多个构成比比较的卡方检验以及分类资料的相关分析等。\n基本原理 基本思想 卡方检验是以χ2分布为基础的一种假设检验方法，它的原假设H0是：观察频数与期望频数没有差别。\n首先假设H0成立，基于此前提下计算出χ2值，它表示观察值与理论值之间的偏离程度。根据χ2分布及自由度可以确定在H0假设成立的情况下获得当前统计量及更极端情况的概率P。如果P值很小，说明观察值与理论值偏离程度太大，应当拒绝无效假设，表示比较资料之间有显著差异；否则就不能拒绝无效假设，尚不能认为样本所代表的实际情况和理论假设有差别。\n卡方值的计算与意义 对于χ2统计量的计算，最初是由英国统计学家Karl Pearson在1900年首次提出的，因此也称之为Pearson χ2，其计算公式为\n$$ \\chi^2=\\sum \\frac{(A-E)^2}{E}=\\sum_{i=1}^k \\frac{(A_i-E_i)^2}{E_i}=\\sum_{i=1}^k \\frac{(A_i-np_i)^2}{np_i}　(i=1，2，3，…，k) $$\n其中，Ai为i水平的观察频数，Ei为i水平的期望频数，n为总频数，pi为i水平的期望频率。i水平的期望频数Ei等于总频数n×i水平的期望概率pi，k为单元格数。当n比较大时，χ2统计量近似服从k-1(计算Ei时用到的参数个数)个自由度的卡方分布。\n由卡方的计算公式可知，当观察频数与期望频数完全一致时，χ2值为0；观察频数与期望频数越接近，两者之间的差异越小，χ2值越小；反之，观察频数与期望频数差别越大，两者之间的差异越大，χ2值越大。换言之，大的χ2值表明观察频数远离期望频数，即表明远离假设。小的χ2值表明观察频数接近期望频数，接近假设。因此，χ2是观察频数与期望频数之间距离的一种度量指标，也是假设成立与否的度量指标。如果χ2值“小”，研究者就倾向于不拒绝H0；如果χ2值大，就倾向于拒绝H0。至于χ2在每个具体研究中究竟要大到什么程度才能拒绝H0，则要借助于卡方分布求出所对应的P值来确定。\n样本量要求 卡方分布本身是连续型分布，但是在分类资料的统计分析中，显然频数只能以整数形式出现，因此计算出的统计量是非连续的。只有当样本量比较充足时，才可以忽略两者问的差异，否则将可能导致较大的偏差具体而言，一般认为对于卡方检验中的每一个单元格，要求其最小期望频数均大于1，且至少有4／5的单元格期望频数大于5，此时使用卡方分布计算出的概率值才是准确的。如果数据不符合要求，可以采用Fisher精确检验计算。\n卡方检验类型 四格表资料的卡方检验 四格表资料的卡方检验用于进行两个率或两个构成比的比较。\n(1) 公式\n若四格表资料四个格子的频数分别为a，b，c，d，则四格表资料卡方检验的卡方值=\n$$ (ad-bc)^2 \\times n/(a+b)(c+d)(a+c)(b+d) $$\n自由度v=(行数-1)(列数-1)\n(2) 应用条件\n要求样本含量应大于40且每个格子中的理论频数不应小于5。当样本含量大于40但理论频数有小于5的情况时卡方值需要校正，当样本含量小于40时只能用Fisher精确检验计算概率。\n行×列表资料的卡方检验 行×列表资料的卡方检验用于多个率或多个构成比的比较。\n(1) 公式\nr行c列表资料卡方检验的卡方值:\n$$ n[(A_{11}/n_1n_1+A_{12}/n_1n_2+\\cdots+A_{rc}/n_rn_c)-1] $$\n(2) 应用条件\n要求每个格子中的理论频数T均大于5或1\u0026lt;T\u0026lt;5的格子数不超过总格子数的1/5。当有T\u0026lt;1或1\u0026lt;T\u0026lt;5的格子较多时，可采用并行并列、删行删列、增大样本含量的办法使其符合行×列表资料卡方检验的应用条件。\n列联表资料的卡方检验 同一组对象，观察每一个个体对两种分类方法的表现，结果构成双向交叉排列的统计表就是列联表。\n用途 检验某个连续变量的分布是否与某种理论分布相一致。 检验某个分类变量各类的出现概率是否等于指定概率。 检验某两个分类变量是否相互独立。(最常见到的） 检验某两种方法的结果是否一致。 应用条件 所有的理论数T≥5并且总样本量n≥40，用Pearson卡方进行检验。 如果理论数T＜5但T≥1，并且1≥40，用连续性校正的卡方进行检验。 如果有理论数T＜1或n＜40，则用Fisher’s检验。 Reference 卡方检验-MBA智库百科\n","permalink":"http://localhost:1313/en/posts/tech/chisq/","summary":"卡方检验 卡方检验(Chi-square test/Chi-Square Goodness-of-Fit Test) 基本概念 卡方检验是一种非参数假设检验，主要用于比较两个分类变量的关联性分析，其根本思想就是在于比较理论频数和实际频数的吻合程度或拟合优度问题。 它在分类资料统计推断中的应用，包括：两个率或两个构成比比较的卡方检验；多个率或多个构成比比较的","title":"卡方检验的原理及应用"},{"content":"R语言是一门主要用于统计计算和绘图的高级编程语言. 在使用R时，好的代码编写和注释规范，可以提高代码的可读性和工作效率. 然而，什么样的规范更有利于我们自己使用和第三方解读？在此，建议使用《来自Google的R语言编码风格指南》一文中推荐的代码写作风格，这个规则是由Google的R用户群体协同设计而成.\n1. 表示和命名 文件命名 文件名应以 .R (大写) 结尾, 文件名本身要有意义. 如: predict_ad_revenue.R\n标识符命名 在标识符中不要使用下划线 ( _ ) 或连字符 ( - ). 标识符应根据如下惯例命名. 变量名应使用点 (.) 分隔所有的小写字母或单词; 函数名首字母大写, 不用点分隔 (所含单词首字母大写); 常数命名规则同函数, 但需使用一个 k 开头.\n变量命名 正例: avg.clicks 反例: avg_Clicks , avgClicks FunctionName 正例: CalculateAvgClicks 反例: calculate_avg_clicks , calculateAvgClicks 函数命名应为动词或动词性短语. 例外: 当创建一个含类 (class) 属性的对象时, 函数名 (也是constructor) 和类名 (class) 应当匹配 (例如, lm).\nkConstantName 2. 语法 单行长度 最大单行长度为 80 个字符.\n缩进 使用两个空格来缩进代码. 永远不要使用制表符或混合使用二者. 例外: 当括号内发生折行时, 所折行与括号内的第一个字符对齐.\n空白 在所有二元操作符 (=, +, -, \u0026lt;-, 等等) 的两侧加上空格. 例外: 在函数调用中传递参数时 = 两边的空格可加可不加.\n不可在逗号前加空格, 逗号后总须加空格.\n例如:\ntabPrior \u0026lt;- table(df[df$daysFromOpt \u0026lt; 0, \u0026#34;campaignid\u0026#34;]) total \u0026lt;- sum(x[, 1]) total \u0026lt;- sum(x[1, ]) 在前括号前加一个空格, 函数调用时除外. 例如：\nif (debug) 多加空格 (即, 在行内使用多于一个空格) 也是可以的, 如果这样做能够改善等号或箭头 (\u0026lt;-) 的对齐效果.\nplot(x = xCoord, y = dataMat[, makeColName(metric, ptiles[1], \u0026#34;roiOpt\u0026#34;)], ylim = ylim, xlab = \u0026#34;dates\u0026#34;, ylab = metric, main = (paste(metric, \u0026#34; for 3 samples \u0026#34;, sep=\u0026#34;\u0026#34;))) 不要向圆括号或方括号中的代码两侧加入空格. 例外: 逗号后总须加空格.\n以下写法就是错误的：\nif ( debug ) # debug 的两边不要加空格 x[1,] # 需要在逗号后加一个空格 花括号 前括号永远不应该独占一行; 后括号应当总是独占一行. 您可以在代码块只含单个语句时省略花括号; 但在处理这类单个语句时, 您必须 前后一致地 要么全部使用花括号, 或者全部不用花括号.\n例如：\nif (is.null(ylim)) { ylim \u0026lt;- c(0, 0.06) } 或者：\nif (is.null(ylim)) ylim \u0026lt;- c(0, 0.06) 总在新起的一行开始书写代码块的主体。\n赋值 使用 \u0026lt;- 进行赋值, 不用 = 赋值\n分号 不要以分号结束一行, 也不要利用分号在同一行放多于一个命令. (分号是毫无必要的, 并且为了与其他Google编码风格指南保持一致, 此处同样略去.)\n3. 代码组织 总体布局和顺序 如果所有人都以相同顺序安排代码内容, 我们就可以更加轻松快速地阅读并理解他人的脚本了.\n版权声明注释 作者信息注释 文件描述注释, 包括程序的用途, 输入和输出 source() 和 library() 语句 函数定义 要执行的语句, 如果有的话 (例如, print, plot) 单元测试应在另一个名为 原始的文件名_unittest.R 的独立文件中进行 注释准则 注释您的代码. 整行注释应以 # 后接一个空格开始.\n行内短注释应在代码后接两个空格, #, 再接一个空格.\n# Create histogram of frequency of campaigns by pct budget spent. hist(df$pctSpent, breaks = \u0026#34;scott\u0026#34;, # method for choosing number of buckets main = \u0026#34;Histogram: fraction budget spent by campaignid\u0026#34;, xlab = \u0026#34;Fraction of budget spent\u0026#34;, ylab = \u0026#34;Frequency (count of campaignids)\u0026#34;) 函数的定义和调用 函数定义应首先列出无默认值的参数, 然后再列出有默认值的参数.\n函数定义和函数调用中, 允许每行写多个参数; 折行只允许在赋值语句外进行.\n例如：\nPredictCTR \u0026lt;- function(query, property, numDays, showPlot = TRUE) 理想情况下, 单元测试应该充当函数调用的样例 (对于包中的程序来说).\n函数文档 函数在定义行下方都应当紧接一个注释区. 这些注释应当由如下内容组成: 此函数的一句话描述; 此函数的参数列表, 用 Args: 表示, 对每个参数的描述 (包括数据类型); 以及对于返回值的描述, 以 Returns: 表示. 这些注释应当描述得足够充分, 这样调用者无须阅读函数中的任何代码即可使用此函数.\n示例函数 CalculateSampleCovariance \u0026lt;- function(x, y, verbose = TRUE) { # Computes the sample covariance between two vectors. # # Args: # x: One of two vectors whose sample covariance is to be calculated. # y: The other vector. x and y must have the same length, greater than one, # with no missing values. # verbose: If TRUE, prints sample covariance; if not, not. Default is TRUE. # # Returns: # The sample covariance between x and y. n \u0026lt;- length(x) # Error handling if (n \u0026lt;= 1 || n != length(y)) { stop(\u0026#34;Arguments x and y have invalid lengths: \u0026#34;, length(x), \u0026#34; and \u0026#34;, length(y), \u0026#34;.\u0026#34;) } if (TRUE %in% is.na(x) || TRUE %in% is.na(y)) { stop(\u0026#34; Arguments x and y must not have missing values.\u0026#34;) } covariance \u0026lt;- var(x, y) if (verbose) cat(\u0026#34;Covariance = \u0026#34;, round(covariance, 4), \u0026#34;.\\n\u0026#34;, sep = \u0026#34;\u0026#34;) return(covariance) } TODO书写风格 编码时通篇使用一种一致的风格来书写TODO. TODO(您的用户名): 所要采取行动的明确描述\nReference：\n来自Google的R语言编码风格指南\n","permalink":"http://localhost:1313/en/posts/read/r_format/","summary":"R语言是一门主要用于统计计算和绘图的高级编程语言. 在使用R时，好的代码编写和注释规范，可以提高代码的可读性和工作效率. 然而，什么样的规范更有利于我们自己使用和第三方解读？在此，建议使用《来自Google的R语言编码风格指南》一文中推荐的代码写作风格，这个规则是由Google的R用","title":"R语言代码规范"},{"content":"ROC和AUC简介 ROC（Receiver Operating Characteristic）曲线和AUC常被用来评价一个二值分类器（binary classifier）的优劣，对两者的简单介绍见wiki百科这篇博文主要简单介绍ROC和AUC的特点，以及如何通过R语言绘制ROC曲线和计算AUC值。\nROC曲线意义 在这里，我们只讨论二值分类的情况，即“非此即彼”。一般对于二分问题来说，预测分类的结果有四种情况：\n真阳性（TP）：预测为正样本，真实也是正样本。 伪阳性（FP）：预测为正样本，而真实是负样本。 真阴性（TN）：预测为负样本，真实也是负样本。 伪阴性（FN）：预测为负样本，而真实是正样本。 用列联表表示其结果，如下所示，1代表正样本，0代表负样本： 在这里需要引入两个名词： 真阳性率 (TPR, true positive rate) ：又称：命中率 (hit rate)、敏感度(sensitivity) TPR = TP / P = TP / (TP+FN) 伪阳性率(FPR, false positive rate) ：又称：错误命中率，假警报率 (false alarm rate) FPR = FP / N = FP / (FP + TN)\n给定一个二元分类模型和它的阈值，就能从所有样本的（阳性／阴性）真实值和预测值计算出一个 (X=FPR, Y=TPR) 座标点。如下图所示：\n接下来，我们考虑ROC曲线图中的四个点和一条线。第一个点，(0,1)，即FPR=0, TPR=1，这意味着这是一个完美的分类器，它能够将所有的样本都正确分类。第二个点，(1,0)，即FPR=1，TPR=0，说明这个分类器完全无效能可言，将所有的样本都错误的分类。第三个点，(0,0)，即FPR=TPR=0，说明所有的样本全是负样本。类似的，第四个点（1,1），分类器实际上预测所有的样本都为正样本。经过以上的分析，我们可以发现ROC曲线越接近左上角，说明分类器的分类效能越好。\n下面考虑ROC曲线图中的虚线y=x上的点。这条对角线上的点其实表示的是一个采用随机猜测策略的分类器的结果，例如(0.5,0.5)，表示该分类器随机对于一半的样本猜测其为正样本，另外一半的样本为负样本。\nROC曲线绘制原理 对于一个分类器来说，其特点是“概率输出”,即分类一个样本是根据这个样本有多大概率是正样本（或负样本）来确定的。因此当分类器模型的阈值变化时，样本的分类情况也会发生改变，每种阈值的设定会得出不同的FPR和TPR。将同一分类器模型每个阈值的 (FPR, TPR) 座标都画在ROC空间里，就成为特定模型的ROC曲线。\n假如我们已经得到了所有样本的概率输出（属于正样本的概率），现在的问题是如何改变“discrimination threashold”？我们根据每个测试样本属于正样本的概率值从大到小排序。下图是一个示例，图中共有20个测试样本，“Class”一栏表示每个测试样本真正的标签（p表示正样本，n表示负样本），“Score”表示每个测试样本属于正样本的概率\n我们从高到低，依次将“Score”值作为阈值threshold，当测试样本属于正样本的概率大于或等于这个threshold时，我们认为它为正样本，否则为负样本。举例来说，对于图中的第4个样本，其“Score”值为0.6，那么样本1，2，3，4都被认为是正样本，因为它们的“Score”值都大于等于0.6，而其他样本则都认为是负样本。每次选取一个不同的threshold，我们就可以得到一组FPR和TPR，即ROC曲线上的一点。这样一来，我们一共得到了20组FPR和TPR的值，将它们画在ROC曲线的结果如下图：\n当我们将threshold设置为1和0时，分别可以得到ROC曲线上的(0,0)和(1,1)两个点。将这些(FPR,TPR)对连接起来，就得到了ROC曲线。当threshold取值越多，ROC曲线越平滑。\nAUC的意义 AUC（Area Under Curve），又称为曲线下面积，其意义为随机抽取一个阳性样本和一个阴性样本，分类器正确判断阳性样本的值高于阴性样本的机率。AUC值越大，说明当前分类器分类的正确率越高，分类器模型也就越好。\nAUC = 1，是完美分类器，采用这个预测模型时，存在至少一个阈值能得出完美预测。绝大多数预测的场合，不存在完美分类器。 0.5 \u0026lt; AUC \u0026lt; 1，优于随机猜测。这个分类器（模型）妥善设定阈值的话，能有预测价值。 AUC = 0.5，跟随机猜测一样（例：丢铜板），模型没有预测价值。 AUC \u0026lt; 0.5，比随机猜测还差；但只要总是反预测而行，就优于随机猜测。 图形示例如下：\nReference ROC和AUC介绍以及如何计算AUC ROC曲线- 维基百科，自由的百科全书 ","permalink":"http://localhost:1313/en/posts/tech/roc_auc/","summary":"ROC和AUC简介 ROC（Receiver Operating Characteristic）曲线和AUC常被用来评价一个二值分类器（binary classifier）的优劣，对两者的简单介绍见wiki百科这篇博文主要简单介绍ROC和AUC的特点，以及如何通过R语言绘制ROC曲线和计算AUC值。 RO","title":"ROC曲线和AUC"},{"content":"Git的基本使用方法 Git简介 Git是一个功能强大的分布是版本控制系统，由linux系统的创始人Linus创建，用于优化管理linux源码。Git具有强大的分支管理能力，对于代码集成管理具有超越其他集中式版本控制系统的优势。\nGit安装 在windows上安装Git，只需要从Git官网下载安装程序，按照默认选项安装即可。\n最终，安装完成后，在开始菜单里找到“Git”-\u0026gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！\n安装完成后需要进行一步设置，在Git Bash中输入命令行\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;email@example.com\u0026#34; 因为Git是分布式版本控制系统，所以，每个电脑必须有自己的ID：你的名字和Email地址。\n注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\nGit的基本原理 在Git中,主要有两部分组成：工作区和版本库，而版本库又分为暂存区和分支。\n当你创建编辑一个文件后，首先需要将文件从工作区添加到版本库的暂存区，然后再从暂存区提交的Git的分支系统上。\n个人认为，从工作区到暂存区的过程相当于将文件的所有更改日志依次保存在暂存区，而从暂存区提交到Git分支的过程则是一次性提交所有的更改\n本地仓库的使用 版本库又名仓库，英文名repository，可以理解成一个文件夹,这个文件夹下的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。\n创建仓库 找合适的地方，创建一个空目录，创建并进入，一般不要用中文的目录名，容易出现问题.\nmakdir learngit cd learngit 初始化仓库 git init 命令将这个目录变成可以管理的版本仓库（git repository）\ngit init Initialized empty Git repository in /home/deepin/learngit/.git/ 此时你已经创建了一个空的版本库，可以发现当前目录下多了一个.git目录，这个目录就是git用来跟踪管理版本仓库的，不要去手动修改。\ndeepin@deepin-PC:~/learngit$ ls -a . .. .git 添加文件到仓库 把文件添加到版本库，如果没有任何提示信息则为成功添加\ngit add README.md 把文件提交到版本库\ngit commit -m \u0026#34;this is a README.md file\u0026#34; 双引号中输入的是文件描述信息，是对此次文件提交的说明\n同样，你也可以一次提交多个文件\ngit add file1.txt git add file2.txt git add file3.txt git commit -m \u0026#34;add 3 files.\u0026#34; 添加远程仓库 当你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，使两个仓库能够远程同步，以下操作可以帮你实现\n首先需要在远端github账户中创建自己的仓库 在本地使用git命令添加远程仓库 git remote add origin \u0026lt;adress\u0026gt; #最后是远程仓库地址 添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库\n然后就可以向远端仓库push文件 git push -u origin master 这条命令实际上是把本地master分支推送到远程仓库上，使用-u参数Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\nGit的基本命令 添加文件 使用命令git add \u0026lt;file\u0026gt;，注意，可反复多次使用，添加多个文件； 使用命令git commit -m \u0026lt;message\u0026gt; 提交文件到仓库，添加提交注释信息 状态查看 git status查看repository的状态，git diff查看修改了哪些内容\n文件修改 git status可以查看当前版本库中文件的提交状态 git rm可以删除某一文件 版本退回 git reset命令可以使文件退回之前的版本或者从之前的版本回到修改后的版本\n在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。\ngit log命令可以查看提交历史，以便确定要回退到哪个版本。 git reflog可以查看命令历史，以便确定要回到未来的哪个版本。 回退到以前的版本A之后，用git log命令就找不到A之后的版本了，如果想回到之后的版本，需要git reset --hard commitID，但是如果不记得commitID,可以用git reflog，它记录了每一个命令\n常用的git命令 git init #使当前目录变成可以管理的版本仓库（git repository) git add filename #将文件添加到版本仓库 git commit -m \u0026#34;description\u0026#34; #把文件提交到仓库 git status #查看repository的状态 git diff #查看修改了哪些内容 git log #查看提交日志 git log --pretty=oneline #简洁地显示提交日志 git reset --hard HEAD~\u0026lt;3\u0026gt; #回退到某个版本，比如这里回退到第前3个版本 git reset --hard \u0026lt;commit ID\u0026gt; #回退到特定ID的版本 git reflog #记录了每个命令，可以用来查看每个操作的编号 git checkout -b \u0026lt;branch\u0026gt; #创建并切换分支 git branch #查看当前分支 Git 配置多个账户 这里分两种情况：\n一个账户已经进行了配置，添加另外一个账户 同时配置两个git账户 假如之前你已经有账户进行了git的全局设置，那么首先需要解除git全局用户名/邮箱的设置\ngit config --global --unset \u0026#34;user.name\u0026#34; git config --global --unset \u0026#34;user.email\u0026#34; ``` 如果之前并未进行全局设置，则直接开始设置每个仓库独立的用户和邮箱 ```shell #设置第一个用户/邮箱 git config user.email \u0026#34;A@gmail.com\u0026#34; git config user.name \u0026#34;A\u0026#34; #设置第二个用户/邮箱 git config user.email \u0026#34;B@163.com\u0026#34; git config user.name \u0026#34;B\u0026#34; 在进行单用户操作时我们只需要通过：\nssh-keygen -t rsa -f -C \u0026#34;yourmail@xxx.com\u0026#34; 命令直接产生相应的密钥/公钥，但是在多用户的情况下,直接产生两次密钥/公钥会将第一次产生的密钥/公钥覆盖掉。因此，进行多用户操作时，需要指定产生的密钥名称，避免覆盖。\n#创建A账户的密钥、公钥 ssh-keygen -t rsa -f ~/.ssh/id_rsa_A -C \u0026#34;A@gmail.com\u0026#34; ssh-keygen -t rsa -f ~/.ssh/id_rsa_B -C \u0026#34;B@163.com\u0026#34; 此时会在用户的.ssh文件夹下产生id_rsa_A、id_rsa_A.pub和id_rsa_B、id_rsa_B.pub两对密钥/公钥。\n3. 设置config文件 在.ssh文件夹下创建config文件,配置不同的仓库指向不同的密钥文件。\n# A账号 Host A #host别名 HostName github.com #服务器域名 User git #A账号用户名 IdentityFile ~/.ssh/id_rsa # B账号 Host B #host别名 HostName github.com #服务器域名 User git #B账号用户名 IdentityFile ~/.ssh/id_rsa_x 原理解析 1.ssh 客户端是通过类似 git@github.com:githubUserName/repoName.git ** 的地址来识别使用本地的哪个私钥的，地址中的 User 是@前面的git， Host 是@后面的github.com。 2.如果所有账号的 User 和 Host 都为 git 和 github.com，那么就只能使用一个私钥。所以要对User 和 Host 进行配置，让每个账号使用自己的 Host，即使用上面的别名来代替域名。 3.配置了别名之后，新的地址就是git@A:githubUserName/repName.git**（在添加远程仓库时使用）。这样 ssh 在连接时就可以区别不同的账号了。\n把相应的公钥添加到账户的SSH设置当中，这样git就可以识别不同的账户了。\n","permalink":"http://localhost:1313/en/posts/tech/git/","summary":"Git的基本使用方法 Git简介 Git是一个功能强大的分布是版本控制系统，由linux系统的创始人Linus创建，用于优化管理linux源码。Git具有强大的分支管理能力，对于代码集成管理具有超越其他集中式版本控制系统的优势。 Git安装 在windows上安装Git，只需要从Git官","title":"git | 基本用法"},{"content":"载入需要的R包 survival用于计算生存分析\nsurvminer用于可视化生存分析结果\nlibrary(\u0026#34;survival\u0026#34;) library(\u0026#34;survminer\u0026#34;) 计算COX model : coxph() coxph 可以用于构建计算 Cox proportional hazards regression model，常见用法如下：\ncoxph(formula, data, method) formula : 是通过\tSurv构建的生存对象 ，如：Surv(time, event)\ndata：包含变量的data.frame\nmethod：计算各项指标所用的检验方法\nUnivariate Cox regression 以survival包提供的lung数据为例，进行单变量的cox回归分析\nres.cox \u0026lt;- coxph(Surv(time, status) ~ sex, data = lung) res.cox Call: coxph(formula = Surv(time, status) ~ sex, data = lung) coef exp(coef) se(coef) z p sex -0.531 0.588 0.167 -3.18 0.0015 Likelihood ratio test=10.6 on 1 df, p=0.00111 n= 228, number of events= 165 使用summary函数显示更加详细的结果：\nsummary(res.cox) Call: coxph(formula = Surv(time, status) ~ sex, data = lung) n= 228, number of events= 165 coef exp(coef) se(coef) z Pr(\u0026gt;|z|) sex -0.5310 0.5880 0.1672 -3.176 0.00149 ** --- Signif. codes: 0 \u0026#39;*\u0026#39; 0.001 \u0026#39;\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 exp(coef) exp(-coef) lower .95 upper .95 sex 0.588 1.701 0.4237 0.816 Concordance= 0.579 (se = 0.022 ) Rsquare= 0.046 (max possible= 0.999 ) Likelihood ratio test= 10.63 on 1 df, p=0.001111 Wald test = 10.09 on 1 df, p=0.001491 Score (logrank) test = 10.33 on 1 df, p=0.001312 结果的各项指标解释如下：\nStatistical significance. z值给出了Wald统计值。它对应于每个回归系数与其标准误差的比率（z = coef / se（coef））。 wald统计量评估给定变量的系数（β）是否在统计学上显著，由上可知，变量性别具有高度统计上显著的系数。 The regression coefficients. Cox模型结果中要注意的第二个特征是回归系数（coef）的符号。如果回归系数为正值，说明死亡风险高，预后差；为负值，则风险低，预后好。 R给出的是第二组相对于第一组的风险比（HR），即女性对男性。在这些数据中，性别的β系数= -0.53表明女性的死亡风险（低存活率）低于男性。 Hazard ratios. 指数系数（exp（coef）= exp（-0.53）= 0.59）也称为风险比，给出协变量的效应大小。 例如，女性（性别= 2）的风险降低了0.59倍，即41％。 女性与预后良好相关。 Confidence intervals of the hazard ratios. 给出了风险比（exp（coef））的95％置信区间的上限和下限。 Global statistical significance of the model. 三个检验模型的P值：The likelihood-ratio test, Wald test, and score logrank statistics.这三种方法是类似的，如果样本量足够大，则三个方法会得到相同的结果，当样本量较小时，The likelihood-ratio test能得到较好的结果。 Multivariate Cox regression analysis 当我们纳入多个变量时，我们可以这样操作：\nres.cox \u0026lt;- coxph(Surv(time, status) ~ age + sex + ph.ecog, data = lung) summary(res.cox) Call: coxph(formula = Surv(time, status) ~ age + sex + ph.ecog, data = lung) n= 227, number of events= 164 (1 observation deleted due to missingness) coef exp(coef) se(coef) z Pr(\u0026gt;|z|) age 0.011067 1.011128 0.009267 1.194 0.232416 sex -0.552612 0.575445 0.167739 -3.294 0.000986 *** ph.ecog 0.463728 1.589991 0.113577 4.083 4.45e-05 *** --- Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 exp(coef) exp(-coef) lower .95 upper .95 age 1.0111 0.9890 0.9929 1.0297 sex 0.5754 1.7378 0.4142 0.7994 ph.ecog 1.5900 0.6289 1.2727 1.9864 Concordance= 0.637 (se = 0.026 ) Rsquare= 0.126 (max possible= 0.999 ) Likelihood ratio test= 30.5 on 3 df, p=1.083e-06 Wald test = 29.93 on 3 df, p=1.428e-06 Score (logrank) test = 30.5 on 3 df, p=1.083e-06 由上可知：在三种检验方法中，p值都是显著的。这表明了该模型的重要性。\n在多变量Cox分析中，协变量sex和ph.ecog仍然显着（p \u0026lt;0.05）。然而，协变量age并不显着（p = 0.23）。\nsex的p值为0.000986，危险比HR = exp（coef）= 0.58，表明患者性别与死亡风险降低之间有很强的关系。协变量的风险比可以解释为对风险的倍增效应。例如，将其他协变量保持不变，即女性（sex= 2）可将风险降低0.58倍，即降低42％。我们的结论是，女性与良好的预后相关。\n类似地，ph.ecog的p值为4.45e-05，危险比HR = 1.59，表明ph.ecog值与死亡风险增加之间的强关系。保持其他协变量不变，ph.ecog的较高值与生存率较差相关。\n相比之下，age的p = 0.23。风险比HR = exp（coef）= 1.01，95％置信区间为0.99至1.03。由于HR的置信区间包括1，因此这些结果表明年龄在调整ph.ecog和sex后对HR差异的贡献较小，并且仅趋向于显着性。例如，将其他协变量保持不变，额外的一年会导致每日死亡风险的因数为exp（beta）= 1.01或1％，这不是一个重大贡献。\nReferences: Cox Proportional Hazards Modelhttp://www.sthda.com/english/wiki/cox-proportional-hazards-model\n","permalink":"http://localhost:1313/en/posts/tech/cox_r/","summary":"载入需要的R包 survival用于计算生存分析 survminer用于可视化生存分析结果 library(\u0026#34;survival\u0026#34;) library(\u0026#34;survminer\u0026#34;) 计算COX model : coxph() coxph 可以用于构建计算 Cox proportional hazards regression model，常见用法如下： coxph(formula, data, method) formula : 是通过 Surv构建的生存对象 ，如：Surv(time, event) data：包含变量的data.frame method：计","title":"Cox模型的R实现"}]